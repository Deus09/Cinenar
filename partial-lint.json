[{"filePath":"/workspaces/moviloi/src/components/ActorDetailModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadActorData'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [open, actorId, loadActorData]","fix":{"range":[1272,1287],"text":"[open, actorId, loadActorData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getActorDetails, getActorCredits, TMDBActorDetails, TMDBActorCredit } from '../services/tmdb';\nimport FilmographyCard from './FilmographyCard';\nimport { useModal } from '../context/ModalContext';\n\ninterface ActorDetailModalProps {\n  open: boolean;\n  onClose: () => void; // Modal kapandƒ±ƒüƒ±nda tetiklenecek dƒ±≈ü callback\n  actorId: number | null;\n  onMovieClick?: (movieId: number) => void; // Film kartƒ±na tƒ±klandƒ±ƒüƒ±nda opsiyonel\n  onSeriesClick?: (seriesId: number) => void; // Dizi kartƒ±na tƒ±klandƒ±ƒüƒ±nda opsiyonel\n}\n\ntype FilmographyTab = 'movies' | 'tv';\n\nconst ActorDetailModal: React.FC<ActorDetailModalProps> = ({ \n  open, \n  onClose, \n  actorId,\n  onMovieClick,\n  onSeriesClick\n}) => {\n  const { openModal, closeModal } = useModal();\n  const [actorDetails, setActorDetails] = useState<TMDBActorDetails | null>(null);\n  const [credits, setCredits] = useState<TMDBActorCredit[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isBioExpanded, setIsBioExpanded] = useState(false);\n  const [activeTab, setActiveTab] = useState<FilmographyTab>('movies');\n\n  useEffect(() => {\n    if (open && actorId) {\n      loadActorData();\n    }\n  }, [open, actorId]);\n\n  const loadActorData = async () => {\n    if (!actorId) return;\n    \n    setLoading(true);\n    setError(null);\n    setIsBioExpanded(false);\n    setActiveTab('movies');\n    \n    try {\n      const [details, filmography] = await Promise.all([\n        getActorDetails(actorId),\n        getActorCredits(actorId)\n      ]);\n      \n      setActorDetails(details);\n      setCredits(filmography);\n      console.log('Actor details loaded:', details);\n      console.log('Filmography loaded:', filmography);\n    } catch (err) {\n      setError('Oyuncu detaylarƒ± y√ºklenemedi');\n      console.error('Error loading actor details:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateAge = (birthDate?: string, deathDate?: string) => {\n    if (!birthDate) return null;\n    \n    const birth = new Date(birthDate);\n    const end = deathDate ? new Date(deathDate) : new Date();\n    \n    let age = end.getFullYear() - birth.getFullYear();\n    const monthDiff = end.getMonth() - birth.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && end.getDate() < birth.getDate())) {\n      age--;\n    }\n    \n    return age;\n  };\n\n  const getFilteredCredits = () => {\n    const filtered = credits.filter(credit => {\n      if (activeTab === 'movies') {\n        return credit.media_type === 'movie';\n      } else {\n        return credit.media_type === 'tv';\n      }\n    });\n    console.log(`Filtered credits for ${activeTab}:`, filtered);\n    console.log('All credits:', credits);\n    console.log('Active tab:', activeTab);\n    return filtered;\n  };\n\n  const getPopularCredits = () => {\n    const filtered = getFilteredCredits();\n    return filtered\n      .filter(credit => credit.vote_average && credit.vote_average > 6)\n      .sort((a, b) => (b.vote_average || 0) - (a.vote_average || 0))\n      .slice(0, 4);\n  };\n\n  const handleFilmographyCardClick = (id: number, mediaType: 'movie' | 'tv') => {\n    if (mediaType === 'movie') {\n      onMovieClick?.(id); // dƒ±≈ü callback\n      openModal('movie', id);\n    } else if (mediaType === 'tv') {\n      onSeriesClick?.(id); // dƒ±≈ü callback\n      // ƒ∞leride dizi detay modalƒ± a√ßƒ±labilir\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"w-full h-full bg-[#0C1117] overflow-y-auto\">\n        {/* Back Button */}\n        <button\n          onClick={() => { closeModal(); onClose(); }}\n          className=\"absolute top-12 left-4 z-10 w-6 h-6 flex items-center justify-center\"\n        >\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M19 12H5M12 19L5 12L12 5\" stroke=\"#F8F8FF\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </svg>\n        </button>\n\n        {loading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-white font-poppins\">Y√ºkleniyor...</div>\n          </div>\n        ) : error ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-red-400 font-poppins\">{error}</div>\n          </div>\n        ) : actorDetails ? (\n          <div className=\"px-[18px] py-16\">\n            {/* Hero Section */}\n            <div className=\"flex gap-4 mb-6\">\n              {/* Profile Photo */}\n              <div className=\"w-32 h-48 bg-gray-800 rounded-lg overflow-hidden flex-shrink-0\">\n                <img\n                  src={actorDetails.profile_path ? `https://image.tmdb.org/t/p/w300${actorDetails.profile_path}` : 'https://placehold.co/128x192?text=No+Photo'}\n                  alt={actorDetails.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n\n              {/* Actor Info */}\n              <div className=\"flex-1\">\n                <h1 className=\"text-[#F8F8FF] font-poppins font-bold text-2xl leading-7 mb-3\">\n                  {actorDetails.name}\n                </h1>\n                \n                <div className=\"space-y-2\">\n                  {actorDetails.birthday && (\n                    <div className=\"flex items-center gap-2 text-[#EFEEEA] font-poppins text-sm\">\n                      <span>üéÇ</span>\n                      <span>\n                        {calculateAge(actorDetails.birthday, actorDetails.deathday)} ya≈üƒ±nda\n                        {actorDetails.deathday && ' (vefat etmi≈ü)'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {actorDetails.place_of_birth && (\n                    <div className=\"flex items-center gap-2 text-[#EFEEEA] font-poppins text-sm\">\n                      <span>üìç</span>\n                      <span>{actorDetails.place_of_birth}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Biography Section */}\n            {actorDetails.biography && (\n              <div className=\"mb-6\">\n                <h2 className=\"text-[#F8F8FF] font-poppins font-bold text-xl mb-3\">\n                  Biyografi\n                </h2>\n                \n                <div className=\"relative\">\n                  <p className={`text-[#EFEEEA] font-poppins text-sm leading-6 transition-all duration-300 ${!isBioExpanded ? 'line-clamp-4' : ''}`}>\n                    {actorDetails.biography}\n                  </p>\n                  \n                  {actorDetails.biography.length > 200 && (\n                    <button\n                      onClick={() => setIsBioExpanded(!isBioExpanded)}\n                      className=\"text-[#FE7743] font-poppins text-sm font-medium mt-2 hover:underline transition-all\"\n                    >\n                      {isBioExpanded ? 'Daha Az G√∂ster' : 'Devamƒ±nƒ± Oku'}\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Filmography Section */}\n            <div>\n              <h2 className=\"text-[#F8F8FF] font-poppins font-bold text-xl mb-4\">\n                Filmografi\n              </h2>\n\n              {/* Tab Segment */}\n              <div className=\"flex w-[193px] h-[32px] rounded-[10px] overflow-hidden border border-white bg-[#222] mb-4\">\n                <button\n                  className={`flex-1 h-full flex items-center justify-center font-poppins font-semibold text-sm border-r border-white rounded-l-[10px] transition-all duration-300 ${activeTab === 'movies' ? 'bg-white text-[#FE7743]' : 'bg-[#222] text-white'}`}\n                  onClick={() => {\n                    console.log('Switching to movies tab');\n                    setActiveTab('movies');\n                  }}\n                  type=\"button\"\n                >\n                  Filmler\n                </button>\n                <button\n                  className={`flex-1 h-full flex items-center justify-center font-poppins font-semibold text-sm rounded-r-[10px] transition-all duration-300 ${activeTab === 'tv' ? 'bg-white text-[#FE7743]' : 'bg-[#222] text-white'}`}\n                  onClick={() => {\n                    console.log('Switching to tv tab');\n                    setActiveTab('tv');\n                  }}\n                  type=\"button\"\n                >\n                  Diziler\n                </button>\n              </div>\n\n              {/* Popular Works */}\n              {getPopularCredits().length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-[#EFEEEA] font-poppins font-semibold text-lg mb-3\">\n                    Bilinen Yapƒ±mlarƒ±\n                  </h3>\n                  \n                  <div className=\"flex gap-3 overflow-x-auto pb-4\">\n                    {getPopularCredits().map((credit, index) => (\n                      <div \n                        key={`popular-${credit.id}-${credit.media_type}-${index}`}\n                        className=\"w-[90px] h-[135px] bg-gray-800 rounded-lg border border-white flex-shrink-0 overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\"\n                        onClick={() => handleFilmographyCardClick(credit.id, credit.media_type)}\n                      >\n                        <img\n                          src={credit.poster_path ? `https://image.tmdb.org/t/p/w500${credit.poster_path}` : 'https://placehold.co/90x135?text=No+Image'}\n                          alt={credit.title || credit.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Complete Filmography */}\n              <div>\n                <h3 className=\"text-[#EFEEEA] font-poppins font-semibold text-lg mb-3\">\n                  T√ºm {activeTab === 'movies' ? 'Filmler' : 'Diziler'}\n                </h3>\n                \n                <div className=\"space-y-3\">\n                  {getFilteredCredits().map((credit, index) => (\n                    <FilmographyCard\n                      key={`${credit.id}-${credit.media_type}-${index}`}\n                      credit={credit}\n                      onCardClick={handleFilmographyCardClick}\n                    />\n                  ))}\n                  \n                  {getFilteredCredits().length === 0 && (\n                    <div className=\"text-[#EFEEEA] font-poppins text-sm opacity-70 text-center py-8\">\n                      {activeTab === 'movies' ? 'Film bulunamadƒ±' : 'Dizi bulunamadƒ±'}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ActorDetailModal;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/AddButtonModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onMovieSelect' is defined but never used.","line":31,"column":96,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":109},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedMovie' is assigned a value but never used.","line":53,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleChatWithCast' is assigned a value but never used.","line":462,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":462,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IonDatetime, IonModal, IonItem, IonLabel, IonThumbnail, IonCheckbox } from '@ionic/react';\nimport { TMDBMovieResult, TMDBCastMember, getSeriesDetails, searchAll, TMDBSearchResult, getSeasonDetails, SeasonDetails as TMDBSeasonDetails } from '../services/tmdb';\nimport { improveComment, chatWithCast } from '../services/gemini';\nimport { LocalStorageService } from '../services/localStorage';\nimport { TvSeriesDetails } from '../types/tmdb';\nimport CastSelectionModal from './CastSelectionModal';\nimport CastChatModal from './CastChatModal';\nimport { MovieLogDraft } from '../types/drafts';\n\ninterface AddButtonModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSave: (log?: { selectedMovie?: TMDBMovieResult; tmdbId?: number }) => void;\n  onAddMovieLog?: (log: MovieLogDraft) => void;\n  onMovieSelect?: (movie: TMDBMovieResult, id: number) => void;\n  prefillData?: {\n    title?: string;\n    poster?: string;\n    tmdbId?: number;\n    mediaType?: 'movie' | 'tv';\n    contentType?: 'movie' | 'tv';\n    genres?: string[];\n    releaseYear?: number;\n    runtime?: number;\n    type?: 'watched' | 'watchlist';\n  };\n}\n\nconst AddButtonModal: React.FC<AddButtonModalProps> = ({ open, onClose, onSave, onAddMovieLog, onMovieSelect, prefillData }) => {\n  // Modal view states\n  const { t } = useTranslation();\n  type ModalView = 'search' | 'episodes';\n  const [view, setView] = useState<ModalView>('search');\n  \n  const [selectedSeries, setSelectedSeries] = useState<TvSeriesDetails | null>(null);\n  const [selectedSeason, setSelectedSeason] = useState<number>(1);\n  const [seasonDetails, setSeasonDetails] = useState<TMDBSeasonDetails | null>(null);\n  const [checkedEpisodes, setCheckedEpisodes] = useState<Set<number>>(new Set());\n\n  const [watchList, setWatchList] = useState(false);\n  const [date, setDate] = useState(() => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  });\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [hoverRating, setHoverRating] = useState<number | null>(null);\n  const [search, setSearch] = useState('');\n  const [suggestions, setSuggestions] = useState<TMDBSearchResult[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState<TMDBMovieResult | null>(null);\n  const [tmdbId, setTmdbId] = useState<number | null>(null);\n  \n  // Yeni state'ler - Akƒ±llƒ± veri aktarƒ±mƒ± i√ßin\n  const [title, setTitle] = useState('');\n  const [poster, setPoster] = useState('');\n  interface SelectedItemBase {\n    id?: number;\n    tmdbId?: number;\n    title?: string;\n    name?: string;\n    poster?: string;\n    poster_path?: string | null;\n    media_type?: 'movie' | 'tv';\n    mediaType?: 'movie' | 'tv';\n    runtime?: number;\n    seriesId?: string;\n    seriesTitle?: string;\n    seriesPoster?: string;\n    seasonNumber?: number;\n    episodeNumber?: number;\n    episodeId?: number;\n    allSelectedEpisodes?: Array<{\n      id: number;\n      name: string;\n      episode_number: number;\n      still_path?: string | null;\n      runtime?: number | null;\n    }>;\n  }\n  type SelectedItem = SelectedItemBase | null;\n  const [selectedItem, setSelectedItem] = useState<SelectedItem>(null);\n  const suggestionsRef = useRef<HTMLDivElement>(null);\n  const [comment, setComment] = useState('');\n  const [improving, setImproving] = useState(false);\n  // ƒ∞yile≈ütirme kaldƒ±rƒ±ldƒ± (kullanƒ±lmƒ±yordu)\n  // const [improved, setImproved] = useState('');\n  // const [showImproveAlert, setShowImproveAlert] = useState(false);\n  const [actionSheetOpen, setActionSheetOpen] = useState(false);\n  const [pendingImproved, setPendingImproved] = useState('');\n  \n  // Cast chat states\n  const [showCastSelection, setShowCastSelection] = useState(false);\n  const [showCastChat, setShowCastChat] = useState(false);\n  const [selectedCastMember, setSelectedCastMember] = useState<TMDBCastMember | null>(null);\n\n  React.useEffect(() => {\n    console.log('Selected rating:', rating);\n  }, [rating]);\n\n  React.useEffect(() => {\n    if (open) {\n      setView('search');\n      setSelectedSeries(null);\n      setSelectedSeason(null);\n      setCheckedEpisodes(new Set());\n      setSearch('');\n      setSelectedMovie(null);\n      setTmdbId(null);\n      setRating(0);\n      setHoverRating(null);\n      setDate(() => {\n        const today = new Date();\n        return today.toISOString().split('T')[0];\n      });\n      setComment('');\n      setWatchList(false);\n      setShowCastSelection(false);\n      setShowCastChat(false);\n      setSelectedCastMember(null);\n      \n      // Yeni state'leri de sƒ±fƒ±rla\n      setTitle('');\n      setPoster('');\n      setSelectedItem(null);\n\n      // Prefill data varsa kullan\n      if (prefillData) {\n        setSelectedItem({\n          title: prefillData.title,\n          name: prefillData.title,\n          poster_path: prefillData.poster,\n          poster: prefillData.poster,\n          tmdbId: prefillData.tmdbId,\n          id: prefillData.tmdbId,\n          mediaType: prefillData.mediaType || 'movie',\n          contentType: prefillData.contentType || 'movie',\n          genres: prefillData.genres || [],\n          releaseYear: prefillData.releaseYear,\n          runtime: prefillData.runtime || 120\n        });\n        setTmdbId(prefillData.tmdbId || null);\n        setWatchList(prefillData.type === 'watchlist');\n        setTitle(prefillData.title || '');\n        setPoster(prefillData.poster || '');\n      }\n    }\n  }, [open, prefillData]);\n\n  useEffect(() => {\n    if (search.length >= 3) {\n      setLoading(true);\n      searchAll(search)\n        .then(res => {\n          // Movies ve series'i birle≈ütir\n          const combined = [...res.movies, ...res.series];\n          setSuggestions(combined);\n        })\n        .catch(() => setSuggestions([]))\n        .finally(() => setLoading(false));\n    } else {\n      setSuggestions([]);\n    }\n  }, [search]);\n\n  if (!open) return null;\n\n  const handleCancel = () => {\n    setSearch('');\n    setSelectedMovie(null);\n    setTmdbId(null);\n    setRating(0);\n    setHoverRating(null);\n    setDate(() => {\n      const today = new Date();\n      return today.toISOString().split('T')[0];\n    });\n    setComment('');\n    setWatchList(false);\n    onClose();\n  };\n\n  // Sparkle butonuna tƒ±klama fonksiyonu\n  const handleImprove = async () => {\n    if (!comment.trim() || !selectedItem) return;\n    setImproving(true);\n    try {\n      const movieTitle = selectedItem.title || selectedItem.name || '';\n      const result = await improveComment(comment, movieTitle);\n      setPendingImproved(result);\n      setActionSheetOpen(true);\n    } catch {\n      // hata y√∂netimi eklenebilir\n    } finally {\n      setImproving(false);\n    }\n  };\n\n  // Veri alma fonksiyonu - B√∂l√ºm se√ßim ekranƒ±ndan gelen veriyi i≈üler\n  const handleItemSelected = (item: SelectedItemBase) => {\n    console.log('Item selected:', item);\n    setSelectedItem(item);\n    setTitle(item.name || item.title || '');\n    \n    // Poster belirleme mantƒ±ƒüƒ±nƒ± d√ºzelt\n    let posterUrl = '';\n    if (item.poster) {\n      // Tam URL varsa direkt kullan\n      posterUrl = item.poster;\n    } else if (item.poster_path) {\n      // TMDB path varsa tam URL'e √ßevir\n      posterUrl = `https://image.tmdb.org/t/p/w500${item.poster_path}`;\n    } else if (item.seriesPoster) {\n      // Dizi posteri varsa onu kullan\n      posterUrl = item.seriesPoster;\n    }\n    \n    setPoster(posterUrl);\n    setTmdbId(item.id || item.tmdbId);\n    \n    // Eƒüer film ise selectedMovie'yi de set et\n    if (item.media_type === 'movie' || item.mediaType === 'movie') {\n      setSelectedMovie(item);\n    }\n    \n    // Se√ßim yapƒ±ldƒ±ktan sonra search view'a d√∂n ve form alanlarƒ±nƒ± aktif hale getir\n    setView('search');\n    setSuggestions([]);\n    setSearch('');\n    \n    // Form alanlarƒ±nƒ± sƒ±fƒ±rla (yeni se√ßim i√ßin)\n    setRating(0);\n    setComment('');\n    setWatchList(false);\n    setDate(() => {\n      const today = new Date();\n      return today.toISOString().split('T')[0];\n    });\n  };\n\n  // Dizi se√ßim fonksiyonu - OPTIMIZE EDƒ∞LDƒ∞: Doƒürudan b√∂l√ºm se√ßimine gider\n  const handleSeriesSelect = async (seriesId: number) => {\n    try {\n      console.log('Fetching series details for ID:', seriesId);\n      const seriesDetails = await getSeriesDetails(seriesId);\n      console.log('Received series details:', seriesDetails);\n      console.log('Seasons array:', seriesDetails.seasons);\n      \n      // Transform to TvSeriesDetails format\n      const transformedSeries: TvSeriesDetails = {\n        id: seriesDetails.id,\n        name: seriesDetails.name,\n        poster_path: seriesDetails.poster_path || null,\n        number_of_seasons: seriesDetails.number_of_seasons || 0,\n        seasons: seriesDetails.seasons?.map(season => ({\n          id: season.id,\n          season_number: season.season_number,\n          name: season.name,\n          poster_path: season.poster_path || null,\n          episode_count: season.episode_count\n        })) || []\n      };\n      \n      console.log('Transformed series:', transformedSeries);\n      setSelectedSeries(transformedSeries);\n      \n      // üöÄ YENƒ∞: Otomatik olarak ilk sezonu se√ß ve doƒürudan episodes'a git\n      if (transformedSeries.seasons && transformedSeries.seasons.length > 0) {\n        const firstSeason = transformedSeries.seasons[0];\n        console.log('Auto-selecting first season:', firstSeason.season_number);\n        \n        // ƒ∞lk sezonun detaylarƒ±nƒ± √ßek\n        const seasonDetailsData = await getSeasonDetails(transformedSeries.id, firstSeason.season_number);\n        setSelectedSeason(firstSeason.season_number);\n        setSeasonDetails(seasonDetailsData);\n        setCheckedEpisodes(new Set()); // Reset checked episodes\n        setView('episodes'); // üéØ Doƒürudan b√∂l√ºm se√ßimine git!\n      } else {\n        // Sezon yoksa search'e geri d√∂n\n        setView('search');\n      }\n    } catch (error) {\n      console.error('Error fetching series details:', error);\n      // Hata durumunda search'e geri d√∂n\n      setView('search');\n    }\n  };\n\n  // Season change handler\n  const handleSeasonChange = async (seasonNumber: number) => {\n    if (!selectedSeries) return;\n    \n    setSelectedSeason(seasonNumber);\n    setCheckedEpisodes(new Set()); // Clear selected episodes\n    \n    try {\n      const seasonDetailsData = await getSeasonDetails(selectedSeries.id, seasonNumber);\n      setSeasonDetails(seasonDetailsData);\n    } catch (error) {\n      console.error('Error fetching season details:', error);\n    }\n  };\n\n  // Episode checkbox toggle fonksiyonu\n  const handleEpisodeToggle = (episodeId: number) => {\n    setCheckedEpisodes(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(episodeId)) {\n        newSet.delete(episodeId);\n      } else {\n        newSet.add(episodeId);\n      }\n      return newSet;\n    });\n  };\n\n  // T√ºm√ºn√º se√ß/bƒ±rak fonksiyonu\n  const handleSelectAllEpisodes = () => {\n    if (!seasonDetails || !seasonDetails.episodes) return;\n    \n    const allEpisodeIds = seasonDetails.episodes.map(ep => ep.id);\n    const areAllSelected = allEpisodeIds.every(id => checkedEpisodes.has(id));\n    \n    if (areAllSelected) {\n      setCheckedEpisodes(new Set());\n    } else {\n      setCheckedEpisodes(new Set(allEpisodeIds));\n    }\n  };\n\n  const handleSave = () => {\n    if (!selectedItem) return;\n    console.log('handleSave called, selectedItem:', selectedItem);\n    \n    // Prefill data ile gelen film/dizi i√ßin mevcut kaydƒ± kontrol et\n    if (prefillData && prefillData.tmdbId) {\n      const existingLogs = LocalStorageService.getMovieLogs();\n      const existingLog = existingLogs.find(log => \n        log.tmdbId === prefillData.tmdbId && \n        log.mediaType === prefillData.mediaType\n      );\n      \n      if (existingLog) {\n        // Mevcut kaydƒ± g√ºncelle\n        const updatedLog = LocalStorageService.updateMovieLog(existingLog.id, {\n          rating: rating.toString(),\n          review: comment,\n          date: date\n        });\n        onAddMovieLog?.(updatedLog);\n        onSave({ selectedMovie: selectedItem, tmdbId: selectedItem.tmdbId || selectedItem.id });\n        return;\n      }\n    }\n    \n    // Eƒüer birden fazla b√∂l√ºm se√ßildiyse hepsini kaydet\n    if (selectedItem.allSelectedEpisodes && selectedItem.allSelectedEpisodes.length > 1) {\n  selectedItem.allSelectedEpisodes.forEach((episode) => {\n        const log = {\n          title: `${selectedItem.seriesTitle} - S${selectedItem.seasonNumber}E${episode.episode_number}: ${episode.name}`,\n          date,\n          rating: rating.toString(),\n          review: comment,\n          poster: episode.still_path ? `https://image.tmdb.org/t/p/w500${episode.still_path}` : selectedItem.poster,\n          type: watchList ? 'watchlist' : 'watched',\n          mediaType: selectedItem.mediaType || 'movie' as 'movie' | 'tv',\n          contentType: selectedItem.mediaType || 'movie' as 'movie' | 'tv',\n          tmdbId: episode.id, // ‚úÖ D√úZELTƒ∞LDƒ∞: Episode ID'si kullanƒ±lƒ±yor, series ID'si deƒüil\n          seriesId: selectedItem.seriesId,\n          seriesTitle: selectedItem.seriesTitle,\n          seriesPoster: selectedItem.seriesPoster,\n          seasonNumber: selectedItem.seasonNumber,\n          episodeNumber: episode.episode_number,\n          episodeId: episode.id,\n          runtime: selectedItem.runtime || (selectedItem.mediaType === 'tv' ? 45 : 120)\n        };\n        onAddMovieLog?.(log);\n      });\n    } else {\n      // Tek film/b√∂l√ºm i√ßin normal kaydetme\n      const log = {\n        title: selectedItem.title || selectedItem.name,\n        date,\n        rating: rating.toString(),\n        review: comment,\n        poster: selectedItem.poster || (selectedItem.poster_path ? `https://image.tmdb.org/t/p/w500${selectedItem.poster_path}` : ''),\n        type: watchList ? 'watchlist' : 'watched',\n        mediaType: selectedItem.mediaType || 'movie' as 'movie' | 'tv',\n        contentType: selectedItem.mediaType || 'movie' as 'movie' | 'tv',\n        tmdbId: selectedItem.tmdbId || selectedItem.id,\n        seriesId: selectedItem.seriesId,\n        seriesTitle: selectedItem.seriesTitle,\n        seriesPoster: selectedItem.seriesPoster,\n        seasonNumber: selectedItem.seasonNumber,\n        episodeNumber: selectedItem.episodeNumber,\n        episodeId: selectedItem.episodeId,\n        runtime: selectedItem.runtime || (selectedItem.mediaType === 'tv' ? 45 : 120)\n      };\n      onAddMovieLog?.(log);\n    }\n    \n    // Modal'ƒ± kapat\n    onSave({ selectedMovie: selectedItem, tmdbId: selectedItem.tmdbId || selectedItem.id });\n  };\n\n  // TV dizisi b√∂l√ºmlerini kaydetme fonksiyonu - Artƒ±k \"ƒ∞leri\" butonu mantƒ±ƒüƒ±\n  const handleEpisodeForward = () => {\n    if (!selectedSeries || !seasonDetails || checkedEpisodes.size === 0) return;\n    \n    console.log('Moving forward with selected episode(s):', {\n      series: selectedSeries.name,\n      season: selectedSeason,\n      episodes: Array.from(checkedEpisodes)\n    });\n\n    // ƒ∞lk se√ßilen b√∂l√ºm√º ana forma aktar\n    const firstEpisodeId = Array.from(checkedEpisodes)[0];\n    const episode = seasonDetails.episodes?.find(ep => ep.id === firstEpisodeId);\n    \n    if (episode) {\n      const episodeItem = {\n        id: episode.id,\n        name: `${selectedSeries.name} - S${selectedSeason}E${episode.episode_number}: ${episode.name}`,\n        title: `${selectedSeries.name} - S${selectedSeason}E${episode.episode_number}: ${episode.name}`,\n        poster_path: episode.still_path || selectedSeries.poster_path,\n        // Poster URL'ini doƒüru ≈üekilde olu≈ütur - √∂ncelik sƒ±rasƒ±: episode still > series poster\n        poster: episode.still_path \n          ? `https://image.tmdb.org/t/p/w500${episode.still_path}` \n          : (selectedSeries.poster_path \n            ? `https://image.tmdb.org/t/p/w500${selectedSeries.poster_path}` \n            : ''),\n        media_type: 'tv',\n        mediaType: 'tv',\n        tmdbId: episode.id, // ‚úÖ D√úZELTƒ∞LDƒ∞: Episode ID'si kullanƒ±lƒ±yor, series ID'si deƒüil\n        seriesId: selectedSeries.id.toString(),\n        seriesTitle: selectedSeries.name,\n        seriesPoster: selectedSeries.poster_path ? `https://image.tmdb.org/t/p/w500${selectedSeries.poster_path}` : undefined,\n        seasonNumber: selectedSeason,\n        episodeNumber: episode.episode_number,\n        episodeId: episode.id,\n        runtime: episode.runtime || 45,\n        // Eƒüer birden fazla b√∂l√ºm se√ßildiyse onlarƒ± da sakla\n        allSelectedEpisodes: Array.from(checkedEpisodes).map(episodeId => {\n          const ep = seasonDetails.episodes?.find(e => e.id === episodeId);\n          return ep ? {\n            id: ep.id,\n            name: ep.name,\n            episode_number: ep.episode_number,\n            still_path: ep.still_path,\n            runtime: ep.runtime\n          } : null;\n        }).filter(Boolean)\n      };\n      \n      // Ana forma veriyi aktar\n      handleItemSelected(episodeItem);\n    }\n  };\n\n  const handleChatWithCast = () => {\n    setShowCastSelection(true);\n  };\n\n  const handleCastSelect = (castMember: TMDBCastMember) => {\n    setSelectedCastMember(castMember);\n    setShowCastChat(true);\n  };\n\n  const handleSendMessage = async (message: string): Promise<string> => {\n    if (!selectedCastMember || !selectedItem) {\n      throw new Error('No cast member or content selected');\n    }\n    \n    const title = selectedItem.title || selectedItem.name || '';\n    return await chatWithCast(message, selectedCastMember, title);\n  };\n\n  return (\n    <>\n      <div className=\"fixed inset-0 z-[60] flex items-end justify-center bg-black bg-opacity-40\">\n        <div className=\"w-[393px] max-h-[95vh] h-[95vh] rounded-t-[54px] bg-[#222] pb-6 pt-6 px-4 shadow-2xl animate-slideInUp overflow-y-auto relative z-[60]\">\n          {/* Modal Title */}\n          <div className=\"flex justify-center mb-8\">\n            <span className=\"text-[24px] font-extrabold font-poppins text-[#F8F8FF] text-center drop-shadow-[0_4px_15px_rgba(255,255,255,0.5)]\">{t('add_movie_modal.title')}</span>\n          </div>\n          {/* Search Bar */}\n          {!selectedItem ? (\n            <div className=\"mb-8 relative\">\n              <span className=\"block text-[16px] font-semibold font-poppins text-[#F8F8FF] mb-1\">{t('add_movie_modal.search_label')}</span>\n              <div className=\"relative\">\n                <input\n                  className=\"w-full h-[40px] rounded-[12px] bg-[#EFEEEA] pl-10 pr-10 text-black text-[16px] font-poppins font-semibold outline-none\"\n                  placeholder={t('add_movie_modal.search_placeholder')}\n                  value={search}\n                  onChange={e => {\n                    setSearch(e.target.value);\n                  }}\n                  onFocus={() => setSuggestions(search.length >= 3 ? suggestions : [])}\n                />\n                {/* X butonu */}\n                {search.length > 0 && (\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 hover:text-[#FE7743] focus:outline-none\"\n                    aria-label=\"Clear search\"\n                    onClick={() => {\n                      setSearch('');\n                    }}\n                  >\n                    <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-5 h-5\">\n                      <path fillRule=\"evenodd\" d=\"M10 8.586l4.95-4.95a1 1 0 111.414 1.414L11.414 10l4.95 4.95a1 1 0 01-1.414 1.414L10 11.414l-4.95 4.95a1 1 0 01-1.414-1.414L8.586 10l-4.95-4.95A1 1 0 115.05 3.636L10 8.586z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                )}\n                <svg className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5\" fill=\"none\" stroke=\"#000\" strokeWidth={2} viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21 21l-4.35-4.35m0 0A7.5 7.5 0 1 0 6.5 6.5a7.5 7.5 0 0 0 10.6 10.6z\" />\n                </svg>\n                {search.length >= 3 && suggestions.length > 0 && (\n                  <div ref={suggestionsRef} className=\"absolute left-0 top-[44px] w-full bg-white rounded-b-[12px] shadow-lg z-50 max-h-72 overflow-y-auto border border-[#FE7743]\">\n                    {loading && <div className=\"p-2 text-sm text-gray-400\">{t('add_movie_modal.loading')}</div>}\n                    {suggestions.map(item => (\n                      <div\n                        key={item.id}\n                        className=\"flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-[#FE7743]/10\"\n                        onClick={() => {\n                          if (item.media_type === 'movie') {\n                            // Film se√ßimi - artƒ±k direkt ana forma aktar\n                            const movieItem = {\n                              id: item.id,\n                              title: item.title,\n                              name: item.title,\n                              poster_path: item.poster_path,\n                              poster: item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '',\n                              media_type: 'movie',\n                              mediaType: 'movie',\n                              tmdbId: item.id,\n                              runtime: 120 // varsayƒ±lan\n                            };\n                            handleItemSelected(movieItem);\n                          } else if (item.media_type === 'tv') {\n                            // Dizi se√ßimi - sezon/b√∂l√ºm se√ßim ekranƒ±na git\n                            setSuggestions([]);\n                            setSearch(item.name || '');\n                            handleSeriesSelect(item.id);\n                          }\n                        }}\n                      >\n                        <img\n                          src={item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : 'https://placehold.co/40x60?text=No+Image'}\n                          alt={item.title || item.name}\n                          className=\"w-10 h-16 object-cover rounded\"\n                        />\n                        <span className=\"text-black text-[15px] font-poppins\">{item.title || item.name}</span>\n                        <span className=\"text-xs text-gray-400 ml-auto\">{item.release_date?.slice(0,4) || item.first_air_date?.slice(0,4) || ''}</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            // Se√ßim yapƒ±ldƒ±ktan sonra se√ßilen i√ßeriƒüi g√∂ster\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <span className=\"block text-[16px] font-semibold font-poppins text-[#F8F8FF]\">{t('add_movie_modal.selected_content')}</span>\n                <button\n                  onClick={() => {\n                    setSelectedItem(null);\n                    setTitle('');\n                    setPoster('');\n                    setSelectedMovie(null);\n                    setTmdbId(null);\n                  }}\n                  className=\"text-[#FE7743] text-sm font-medium hover:text-[#FE7743]/80\"\n                >\n                  {t('add_movie_modal.change')}\n                </button>\n              </div>\n              <div className=\"flex items-center gap-4 p-3 bg-[#333] rounded-lg\">\n                {poster && (\n                  <img\n                    src={poster}\n                    alt={title}\n                    className=\"w-16 h-24 object-cover rounded\"\n                  />\n                )}\n                <div className=\"flex-1\">\n                  <h3 className=\"text-[#F8F8FF] font-semibold text-[16px] leading-5\">{title}</h3>\n                  <p className=\"text-[#B0B0B0] text-sm mt-1\">\n                    {selectedItem?.mediaType === 'tv' ? t('add_movie_modal.tv_series_episode') : t('add_movie_modal.movie')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Search View - Default */}\n          {view === 'search' && (\n            <>\n          {/* Add Watch List Toggle */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <span className=\"text-[16px] font-semibold font-poppins text-[#F8F8FF]\">{t('add_movie_modal.add_watchlist')}</span>\n            <button\n              type=\"button\"\n              aria-pressed={watchList}\n              onClick={() => selectedItem && setWatchList(v => !v)}\n              disabled={!selectedItem}\n              className={`w-12 h-7 rounded-full flex items-center transition-colors duration-300 focus:outline-none ${\n                !selectedItem ? 'bg-gray-400 opacity-50 cursor-not-allowed' :\n                watchList ? 'bg-[#FE7743]' : 'bg-[#D9D9D9]'\n              }`}\n            >\n              <span\n                className={`w-6 h-6 bg-white rounded-full shadow-md transform transition-transform duration-300 ${watchList ? 'translate-x-5' : 'translate-x-1'}`}\n              />\n            </button>\n          </div>          {/* Additional fields for TV shows - Ge√ßici olarak kaldƒ±rƒ±ldƒ±, TMDB'den gelecek */}\n          {/* TV dizileri i√ßin sezon/b√∂l√ºm bilgileri TMDB API'sinden otomatik olarak gelecek */}\n\n          {/* Runtime - Kaldƒ±rƒ±ldƒ±, TMDB'den gelecek */}\n          {/* Film/dizi s√ºre bilgisi TMDB API'sinden otomatik olarak gelecek */}\n\n          {/* Date Watched */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <span className=\"text-[16px] font-semibold font-poppins text-[#F8F8FF]\">{t('add_movie_modal.date_watched')}</span>\n            <button\n              type=\"button\"\n              className={`w-[130px] h-[40px] rounded-[12px] bg-[#D9D9D9] flex items-center justify-center text-[#000] text-[16px] font-poppins font-semibold relative ${\n                (watchList || !selectedItem) ? 'opacity-50 pointer-events-none' : ''\n              }`}\n              onClick={() => !watchList && selectedItem && setShowDatePicker(true)}\n              disabled={watchList || !selectedItem}\n            >\n              {date === new Date().toISOString().split('T')[0] ? t('add_movie_modal.today') : date}\n            </button>\n            <IonModal isOpen={showDatePicker} onDidDismiss={() => setShowDatePicker(false)}>\n              <div className=\"flex flex-col items-center justify-center h-full bg-[#222]\">\n                <IonDatetime\n                  presentation=\"date\"\n                  preferWheel={true}\n                  value={date}\n                  onIonChange={e => {\n                    if (e.detail.value) setDate(e.detail.value as string);\n                  }}\n                  max={new Date().toISOString().split('T')[0]}\n                  className=\"w-full\"\n                  disabled={watchList}\n                />\n                <button\n                  className=\"mt-4 px-6 py-2 rounded-lg bg-[#FE7743] text-white font-poppins font-semibold\"\n                  onClick={() => setShowDatePicker(false)}\n                  disabled={watchList}\n                >\n                  {t('add_movie_modal.set_date')}\n                </button>\n              </div>\n            </IonModal>\n          </div>\n          {/* Rating */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <span className=\"text-[16px] font-semibold font-poppins text-[#F8F8FF]\">{t('add_movie_modal.rating')}</span>\n            <div className={`flex gap-1 ${(watchList || !selectedItem) ? 'opacity-50 pointer-events-none' : ''}`}>\n              {[1,2,3,4,5].map(i => {\n                const value = i;\n                const displayValue = hoverRating !== null ? hoverRating : rating;\n                let fill = '#D9D9D9';\n                if (displayValue >= value) fill = '#FE7743';\n                else if (displayValue >= value - 0.5) fill = 'url(#half-star)';\n                return (\n                  <svg\n                    key={i}\n                    width=\"35\" height=\"33\" viewBox=\"0 0 35 33\" fill=\"none\"\n                    onMouseMove={(watchList || !selectedItem) ? undefined : e => {\n                      const { left, width } = (e.target as SVGElement).getBoundingClientRect();\n                      const x = e.clientX - left;\n                      if (x < width / 2) setHoverRating(value - 0.5);\n                      else setHoverRating(value);\n                    }}\n                    onMouseLeave={(watchList || !selectedItem) ? undefined : () => setHoverRating(null)}\n                    onClick={(watchList || !selectedItem) ? undefined : e => {\n                      const { left, width } = (e.target as SVGElement).getBoundingClientRect();\n                      const x = e.clientX - left;\n                      if (x < width / 2) setRating(value - 0.5);\n                      else setRating(value);\n                    }}\n                    onTouchStart={(watchList || !selectedItem) ? undefined : e => {\n                      const touch = e.touches[0];\n                      const { left, width } = (e.target as SVGElement).getBoundingClientRect();\n                      const x = touch.clientX - left;\n                      if (x < width / 2) setHoverRating(value - 0.5);\n                      else setHoverRating(value);\n                    }}\n                    onTouchEnd={(watchList || !selectedItem) ? undefined : e => {\n                      const touch = e.changedTouches[0];\n                      const { left, width } = (e.target as SVGElement).getBoundingClientRect();\n                      const x = touch.clientX - left;\n                      if (x < width / 2) setRating(value - 0.5);\n                      else setRating(value);\n                      setHoverRating(null);\n                    }}\n                    style={{ cursor: (watchList || !selectedItem) ? 'not-allowed' : 'pointer', transition: 'fill 0.2s' }}\n                  >\n                    <defs>\n                      <linearGradient id=\"half-star\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                        <stop offset=\"50%\" stopColor=\"#FE7743\" />\n                        <stop offset=\"50%\" stopColor=\"#D9D9D9\" />\n                      </linearGradient>\n                    </defs>\n                    <polygon\n                      points=\"17.5,2 22.5,12.5 34,13.5 25,21.5 28,32 17.5,26 7,32 10,21.5 1,13.5 12.5,12.5\"\n                      fill={fill}\n                      stroke=\"#FE7743\"\n                      strokeWidth=\"2\"\n                    />\n                  </svg>\n                );\n              })}\n            </div>\n          </div>\n          {/* Comment */}\n          <div className=\"mb-8 relative\">\n            <span className=\"block text-[16px] font-semibold font-poppins text-[#F8F8FF] mb-1\">{t('add_movie_modal.comment')}</span>\n            <div className=\"relative\">\n              <textarea\n                className={`w-full min-h-[150px] max-h-[250px] rounded-[12px] bg-[#D9D9D9] p-3 pr-10 text-black text-[16px] font-poppins font-normal resize-none outline-none overflow-y-auto ${(watchList || !selectedItem) ? 'opacity-50 pointer-events-none' : ''}`}\n                placeholder={t('add_movie_modal.comment_placeholder')}\n                value={comment}\n                onChange={e => setComment(e.target.value)}\n                disabled={watchList || !selectedItem}\n                style={{ height: 'auto', maxHeight: 250, minHeight: 150 }}\n                onInput={e => {\n                  const target = e.target as HTMLTextAreaElement;\n                  target.style.height = 'auto';\n                  target.style.height = Math.min(target.scrollHeight, 250) + 'px';\n                }}\n              />\n              <button\n                type=\"button\"\n                className=\"absolute bottom-2 right-2 w-7 h-7 flex items-center justify-center bg-transparent p-0 m-0 focus:outline-none\"\n                tabIndex={-1}\n                aria-label=\"Sparkle\"\n                disabled={watchList || improving || !selectedItem}\n                onClick={handleImprove}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"22\" height=\"22\" viewBox=\"0 0 50 50\">\n                  <path d=\"M22.462 11.035l2.88 7.097c1.204 2.968 3.558 5.322 6.526 6.526l7.097 2.88c1.312.533 1.312 2.391 0 2.923l-7.097 2.88c-2.968 1.204-5.322 3.558-6.526 6.526l-2.88 7.097c-.533 1.312-2.391 1.312-2.923 0l-2.88-7.097c-1.204-2.968-3.558-5.322-6.526-6.526l-7.097-2.88c-1.312-.533-1.312-2.391 0-2.923l7.097-2.88c2.968-1.204 5.322-3.558 6.526-6.526l2.88-7.097C20.071 9.723 21.929 9.723 22.462 11.035zM39.945 2.701l.842 2.428c.664 1.915 2.169 3.42 4.084 4.084l2.428.842c.896.311.896 1.578 0 1.889l-2.428.842c-1.915.664-3.42 2.169-4.084 4.084l-.842 2.428c-.311.896-1.578.896-1.889 0l-.842-2.428c-.664-1.915-2.169-3.42-4.084-4.084l-2.428-.842c-.896-.311-.896-1.578 0-1.889l2.428-.842c1.915-.664 3.42-2.169 4.084-4.084l.842-2.428C38.366 1.805 39.634 1.805 39.945 2.701z\"></path>\n                </svg>\n              </button>\n            </div>\n          </div>\n          {/* Action Buttons */}\n          <div className=\"flex justify-center gap-6 mt-6 relative z-[60]\">\n            <button onClick={handleCancel} className=\"w-[130px] h-[40px] rounded-[12px] bg-[#EFEEEA] text-[#222] text-[16px] font-poppins font-semibold shadow-md relative z-[60]\">{t('add_movie_modal.cancel')}</button>\n            <button \n              onClick={handleSave} \n              disabled={!selectedItem}\n              className={`w-[130px] h-[40px] rounded-[12px] text-[16px] font-poppins font-semibold shadow-lg relative z-[60] ${\n                !selectedItem \n                  ? 'bg-gray-400 text-gray-600 cursor-not-allowed' \n                  : 'bg-[#FE7743] text-[#F8F8FF] hover:bg-[#FE7743]/90'\n              }`}\n            >\n              {t('add_movie_modal.save')}\n            </button>\n          </div>\n          </>\n          )}\n          \n          {/* Episodes View */}\n          {view === 'episodes' && seasonDetails && (\n            <div>\n              <div className=\"text-center text-[#F8F8FF] text-[18px] font-poppins mb-6\">\n                {t('add_movie_modal.season')} {selectedSeason} - {t('add_movie_modal.select_all_episodes')}\n              </div>\n              \n              {/* T√ºm√ºn√º Se√ß Checkbox */}\n              <IonItem className=\"bg-muted rounded-lg mb-4\">\n                <IonCheckbox \n                  slot=\"start\"\n                  checked={(seasonDetails.episodes?.length ?? 0) > 0 && seasonDetails.episodes?.every(ep => checkedEpisodes.has(ep.id)) === true}\n                  indeterminate={seasonDetails.episodes?.some(ep => checkedEpisodes.has(ep.id)) === true && seasonDetails.episodes?.every(ep => checkedEpisodes.has(ep.id)) !== true}\n                  onIonChange={handleSelectAllEpisodes}\n                />\n                <IonLabel className=\"text-[#F8F8FF]\">\n                  <h2 className=\"text-[16px] font-poppins font-semibold\">T√ºm√ºn√º Se√ß</h2>\n                  <p className=\"text-sm text-muted-foreground\">{seasonDetails.episodes?.length ?? 0} b√∂l√ºm</p>\n                </IonLabel>\n              </IonItem>\n\n              {/* Episode List */}\n              <div className=\"space-y-2 max-h-[400px] overflow-y-auto mb-6 pr-1\">\n                {seasonDetails.episodes?.map((episode) => (\n                  <div \n                    key={episode.id}\n                    className=\"flex items-center p-3 bg-card rounded-lg border border-border\"\n                  >\n                    <IonCheckbox \n                      className=\"mr-4\"\n                      checked={checkedEpisodes.has(episode.id)}\n                      onIonChange={() => handleEpisodeToggle(episode.id)}\n                    />\n                    <IonThumbnail className=\"w-24 h-16 mr-2\">\n                      {episode.still_path ? (\n                        <img \n                          src={`https://image.tmdb.org/t/p/w200${episode.still_path}`} \n                          alt={episode.name}\n                          className=\"rounded\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-muted flex items-center justify-center text-muted-foreground text-xs\">\n                          {t('add_movie_modal.no_image')}\n                        </div>\n                      )}\n                    </IonThumbnail>\n                    <h3 className=\"font-semibold text-[#F8F8FF] whitespace-normal\">\n                      {episode.episode_number}. {episode.name}\n                    </h3>\n                  </div>\n                )) ?? []}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-center gap-6 mt-6 relative z-[60]\">\n                <select\n                  value={selectedSeason}\n                  onChange={(e) => handleSeasonChange(Number(e.target.value))}\n                  className=\"w-[130px] h-[40px] rounded-[12px] bg-[#EFEEEA] text-[#222] text-[16px] font-poppins font-semibold shadow-md relative z-[60]\"\n                >\n                  {selectedSeries?.seasons?.map((season) => (\n                    <option key={season.season_number} value={season.season_number}>\n                      {season.season_number === 0 ? t('add_movie_modal.special') : `${t('add_movie_modal.season')} ${season.season_number}`}\n                    </option>\n                  ))}\n                </select>\n                <button \n                  onClick={handleEpisodeForward}\n                  disabled={checkedEpisodes.size === 0}\n                  className={`w-[130px] h-[40px] rounded-[12px] text-[16px] font-poppins font-semibold shadow-lg relative z-[60] ${\n                    checkedEpisodes.size === 0 \n                      ? 'bg-gray-400 text-gray-600 cursor-not-allowed' \n                      : 'bg-[#FE7743] text-[#F8F8FF] hover:bg-[#FE7743]/90'\n                  }`}\n                >\n                  {t('add_movie_modal.forward')} ({checkedEpisodes.size})\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n        {actionSheetOpen && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 flex flex-col items-center w-[90vw] max-w-[350px]\">\n              <span className=\"text-black font-poppins text-base mb-4\">{t('add_movie_modal.improve_comment_question')}</span>\n              <div className=\"bg-[#F3F2EF] rounded p-2 text-xs text-gray-700 mb-4 w-full max-h-[120px] overflow-y-auto\">{pendingImproved}</div>\n              <div className=\"flex gap-4\">\n                <button className=\"px-4 py-1 rounded bg-[#FE7743] text-white font-poppins\" onClick={() => { setComment(pendingImproved); setActionSheetOpen(false); setPendingImproved(''); }}>{t('add_movie_modal.yes')}</button>\n                <button className=\"px-4 py-1 rounded bg-gray-300 text-black font-poppins\" onClick={() => { setActionSheetOpen(false); setPendingImproved(''); }}>{t('add_movie_modal.no')}</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Cast Selection Modal */}\n      {tmdbId && tmdbId > 0 && (\n        <CastSelectionModal\n          open={showCastSelection}\n          onClose={() => {\n            setShowCastSelection(false);\n          }}\n          movieId={tmdbId}\n          movieTitle={selectedItem?.title || selectedItem?.name || ''}\n          onCastSelect={handleCastSelect}\n        />\n      )}\n\n      {/* Cast Chat Modal */}\n      {selectedCastMember && (\n        <CastChatModal\n          open={showCastChat}\n          onClose={() => {\n            setShowCastChat(false);\n            setSelectedCastMember(null);\n            // Chat kapandƒ±ƒüƒ±nda ana modal'ƒ± da kapat\n            onSave();\n          }}\n          castMember={selectedCastMember}\n          movieTitle={selectedItem?.title || selectedItem?.name || ''}\n          onSendMessage={handleSendMessage}\n        />\n      )}\n    </>\n  );\n};\n\nexport default AddButtonModal; ","usedDeprecatedRules":[]}]
