[{"filePath":"/workspaces/moviloi/src/pages/lists.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":592,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23449,23452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23449,23452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":593,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23538,23541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23538,23541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":593,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23564,23567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23564,23567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":594,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23612,23615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23612,23615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":598,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":598,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23762,23765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23762,23765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":609,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24165,24168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24165,24168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":632,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24859,24862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24859,24862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'filmData' and 't'. Either include them or remove the dependency array.","line":644,"column":6,"nodeType":"ArrayExpression","endLine":644,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [filmData, t]","fix":{"range":[25154,25156],"text":"[filmData, t]"}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { IonContent, IonPage } from '@ionic/react';\nimport { useTranslation } from 'react-i18next';\nimport TopHeaderBar from '../components/TopHeaderBar';\nimport BottomNavBar from '../components/BottomNavBar';\nimport MovieDetailModal from '../components/MovieDetailModal';\nimport SkeletonLoader from '../components/SkeletonLoader';\nimport { searchMovies } from '../services/tmdb';\nimport styles from './lists.module.css';\n\n// Film listesi verileri\nconst getFilmListeleri = (t: any) => ({\n  \"filmListeleri\": [\n    {\n      \"listeAdi\": t('lists.film_lists.imdb_top_10.title'),\n      \"aciklama\": t('lists.film_lists.imdb_top_10.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"The Shawshank Redemption\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Frank Darabont\",\n          \"imdbPuani\": 9.3,\n          \"kisaAciklama\": \"Umut, dostluk ve hayatta kalma üzerine zamansız bir başyapıt.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"The Godfather\",\n          \"yil\": 1972,\n          \"yonetmen\": \"Francis Ford Coppola\",\n          \"imdbPuani\": 9.2,\n          \"kisaAciklama\": \"Bir suç ailesinin epik öyküsü ve sinema tarihinin en etkili gangster filmi.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"The Dark Knight\",\n          \"yil\": 2008,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 9.0,\n          \"kisaAciklama\": \"Süper kahraman türünü yeniden tanımlayan, anarşi ve düzen üzerine karanlık bir masal.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"12 Angry Men\",\n          \"yil\": 1957,\n          \"yonetmen\": \"Sidney Lumet\",\n          \"imdbPuani\": 9.0,\n          \"kisaAciklama\": \"Tek bir odada geçen, adalet ve önyargı kavramlarını sorgulatan bir mahkeme draması.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Schindler's List\",\n          \"yil\": 1993,\n          \"yonetmen\": \"Steven Spielberg\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"İnsanlığın en karanlık anlarında bile iyiliğin nasıl parlayabildiğini gösteren dokunaklı bir yapım.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"The Lord of the Rings: The Return of the King\",\n          \"yil\": 2003,\n          \"yonetmen\": \"Peter Jackson\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"Bir fantastik destanın görkemli ve tatmin edici finali.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Pulp Fiction\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Quentin Tarantino\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"Doğrusal olmayan anlatımı ve unutulmaz diyaloglarıyla modern sinemayı etkileyen bir kült film.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Forrest Gump\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Robert Zemeckis\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"20. yüzyıl Amerikan tarihine saf bir kalple tanıklık eden bir adamın hayat yolculuğu.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Fight Club\",\n          \"yil\": 1999,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"Tüketim kültürüne ve modern insanın yabancılaşmasına sert bir eleştiri.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Inception\",\n          \"yil\": 2010,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"Rüyaların katmanlı dünyasında geçen, akıl almaz bir soygun hikayesi.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.oscar_winners.title'),\n      \"aciklama\": t('lists.film_lists.oscar_winners.description'),\n      \"filmSayisi\": 11,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Oppenheimer\",\n          \"yil\": 2023,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"Atom bombasının yaratıcısı J. Robert Oppenheimer'ın hayatını anlatan epik biyografik drama.\",\n          \"kazandigiYil\": 2024\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Everything Everywhere All at Once\",\n          \"yil\": 2022,\n          \"yonetmen\": \"Daniel Kwan, Daniel Scheinert\",\n          \"imdbPuani\": 7.8,\n          \"kisaAciklama\": \"Çoklu evrenler arasında geçen, aile bağlarını konu alan bilim kurgu komedi-drama.\",\n          \"kazandigiYil\": 2023\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"CODA\",\n          \"yil\": 2021,\n          \"yonetmen\": \"Sian Heder\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Sağır bir ailenin tek duyabilen üyesi olan genç bir kızın müzik tutkusunu anlatan drama.\",\n          \"kazandigiYil\": 2022\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Nomadland\",\n          \"yil\": 2020,\n          \"yonetmen\": \"Chloé Zhao\",\n          \"imdbPuani\": 7.4,\n          \"kisaAciklama\": \"Amerika'nın batısında göçebe yaşam süren bir kadının hikayesini anlatan drama.\",\n          \"kazandigiYil\": 2021\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Parasite\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Bong Joon-ho\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"Sosyal sınıflar arasındaki uçurumu konu alan, sürpriz dönüşlerle dolu Kore filmi.\",\n          \"kazandigiYil\": 2020\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"Green Book\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Peter Farrelly\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"1960'larda ırkçılığın hüküm sürdüğü Amerika'da gelişen dostluk hikayesi.\",\n          \"kazandigiYil\": 2019\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"The Shape of Water\",\n          \"yil\": 2017,\n          \"yonetmen\": \"Guillermo del Toro\",\n          \"imdbPuani\": 7.3,\n          \"kisaAciklama\": \"Soğuk Savaş döneminde geçen, insan ve yaratık arasında gelişen aşk hikayesi.\",\n          \"kazandigiYil\": 2018\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Moonlight\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Barry Jenkins\",\n          \"imdbPuani\": 7.4,\n          \"kisaAciklama\": \"Afro-Amerikan bir gencin kimlik arayışını anlatan üç bölümlük drama.\",\n          \"kazandigiYil\": 2017\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Spotlight\",\n          \"yil\": 2015,\n          \"yonetmen\": \"Tom McCarthy\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Boston Globe gazetesinin Katolik Kilisesi'ndeki cinsel istismar skandalını ortaya çıkarma süreci.\",\n          \"kazandigiYil\": 2016\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Birdman\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Alejandro G. Iñárritu\",\n          \"imdbPuani\": 7.7,\n          \"kisaAciklama\": \"Bir zamanların süper kahraman oyuncusunun Broadway'de yeniden doğuş mücadelesi.\",\n          \"kazandigiYil\": 2015\n        },\n        {\n          \"sira\": 11,\n          \"filmAdi\": \"12 Years a Slave\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Steve McQueen\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Özgür bir adamın köleleştirilmesi ve 12 yıl sonra özgürlüğüne kavuşma hikayesi.\",\n          \"kazandigiYil\": 2014\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.mind_bending_scifi.title'),\n      \"aciklama\": t('lists.film_lists.mind_bending_scifi.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Arrival\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"Dilbilimin ve zaman algısının sınırlarını zorlayan, duygusal ve zeki bir ilk temas hikayesi.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Blade Runner 2049\",\n          \"yil\": 2017,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Orijinal filmin mirasını taşıyan, görsel olarak büyüleyici bir neo-noir ve varoluşsal bir sorgulama.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"Interstellar\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.6,\n          \"kisaAciklama\": \"İnsanlığın geleceği için uzayın derinliklerine yapılan, bilim ve sevgi dolu bir yolculuk.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Ex Machina\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Alex Garland\",\n          \"imdbPuani\": 7.7,\n          \"kisaAciklama\": \"Yapay zekanın bilinç ve manipülasyon yeteneklerini sorgulatan klostrofobik bir gerilim.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Her\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Spike Jonze\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Yalnız bir adamın bir işletim sistemine aşık olmasını anlatan, teknoloji ve ilişkilere dair melankolik bir bakış.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"District 9\",\n          \"yil\": 2009,\n          \"yonetmen\": \"Neill Blomkamp\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"Apartheid ve yabancı düşmanlığına dair güçlü bir alegori sunan, belgesel tarzında bir bilim kurgu.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Children of Men\",\n          \"yil\": 2006,\n          \"yonetmen\": \"Alfonso Cuarón\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"İnsanlığın soyunun tükendiği bir dünyada, umudun peşindeki nefes kesen bir kaçış öyküsü.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Dune: Part One & Two\",\n          \"yil\": \"2021 & 2024\",\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Frank Herbert'in kült romanından uyarlanan, epik ölçekte ve görsel olarak baş döndürücü bir destan.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Source Code\",\n          \"yil\": 2011,\n          \"yonetmen\": \"Duncan Jones\",\n          \"imdbPuani\": 7.5,\n          \"kisaAciklama\": \"Bir askerin, bir tren patlamasını önlemek için sürekli olarak 8 dakikayı yeniden yaşadığı tempolu bir gerilim.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Annihilation\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Alex Garland\",\n          \"imdbPuani\": 6.8,\n          \"kisaAciklama\": \"Gizemli bir bölgeye giren bir grup bilim insanının karşılaştığı, hem güzel hem de korkutucu olaylar.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.psychological_thrillers.title'),\n      \"aciklama\": t('lists.film_lists.psychological_thrillers.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"The Prestige\",\n          \"yil\": 2006,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"İki sihirbazın takıntıya dönüşen rekabetini anlatan, zekice kurgulanmış bir hikaye.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Shutter Island\",\n          \"yil\": 2010,\n          \"yonetmen\": \"Martin Scorsese\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"Bir akıl hastanesindeki kayıp vakasını araştıran dedektifin giderek kendi akıl sağlığını sorgulaması.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"The Sixth Sense\",\n          \"yil\": 1999,\n          \"yonetmen\": \"M. Night Shyamalan\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"Sinema tarihinin en ikonik finaline sahip, ölüleri gören bir çocuk ve psikoloğunun hikayesi.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Oldeuboi (Oldboy)\",\n          \"yil\": 2003,\n          \"yonetmen\": \"Park Chan-wook\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"15 yıl sebepsizce hapsedilen bir adamın intikam arayışını anlatan, şok edici ve stilize bir film.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"The Usual Suspects\",\n          \"yil\": 1995,\n          \"yonetmen\": \"Bryan Singer\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"Polise ifade veren bir dolandırıcının anlattığı karmaşık soygun hikayesi ve efsanevi finali.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"Memento\",\n          \"yil\": 2000,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"Kısa süreli hafıza kaybı yaşayan bir adamın, karısının katilini bulma çabasını tersten anlatan bir yapım.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Gone Girl\",\n          \"yil\": 2014,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Karısı aniden ortadan kaybolan bir adamın, medyanın ve polisin hedefi haline gelmesini konu alan bir gerilim.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Prisoners\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Kızı kaçırılan bir babanın, adaleti kendi sağlamaya çalışmasını anlatan karanlık ve sürükleyici bir film.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Se7en\",\n          \"yil\": 1995,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.6,\n          \"kisaAciklama\": \"Yedi ölümcül günahı temel alan bir dizi cinayeti araştıran iki dedektifin kasvetli hikayesi.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"The Handmaiden\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Park Chan-wook\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Japon işgali altındaki Kore'de geçen, aldatma ve tutku dolu, katmanlı bir intikam öyküsü.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.tarantino_filmography.title'),\n      \"aciklama\": t('lists.film_lists.tarantino_filmography.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Pulp Fiction\", \"yil\": 1994 },\n        { \"sira\": 2, \"filmAdi\": \"Reservoir Dogs\", \"yil\": 1992 },\n        { \"sira\": 3, \"filmAdi\": \"Inglourious Basterds\", \"yil\": 2009 },\n        { \"sira\": 4, \"filmAdi\": \"Django Unchained\", \"yil\": 2012 },\n        { \"sira\": 5, \"filmAdi\": \"Kill Bill: Vol. 1\", \"yil\": 2003 },\n        { \"sira\": 6, \"filmAdi\": \"Once Upon a Time in Hollywood\", \"yil\": 2019 },\n        { \"sira\": 7, \"filmAdi\": \"The Hateful Eight\", \"yil\": 2015 },\n        { \"sira\": 8, \"filmAdi\": \"Jackie Brown\", \"yil\": 1997 },\n        { \"sira\": 9, \"filmAdi\": \"Kill Bill: Vol. 2\", \"yil\": 2004 },\n        { \"sira\": 10, \"filmAdi\": \"Death Proof\", \"yil\": 2007 }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.adult_animation.title'),\n      \"aciklama\": t('lists.film_lists.adult_animation.description'),\n      \"filmSayisi\": 11,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Spirited Away\",\n          \"yil\": 2001,\n          \"yonetmen\": \"Hayao Miyazaki\",\n          \"kisaAciklama\": \"Ruhların dünyasında kaybolan bir kızın büyüme hikayesini anlatan, Oscar ödüllü bir fantezi.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Spider-Man: Into the Spider-Verse\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Bob Persichetti, Peter Ramsey, Rodney Rothman\",\n          \"kisaAciklama\": \"Çizgi roman estetiğini sinemaya taşıyan, görsel olarak devrim niteliğinde bir süper kahraman filmi.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"Grave of the Fireflies\",\n          \"yil\": 1988,\n          \"yonetmen\": \"Isao Takahata\",\n          \"kisaAciklama\": \"2. Dünya Savaşı'nın sonlarında hayatta kalmaya çalışan iki kardeşin yürek burkan dramı.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Princess Mononoke\",\n          \"yil\": 1997,\n          \"yonetmen\": \"Hayao Miyazaki\",\n          \"kisaAciklama\": \"Doğa ve insanlık arasındaki savaşı konu alan, epik ve karmaşık bir macera.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Persepolis\",\n          \"yil\": 2007,\n          \"yonetmen\": \"Marjane Satrapi, Vincent Paronnaud\",\n          \"kisaAciklama\": \"İran İslam Devrimi sırasında büyüyen bir kızın otobiyografik hikayesini anlatan dokunaklı bir yapım.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"WALL-E\",\n          \"yil\": 2008,\n          \"yonetmen\": \"Andrew Stanton\",\n          \"kisaAciklama\": \"Diyalogsuz ilk yarısıyla sinema dersi veren, çevre bilinci ve aşk üzerine bir Pixar klasiği.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Akira\",\n          \"yil\": 1988,\n          \"yonetmen\": \"Katsuhiro Otomo\",\n          \"kisaAciklama\": \"Siberpunk türünün temel taşlarından olan, distopik bir gelecekte geçen bir aksiyon ve gizem filmi.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Perfect Blue\",\n          \"yil\": 1997,\n          \"yonetmen\": \"Satoshi Kon\",\n          \"kisaAciklama\": \"Şöhret, kimlik ve gerçeklik algısının kayboluşunu anlatan gerilim dolu bir psikolojik anime.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Klaus\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Sergio Pablos\",\n          \"kisaAciklama\": \"Noel Baba efsanesine taze ve sıcak bir başlangıç hikayesi sunan, el çizimi estetiğiyle büyüleyen bir film.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"I Lost My Body\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Jérémy Clapin\",\n          \"kisaAciklama\": \"Sahibini arayan kesik bir elin Paris'teki yolculuğunu anlatan, özgün ve melankolik bir Fransız animasyonu.\"\n        },\n        {\n          \"sira\": 11,\n          \"filmAdi\": \"Your Name.\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Makoto Shinkai\",\n          \"kisaAciklama\": \"Bedenleri yer değiştiren iki gencin kader ve zamanla iç içe geçen romantik hikayesi.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.world_cinema.title'),\n      \"aciklama\": t('lists.film_lists.world_cinema.description'),\n      \"filmSayisi\": 12,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Parasite\", \"yil\": 2019, \"ulke\": \"Güney Kore\" },\n        { \"sira\": 2, \"filmAdi\": \"Cidade de Deus (City of God)\", \"yil\": 2002, \"ulke\": \"Brezilya\" },\n        { \"sira\": 3, \"filmAdi\": \"La vita è bella (Life Is Beautiful)\", \"yil\": 1997, \"ulke\": \"İtalya\" },\n        { \"sira\": 4, \"filmAdi\": \"Le Fabuleux Destin d'Amélie Poulain (Amélie)\", \"yil\": 2001, \"ulke\": \"Fransa\" },\n        { \"sira\": 5, \"filmAdi\": \"Das Leben der Anderen (The Lives of Others)\", \"yil\": 2006, \"ulke\": \"Almanya\" },\n        { \"sira\": 6, \"filmAdi\": \"Jodaeiye Nader az Simin (A Separation)\", \"yil\": 2011, \"ulke\": \"İran\" },\n        { \"sira\": 7, \"filmAdi\": \"El secreto de sus ojos (The Secret in Their Eyes)\", \"yil\": 2009, \"ulke\": \"Arjantin\" },\n        { \"sira\": 8, \"filmAdi\": \"Crouching Tiger, Hidden Dragon\", \"yil\": 2000, \"ulke\": \"Tayvan\" },\n        { \"sira\": 9, \"filmAdi\": \"Roma\", \"yil\": 2018, \"ulke\": \"Meksika\" },\n        { \"sira\": 10, \"filmAdi\": \"Jagten (The Hunt)\", \"yil\": 2012, \"ulke\": \"Danimarka\" },\n        { \"sira\": 11, \"filmAdi\": \"Yip Man (Ip Man)\", \"yil\": 2008, \"ulke\": \"Hong Kong\" },\n        { \"sira\": 12, \"filmAdi\": \"Kış Uykusu\", \"yil\": 2014, \"ulke\": \"Türkiye\" }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.coen_brothers.title'),\n      \"aciklama\": t('lists.film_lists.coen_brothers.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"No Country for Old Men\", \"yil\": 2007 },\n        { \"sira\": 2, \"filmAdi\": \"Fargo\", \"yil\": 1996 },\n        { \"sira\": 3, \"filmAdi\": \"The Big Lebowski\", \"yil\": 1998 },\n        { \"sira\": 4, \"filmAdi\": \"O Brother, Where Art Thou?\", \"yil\": 2000 },\n        { \"sira\": 5, \"filmAdi\": \"A Serious Man\", \"yil\": 2009 },\n        { \"sira\": 6, \"filmAdi\": \"Inside Llewyn Davis\", \"yil\": 2013 },\n        { \"sira\": 7, \"filmAdi\": \"Miller's Crossing\", \"yil\": 1990 },\n        { \"sira\": 8, \"filmAdi\": \"Barton Fink\", \"yil\": 1991 },\n        { \"sira\": 9, \"filmAdi\": \"True Grit\", \"yil\": 2010 },\n        { \"sira\": 10, \"filmAdi\": \"Raising Arizona\", \"yil\": 1987 }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.modern_comedy.title'),\n      \"aciklama\": t('lists.film_lists.modern_comedy.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"The Grand Budapest Hotel\", \"yil\": 2014, \"yonetmen\": \"Wes Anderson\" },\n        { \"sira\": 2, \"filmAdi\": \"What We Do in the Shadows\", \"yil\": 2014, \"yonetmen\": \"Jemaine Clement, Taika Waititi\" },\n        { \"sira\": 3, \"filmAdi\": \"Little Miss Sunshine\", \"yil\": 2006, \"yonetmen\": \"Jonathan Dayton, Valerie Faris\" },\n        { \"sira\": 4, \"filmAdi\": \"Superbad\", \"yil\": 2007, \"yonetmen\": \"Greg Mottola\" },\n        { \"sira\": 5, \"filmAdi\": \"Shaun of the Dead\", \"yil\": 2004, \"yonetmen\": \"Edgar Wright\" },\n        { \"sira\": 6, \"filmAdi\": \"Borat\", \"yil\": 2006, \"yonetmen\": \"Larry Charles\" },\n        { \"sira\": 7, \"filmAdi\": \"The Death of Stalin\", \"yil\": 2017, \"yonetmen\": \"Armando Iannucci\" },\n        { \"sira\": 8, \"filmAdi\": \"Booksmart\", \"yil\": 2019, \"yonetmen\": \"Olivia Wilde\" },\n        { \"sira\": 9, \"filmAdi\": \"Palm Springs\", \"yil\": 2020, \"yonetmen\": \"Max Barbakow\" },\n        { \"sira\": 10, \"filmAdi\": \"Toni Erdmann\", \"yil\": 2016, \"yonetmen\": \"Maren Ade\" }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.epic_historical.title'),\n      \"aciklama\": t('lists.film_lists.epic_historical.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Gladiator\", \"yil\": 2000, \"yonetmen\": \"Ridley Scott\" },\n        { \"sira\": 2, \"filmAdi\": \"Schindler's List\", \"yil\": 1993, \"yonetmen\": \"Steven Spielberg\" },\n        { \"sira\": 3, \"filmAdi\": \"Braveheart\", \"yil\": 1995, \"yonetmen\": \"Mel Gibson\" },\n        { \"sira\": 4, \"filmAdi\": \"Lawrence of Arabia\", \"yil\": 1962, \"yonetmen\": \"David Lean\" },\n        { \"sira\": 5, \"filmAdi\": \"The Last of the Mohicans\", \"yil\": 1992, \"yonetmen\": \"Michael Mann\" },\n        { \"sira\": 6, \"filmAdi\": \"Master and Commander: The Far Side of the World\", \"yil\": 2003, \"yonetmen\": \"Peter Weir\" },\n        { \"sira\": 7, \"filmAdi\": \"Kingdom of Heaven (Director's Cut)\", \"yil\": 2005, \"yonetmen\": \"Ridley Scott\" },\n        { \"sira\": 8, \"filmAdi\": \"Downfall (Der Untergang)\", \"yil\": 2004, \"yonetmen\": \"Oliver Hirschbiegel\" },\n        { \"sira\": 9, \"filmAdi\": \"1917\", \"yil\": 2019, \"yonetmen\": \"Sam Mendes\" },\n        { \"sira\": 10, \"filmAdi\": \"The Pianist\", \"yil\": 2002, \"yonetmen\": \"Roman Polanski\" }\n      ]\n    }\n  ]\n});\n\ninterface Film {\n  sira: number;\n  filmAdi: string;\n  yil: number | string;\n  yonetmen?: string;\n  imdbPuani?: number;\n  kisaAciklama?: string;\n  kazandigiYil?: number;\n  ulke?: string;\n  tmdbId?: number;\n  posterPath?: string;\n}\n\ninterface Liste {\n  listeAdi: string;\n  aciklama: string;\n  filmSayisi: number;\n  filmler: Film[];\n}\n\nconst Lists: React.FC = () => {\n  const { t } = useTranslation();\n  const [selectedListe, setSelectedListe] = useState<Liste | null>(null);\n  const [showListeDetail, setShowListeDetail] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState<number | null>(null);\n  const [showMovieDetail, setShowMovieDetail] = useState(false);\n  const [filmData, setFilmData] = useState<Map<string, { id: number; posterPath?: string }>>(new Map());\n  const [loadingPoster, setLoadingPoster] = useState<{ [key: string]: boolean }>({});\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n\n  // Sayfa yüklendiğinde tüm listelerin poster verilerini yükle (OPTIMIZED)\n  useEffect(() => {\n    const loadAllPosters = async () => {\n      setIsInitialLoading(true);\n      const newFilmData = new Map(filmData);\n      \n      // Tüm filmleri topla\n      const allFilms = (getFilmListeleri(t).filmListeleri as any[]).flatMap(liste => liste.filmler);\n      const uniqueFilms = allFilms.filter((film: any, index: number, self: any[]) => \n        index === self.findIndex((f: any) => f.filmAdi === film.filmAdi)\n      );\n      \n      // Cache'de olmayan filmleri filtrele\n      const uncachedFilms = uniqueFilms.filter((film: any) => !newFilmData.has(film.filmAdi));\n      \n      if (uncachedFilms.length === 0) {\n        console.log('All films already cached on initial load');\n        setIsInitialLoading(false);\n        return;\n      }\n\n      console.log(`Initial loading: ${uncachedFilms.length} unique films in parallel...`);\n      \n      // Paralel API çağrıları\n      const searchPromises = uncachedFilms.map(async (film: any) => {\n        try {\n          const searchResults = await searchMovies(film.filmAdi);\n          if (searchResults.length > 0) {\n            const firstResult = searchResults[0];\n            return {\n              filmAdi: film.filmAdi,\n              data: {\n                id: firstResult.id,\n                posterPath: firstResult.poster_path\n              }\n            };\n          }\n        } catch (error) {\n          console.error(`Error finding movie ID for ${film.filmAdi}:`, error);\n        }\n        return null;\n      });\n\n      // Tüm sonuçları bekle\n      const results = await Promise.all(searchPromises);\n      \n      // Sonuçları Map'e ekle\n      results.forEach((result: any) => {\n        if (result) {\n          newFilmData.set(result.filmAdi, result.data);\n        }\n      });\n      \n      setFilmData(newFilmData);\n      setIsInitialLoading(false);\n      console.log(`Initial load completed: ${newFilmData.size} films cached`);\n    };\n\n    loadAllPosters();\n  }, []);\n\n  // Film adlarından TMDB ID'lerini bul (PARALEL)\n  const findMovieIds = async (liste: Liste) => {\n    const newFilmData = new Map(filmData);\n    \n    // Sadece cache'de olmayan filmleri filtrele\n    const uncachedFilms = liste.filmler.filter(film => !newFilmData.has(film.filmAdi));\n    \n    if (uncachedFilms.length === 0) {\n      console.log('All films already cached');\n      return;\n    }\n\n    console.log(`Loading ${uncachedFilms.length} films in parallel...`);\n    \n    // Paralel API çağrıları\n    const searchPromises = uncachedFilms.map(async (film) => {\n      try {\n        const searchResults = await searchMovies(film.filmAdi);\n        if (searchResults.length > 0) {\n          const firstResult = searchResults[0];\n          return {\n            filmAdi: film.filmAdi,\n            data: {\n              id: firstResult.id,\n              posterPath: firstResult.poster_path\n            }\n          };\n        }\n      } catch (error) {\n        console.error(`Error finding movie ID for ${film.filmAdi}:`, error);\n      }\n      return null;\n    });\n\n    // Tüm sonuçları bekle\n    const results = await Promise.all(searchPromises);\n    \n    // Sonuçları Map'e ekle\n    results.forEach(result => {\n      if (result) {\n        newFilmData.set(result.filmAdi, result.data);\n      }\n    });\n    \n    setFilmData(newFilmData);\n    console.log(`Loaded ${results.filter(r => r !== null).length} films successfully`);\n  };\n\n  // Poster yüklenince skeleton'u kaldır\n  const handlePosterLoad = (filmAdi: string) => {\n    setLoadingPoster((prev) => ({ ...prev, [filmAdi]: false }));\n  };\n\n  // Liste kartı için poster seç\n  const getListePoster = (liste: Liste) => {\n    if (liste.filmler.length === 0) return null;\n    \n    // İlk filmden poster al\n    const firstFilm = liste.filmler[0];\n    const movieData = filmData.get(firstFilm.filmAdi);\n    return movieData?.posterPath;\n  };\n\n  // Liste açıldığında loadingPoster'ı true yap\n  const handleListeClick = async (liste: Liste) => {\n    setSelectedListe(liste);\n    setShowListeDetail(true);\n    // Film ID'lerini bul\n    await findMovieIds(liste);\n    // Skeleton başlat\n    const loadingMap: { [key: string]: boolean } = {};\n    liste.filmler.forEach(film => {\n      loadingMap[film.filmAdi] = true;\n    });\n    setLoadingPoster(loadingMap);\n  };\n\n  const handleCloseListeDetail = () => {\n    setShowListeDetail(false);\n    setSelectedListe(null);\n  };\n\n  const handleMovieClick = (filmAdi: string) => {\n    const movieData = filmData.get(filmAdi);\n    if (movieData) {\n      setSelectedMovieId(movieData.id);\n      setShowMovieDetail(true);\n    }\n  };\n\n  const handleCloseMovieModal = () => {\n    setShowMovieDetail(false);\n    setSelectedMovieId(null);\n  };\n\n  return (\n    <IonPage className={styles.listsPage}>\n      <IonContent className={styles.listsContent} scrollEvents={true}>\n        <TopHeaderBar title={t('lists.moviloi_lists')} />\n        {/* Ana Liste Görünümü */}\n        {!showListeDetail ? (\n          <div className=\"p-4 pb-24\">\n            \n            {isInitialLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }, (_, index) => (\n                  <div key={index} className=\"bg-gray-800 rounded-xl overflow-hidden\">\n                    {/* Poster Skeleton */}\n                    <div className=\"h-48 bg-gray-700 animate-pulse\"></div>\n                    {/* Content Skeleton */}\n                    <div className=\"p-4 bg-gray-800 space-y-2\">\n                      <SkeletonLoader type=\"text\" width=\"w-3/4\" height=\"h-6\" />\n                      <SkeletonLoader type=\"text\" width=\"w-full\" height=\"h-4\" />\n                      <SkeletonLoader type=\"text\" width=\"w-2/3\" height=\"h-4\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {(getFilmListeleri(t).filmListeleri as Liste[]).map((liste: Liste, index: number) => {\n                  const posterPath = getListePoster(liste);\n                  return (\n                    <div\n                      key={index}\n                      className=\"bg-gray-800 rounded-xl overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\"\n                      onClick={() => handleListeClick(liste)}\n                    >\n                      {/* Poster Alanı */}\n                      <div className=\"h-48 bg-gray-700 relative\">\n                        {posterPath ? (\n                          <img\n                            src={`https://image.tmdb.org/t/p/w500${posterPath}`}\n                            alt={liste.listeAdi}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center\">\n                            <span className=\"text-white text-lg font-bold text-center px-4\">{liste.listeAdi}</span>\n                          </div>\n                        )}\n                        \n                        {/* Film Sayısı Badge */}\n                        <div className=\"absolute top-3 right-3 bg-[#FE7743] text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg\">\n                          {t('lists.movie_count', { count: liste.filmSayisi })}\n                        </div>\n                      </div>\n                      \n                      {/* Liste Bilgileri */}\n                      <div className=\"p-4 bg-gray-800\">\n                        <h3 className=\"text-white font-bold text-lg font-poppins mb-2\">{liste.listeAdi}</h3>\n                        <p className=\"text-[#EFEEEA] text-sm font-poppins\">{liste.aciklama}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        ) : (\n          /* Liste Detay Görünümü */\n          <div className=\"p-4 pb-24\">\n            <div className=\"flex items-center mb-6\">\n              <button\n                onClick={handleCloseListeDetail}\n                className=\"mr-4 p-2 text-white\"\n              >\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M19 12H5M12 19L5 12L12 5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                </svg>\n              </button>\n              <h1 className=\"text-white font-bold text-xl font-poppins\">{selectedListe?.listeAdi}</h1>\n            </div>\n            \n            <p className=\"text-[#EFEEEA] text-sm mb-6 font-poppins\">{selectedListe?.aciklama}</p>\n            \n            <div className=\"grid grid-cols-3 gap-3\">\n              {selectedListe?.filmler.map((film, index) => {\n                const movieData = filmData.get(film.filmAdi);\n                const isLoading = loadingPoster[film.filmAdi];\n                return (\n                  <div\n                    key={index}\n                    className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n                    onClick={() => handleMovieClick(film.filmAdi)}\n                  >\n                    <div className=\"aspect-[2/3] bg-gray-800 rounded-lg overflow-hidden mb-2\">\n                      {movieData?.posterPath ? (\n                        <>\n                          {isLoading && (\n                            <div className=\"w-full h-full bg-gray-700 animate-pulse\" />\n                          )}\n                          <img\n                            src={`https://image.tmdb.org/t/p/w500${movieData.posterPath}`}\n                            alt={film.filmAdi}\n                            className={`w-full h-full object-cover ${isLoading ? 'hidden' : ''}`}\n                            onLoad={() => handlePosterLoad(film.filmAdi)}\n                          />\n                        </>\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center\">\n                          <span className=\"text-white text-sm font-bold text-center px-2\">{film.filmAdi}</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-white text-xs font-medium font-poppins\">{film.filmAdi}</p>\n                      <p className=\"text-[#FE7743] text-xs font-poppins\">{film.yil}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Bottom Navigation */}\n        <BottomNavBar className=\"rounded-t-[24px]\" />\n\n        {/* Movie Detail Modal */}\n        <MovieDetailModal\n          open={showMovieDetail}\n          onClose={handleCloseMovieModal}\n          movieId={selectedMovieId}\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Lists; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/tmdb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
