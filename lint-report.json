[{"filePath":"/workspaces/moviloi/src/components/AiDiscoveryModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onMovieSelect' is defined but never used.","line":13,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":90}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { IonTextarea, IonModal } from '@ionic/react';\nimport { useTranslation } from 'react-i18next';\nimport { getMovieSuggestions, MovieSuggestion } from '../services/geminiService';\nimport { useModal } from '../context/ModalContext';\n\ninterface AiDiscoveryModalProps {\n  open: boolean;\n  onClose: () => void;\n  onMovieSelect?: (movie: MovieSuggestion) => void;\n}\n\nconst AiDiscoveryModal: React.FC<AiDiscoveryModalProps> = ({ open, onClose, onMovieSelect }) => {\n  const { t } = useTranslation();\n  const { openModal } = useModal();\n  const [description, setDescription] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [suggestedMovies, setSuggestedMovies] = useState<MovieSuggestion[]>([]);\n  const [retryCount, setRetryCount] = useState(0);\n  const [excludedMovies, setExcludedMovies] = useState<MovieSuggestion[]>([]);\n  const MAX_RETRIES = 2; // İlk deneme hariç 2 yeniden deneme hakkı\n\n  const handleFindMovies = async () => {\n    if (!description.trim()) return;\n\n    setIsLoading(true);\n    setRetryCount(0); // Sayacı sıfırla\n    setExcludedMovies([]); // Dışlama listesini temizle\n\n    try {\n      console.log('Film aranıyor:', description);\n      const movieSuggestions = await getMovieSuggestions(description.trim());\n      \n      // Film önerilerini state'e kaydet\n      setSuggestedMovies(movieSuggestions);\n      setExcludedMovies(movieSuggestions); // Gelen ilk filmleri dışlama listesine ekle\n      \n    } catch (error) {\n      console.error('Film önerisi alınırken hata oluştu:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTryAgain = async () => {\n    if (retryCount >= MAX_RETRIES) return; // Limite ulaşıldıysa işlemi durdur\n\n    setIsLoading(true);\n    setSuggestedMovies([]); // Mevcut filmleri temizle\n\n    try {\n      // API isteğini dışlanacak filmlerle birlikte gönder\n      const movieSuggestions = await getMovieSuggestions(description.trim(), excludedMovies);\n      setSuggestedMovies(movieSuggestions);\n      // Yeni gelen filmleri kümülatif listeye ekle\n      setExcludedMovies(prev => [...prev, ...movieSuggestions]);\n      setRetryCount(prev => prev + 1); // Sayacı artır\n    } catch (error) {\n      console.error('Film önerisi alınırken hata oluştu:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleMovieClick = (movie: MovieSuggestion) => {\n    openModal('movie', movie.tmdbId);\n  };\n\n  return (\n    <IonModal \n      isOpen={open} \n      onDidDismiss={onClose}\n      breakpoints={[0, 0.95]} \n      initialBreakpoint={0.95}\n      className=\"ai-discovery-modal\"\n      style={{\n        '--height': '95vh',\n        '--max-height': '95vh'\n      }}\n    >\n      <div className=\"w-full h-full bg-[#222] rounded-t-[54px] overflow-hidden\">\n        {/* Header Bar */}\n        <div className=\"flex items-center justify-center bg-background w-full h-[60px] p-4\">\n          <span className=\"text-h2 font-bold text-foreground\">\n            {t('ai.ai_film_discovery')}\n          </span>\n        </div>\n        \n        {/* Modal Content */}\n        <div className=\"px-4 pb-8 pt-6 overflow-y-auto h-full\">\n              {/* Açıklama Metni */}\n              <div className=\"text-center mb-3\">\n                <p className=\"text-[#CCC] font-poppins text-[14px] leading-relaxed\">\n                  {suggestedMovies.length === 0 \n                    ? t('ai.ai_description')\n                    : `${t('ai.ai_suggestions')} ${retryCount > 0 ? `(${t('ai.attempt')} ${retryCount}/${MAX_RETRIES})` : ''}`\n                  }\n                </p>\n              </div>\n\n              {/* Koşullu İçerik */}\n              {suggestedMovies.length === 0 ? (\n                /* Film önerisi alınmamışsa - Input ve butonları göster */\n                !isLoading ? (\n                  <>\n                    {/* Metin Alanı */}\n                    <div className=\"mb-8\">\n                      <span className=\"block text-[16px] font-semibold font-poppins text-[#F8F8FF] mb-3\">\n                        {t('ai.film_description')}\n                      </span>\n                      <div className=\"relative\">\n                        <IonTextarea\n                          value={description}\n                          onIonInput={(e) => setDescription(e.detail.value!)}\n                          placeholder={t('ai.film_description_placeholder')}\n                          rows={6}\n                          className=\"w-full min-h-[150px] max-h-[250px] rounded-[12px] bg-[#D9D9D9] p-3 pr-10 text-black text-[16px] font-poppins font-normal resize-none outline-none overflow-y-auto border-0\"\n                          fill=\"solid\"\n                          style={{ height: 'auto', maxHeight: 250, minHeight: 150 }}\n                          onInput={e => {\n                            const target = e.target as HTMLTextAreaElement;\n                            target.style.height = 'auto';\n                            target.style.height = Math.min(target.scrollHeight, 250) + 'px';\n                          }}\n                        />\n                        {/* X Butonu - Textarea içinde sağ alt köşe */}\n                        {description.length > 0 && (\n                          <button\n                            type=\"button\"\n                            className=\"absolute bottom-3 right-3 w-6 h-6 flex items-center justify-center bg-[#D9D9D9] text-black hover:bg-gray-300 transition-all duration-200\"\n                            onClick={() => setDescription('')}\n                            aria-label=\"Clear text\"\n                            style={{ \n                              zIndex: 9999,\n                              pointerEvents: 'auto'\n                            }}\n                          >\n                            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                              <path fillRule=\"evenodd\" d=\"M10 8.586l4.95-4.95a1 1 0 111.414 1.414L11.414 10l4.95 4.95a1 1 0 01-1.414 1.414L10 11.414l-4.95 4.95a1 1 0 01-1.414-1.414L8.586 10l-4.95-4.95A1 1 0 115.05 3.636L10 8.586z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </button>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Film Bul Butonu */}\n                    <div className=\"space-y-4\">\n                      <button\n                        onClick={handleFindMovies}\n                        disabled={!description.trim()}\n                        className={`w-full h-[48px] rounded-[12px] text-[16px] font-poppins font-semibold shadow-lg transition-all duration-200 ${\n                          !description.trim() \n                            ? 'bg-gray-400 text-gray-600 cursor-not-allowed' \n                            : 'bg-[#FE7743] text-[#F8F8FF] hover:bg-[#FE7743]/90 active:scale-95'\n                        }`}\n                      >\n                        <span className=\"flex items-center justify-center gap-2\">\n                          {t('ai.find_movies')}\n                        </span>\n                      </button>\n                    </div>\n                  </>\n                ) : (\n                  /* Loading durumu */\n                  <div className=\"flex flex-col items-center justify-center py-12 space-y-6\">\n                    <div className=\"relative\">\n                      <div className=\"w-16 h-16 border-4 border-[#333] border-t-[#FE7743] rounded-full animate-spin\"></div>\n                    </div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-[#F8F8FF] font-poppins font-semibold text-[18px]\">\n                        {t('ai.ai_working')}\n                      </p>\n                      <p className=\"text-[#CCC] font-poppins text-[14px]\">\n                        {t('ai.ai_searching')}\n                      </p>\n                    </div>\n                  </div>\n                )\n              ) : (\n                /* Film önerileri alınmışsa - Poster grid'ini göster */\n                <>\n                  {/* Film Posterleri Grid */}\n                  <div className=\"grid grid-cols-3 gap-2 mb-4\">\n                    {suggestedMovies.map((movie, index) => (\n                      <div\n                        key={`${movie.tmdbId}-${index}`}\n                        className=\"relative aspect-[2/3] rounded-[12px] overflow-hidden cursor-pointer hover:opacity-80 transition-all duration-200 bg-[#333] hover:scale-105 active:scale-95\"\n                        onClick={() => handleMovieClick(movie)}\n                      >\n                        <img\n                          src={movie.poster_path && movie.poster_path.startsWith('/') \n                            ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                            : 'https://placehold.co/200x300/374151/9CA3AF?text=No+Image'\n                          }\n                          alt={movie.title}\n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            // Poster yüklenemezse placeholder göster\n                            const target = e.target as HTMLImageElement;\n                            target.src = 'https://placehold.co/200x300/374151/9CA3AF?text=No+Image';\n                          }}\n                        />\n                        {/* Film başlığı overlay */}\n                        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent p-2\">\n                          <p className=\"text-white text-[11px] font-poppins font-semibold truncate leading-tight\">\n                            {movie.title}\n                          </p>\n                          <p className=\"text-[#CCC] text-[9px] mt-1\">\n                            {movie.year}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Yeniden Dene Butonu */}\n                  <div className=\"pb-4\">\n                    <button\n                      onClick={handleTryAgain}\n                      disabled={retryCount >= MAX_RETRIES || isLoading}\n                      className={`w-full h-[48px] rounded-[12px] text-[16px] font-poppins font-semibold transition-all duration-200 shadow-lg ${\n                        (retryCount >= MAX_RETRIES || isLoading) \n                          ? 'bg-gray-500 text-gray-300 cursor-not-allowed' \n                          : 'bg-[#FE7743] text-[#F8F8FF] hover:bg-[#FE7743]/90 active:scale-95'\n                      }`}\n                    >\n                      {isLoading \n                        ? t('ai.thinking')\n                        : (retryCount >= MAX_RETRIES \n                            ? `${t('ai.all_attempts_used')} (${retryCount}/${MAX_RETRIES})` \n                            : `${t('ai.try_again')} (${retryCount}/${MAX_RETRIES})`\n                          )\n                      }\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </IonModal>\n  );\n};\n\nexport default AiDiscoveryModal;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/CastChatModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":88,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TMDBCastMember } from '../services/tmdb';\n\ninterface ChatMessage {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\ninterface CastChatModalProps {\n  open: boolean;\n  onClose: () => void;\n  castMember: TMDBCastMember;\n  movieTitle: string;\n  onSendMessage: (message: string) => Promise<string>;\n}\n\nconst CastChatModal: React.FC<CastChatModalProps> = ({\n  open,\n  onClose,\n  castMember,\n  movieTitle,\n  onSendMessage\n}) => {\n  const { t, i18n } = useTranslation();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Welcome message when chat opens\n  useEffect(() => {\n    if (open && messages.length === 0) {\n      const currentLanguage = i18n.language || 'tr';\n      let welcomeText = '';\n      \n      switch (currentLanguage) {\n        case 'tr':\n          welcomeText = `Merhaba! Ben ${castMember.name}, \"${movieTitle}\" filminde ${castMember.character} karakterini canlandırıyorum. Film veya karakterim hakkında ne öğrenmek istersin?`;\n          break;\n        case 'es':\n          welcomeText = `¡Hola! Soy ${castMember.name}, interpretando a ${castMember.character} en \"${movieTitle}\". ¿Qué te gustaría saber sobre la película o mi personaje?`;\n          break;\n        default:\n          welcomeText = `Hi! I'm ${castMember.name}, playing ${castMember.character} in \"${movieTitle}\". What would you like to know about the movie or my character?`;\n      }\n      \n      const welcomeMessage: ChatMessage = {\n        id: 'welcome',\n        text: welcomeText,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [open, castMember, movieTitle, messages.length, i18n.language]);\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      text: inputMessage.trim(),\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const response = await onSendMessage(inputMessage.trim());\n      const castMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        text: response,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, castMessage]);\n    } catch (error) {\n      const currentLanguage = i18n.language || 'tr';\n      let errorText = '';\n      \n      switch (currentLanguage) {\n        case 'tr':\n          errorText = \"Üzgünüm, şu anda yanıt vermekte zorlanıyorum. Lütfen tekrar deneyin.\";\n          break;\n        case 'es':\n          errorText = \"Lo siento, estoy teniendo problemas para responder en este momento. Por favor, inténtalo de nuevo.\";\n          break;\n        default:\n          errorText = \"Sorry, I'm having trouble responding right now. Please try again.\";\n      }\n      \n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        text: errorText,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Placeholder text'i dile göre ayarla\n  const getPlaceholderText = () => {\n    const currentLanguage = i18n.language || 'tr';\n    switch (currentLanguage) {\n      case 'tr':\n        return 'Mesajınızı yazın...';\n      case 'es':\n        return 'Escribe tu mensaje...';\n      default:\n        return 'Type your message...';\n    }\n  };\n\n  // Typing text'i dile göre ayarla\n  const getTypingText = () => {\n    const currentLanguage = i18n.language || 'tr';\n    switch (currentLanguage) {\n      case 'tr':\n        return 'Yazıyor...';\n      case 'es':\n        return 'Escribiendo...';\n      default:\n        return 'Typing...';\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[80] flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-[#222] rounded-[16px] shadow-[0_8px_24px_0_rgba(0,0,0,0.15)] w-[90vw] max-w-[400px] h-[80vh] flex flex-col animate-fadeIn\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3 p-4 border-b border-[#333]\">\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 flex items-center justify-center text-white hover:text-[#FE7743] transition-colors\"\n          >\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\n            </svg>\n          </button>\n          \n          {/* Cast Member Info */}\n          <div className=\"flex items-center gap-3 flex-1\">\n            <div className=\"w-10 h-10 rounded-full overflow-hidden bg-[#555]\">\n              {castMember.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${castMember.profile_path}`}\n                  alt={castMember.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center text-white text-xs\">\n                  {castMember.name.charAt(0)}\n                </div>\n              )}\n            </div>\n            <div>\n              <p className=\"text-white font-poppins text-[14px] font-semibold\">{castMember.name}</p>\n              <p className=\"text-[#EFEEEA] font-poppins text-[12px]\">{castMember.character}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[80%] p-3 rounded-[12px] ${\n                  message.isUser\n                    ? 'bg-[#FE7743] text-white'\n                    : 'bg-[#333] text-[#EFEEEA]'\n                }`}\n              >\n                <p className=\"font-poppins text-[14px] leading-relaxed\">{message.text}</p>\n                <p className={`text-xs mt-1 ${\n                  message.isUser ? 'text-white/70' : 'text-[#EFEEEA]/70'\n                }`}>\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </p>\n              </div>\n            </div>\n          ))}\n          \n          {/* Loading indicator */}\n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-[#333] text-[#EFEEEA] p-3 rounded-[12px]\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-[#FE7743] rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-[#FE7743] rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-[#FE7743] rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                  <span className=\"text-xs\">{getTypingText()}</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input */}\n        <div className=\"p-4 border-t border-[#333]\">\n          <div className=\"flex gap-2\">\n            <textarea\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={getPlaceholderText()}\n              className=\"flex-1 bg-[#333] text-white rounded-[12px] p-3 font-poppins text-[14px] resize-none outline-none border-none\"\n              rows={1}\n              disabled={isLoading}\n              style={{ minHeight: '44px', maxHeight: '120px' }}\n              onInput={(e) => {\n                const target = e.target as HTMLTextAreaElement;\n                target.style.height = 'auto';\n                target.style.height = Math.min(target.scrollHeight, 120) + 'px';\n              }}\n            />\n            <button\n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || isLoading}\n              className=\"w-12 h-12 bg-[#FE7743] rounded-full flex items-center justify-center text-white disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#e66a3a] transition-colors\"\n            >\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CastChatModal; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/FabAddButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[911,914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[911,914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1178,1181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1178,1181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1401,1404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1401,1404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2579,2582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2579,2582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport AddButtonModal from './AddButtonModal';\nimport CastSelectionModal from './CastSelectionModal';\nimport CastChatModal from './CastChatModal';\nimport ToastNotification from './ToastNotification';\nimport { chatWithCast } from '../services/gemini';\nimport { MovieLog } from '../services/localStorage';\n\ninterface FabAddButtonProps {\n  onAddMovieLog?: (log: Omit<MovieLog, 'id' | 'createdAt' | 'updatedAt'>) => void;\n}\n\nconst FabAddButton: React.FC<FabAddButtonProps> = ({ onAddMovieLog }) => {\n  const [open, setOpen] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n\n  // Cast/chat state\n  const [showCastSelection, setShowCastSelection] = useState(false);\n  const [showCastChat, setShowCastChat] = useState(false);\n  const [selectedCastMember, setSelectedCastMember] = useState<any>(null);\n  const [selectedMovie, setSelectedMovie] = useState<any>(null);\n  const [tmdbId, setTmdbId] = useState<number | null>(null);\n\n  // AddButtonModal'dan seçilen movie bilgisini al\n  const handleMovieSelect = (movie: any, id: number) => {\n    setSelectedMovie(movie);\n    setTmdbId(id);\n  };\n\n  const handleSave = (movie?: any, id?: number) => {\n    setOpen(false);\n    if (movie && id) {\n      setSelectedMovie(movie);\n      setTmdbId(id);\n    }\n    // Toast mesajını göster\n    setShowToast(true);\n  };\n\n  const handleCastSelect = (castMember: any) => {\n    setSelectedCastMember(castMember);\n    setShowCastChat(true);\n  };\n\n  const handleCloseCastSelection = () => {\n    setShowCastSelection(false);\n  };\n\n  const handleCloseCastChat = () => {\n    setShowCastChat(false);\n    setSelectedCastMember(null);\n  };\n\n  return (\n    <>\n            <button\n        className=\"fixed bottom-[110px] right-[20px] w-[56px] h-[56px] rounded-full bg-[#FE7743] flex items-center justify-center shadow-[0_8px_24px_0_rgba(0,0,0,0.15),0_2px_4px_0_rgba(0,0,0,0.2)] z-50 hover:bg-[#e66a3a] transition-all duration-200 hover:scale-105 active:scale-95\"\n        onClick={() => setOpen(true)}\n        aria-label=\"Add\"\n      >\n        {/* Plus Icon */}\n        <svg \n          width=\"24\" \n          height=\"24\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\" \n          className=\"text-white\"\n        >\n          <path \n            d=\"M12 5v14m-7-7h14\" \n            stroke=\"currentColor\" \n            strokeWidth=\"3\" \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\"\n          />\n        </svg>\n      </button>\n      <AddButtonModal \n        open={open} \n        onClose={() => setOpen(false)} \n        onSave={(log?: any) => {\n          if (log && log.selectedMovie && log.tmdbId) {\n            handleSave(log.selectedMovie, log.tmdbId);\n          } else {\n            handleSave();\n          }\n        }}\n        onAddMovieLog={onAddMovieLog}\n        onMovieSelect={handleMovieSelect}\n      />\n      {/* Toast Notification */}\n      <ToastNotification\n        isOpen={showToast}\n        onClose={() => setShowToast(false)}\n        messageKey=\"toast.movie_added\"\n        messageParams={selectedMovie ? { title: selectedMovie.title } : { title: 'Film' }}\n        type=\"success\"\n        duration={3000}\n      />\n      {/* Cast Selection Modal */}\n      {tmdbId && tmdbId > 0 && (\n        <CastSelectionModal\n          open={showCastSelection}\n          onClose={handleCloseCastSelection}\n          movieId={tmdbId}\n          movieTitle={selectedMovie?.title || ''}\n          onCastSelect={handleCastSelect}\n        />\n      )}\n      {/* Cast Chat Modal */}\n      {selectedCastMember && (\n        <CastChatModal\n          open={showCastChat}\n          onClose={handleCloseCastChat}\n          castMember={selectedCastMember}\n          movieTitle={selectedMovie?.title || ''}\n          onSendMessage={async (message: string) => {\n            if (!selectedCastMember || !selectedMovie) return '';\n            return await chatWithCast(message, selectedCastMember, selectedMovie.title);\n          }}\n        />\n      )}\n    </>\n  );\n};\nexport default FabAddButton; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/NetworkIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connectionType' is assigned a value but never used.","line":12,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { IonChip, IonIcon } from '@ionic/react';\nimport { cloudOfflineOutline, wifiOutline } from 'ionicons/icons';\nimport { useTranslation } from 'react-i18next';\nimport { useNetwork } from '../context/NetworkContext';\n\ninterface OfflineIndicatorProps {\n  className?: string;\n}\n\nexport const OfflineIndicator: React.FC<OfflineIndicatorProps> = ({ className = '' }) => {\n  const { isConnected, connectionType, isInitializing } = useNetwork();\n  const { t } = useTranslation();\n\n  // Hala başlatılıyor veya bağlantı varsa gösterme\n  if (isInitializing || isConnected) {\n    return null;\n  }\n\n  return (\n    <IonChip \n      className={`fixed top-4 left-1/2 transform -translate-x-1/2 z-50 ${className}`}\n      color=\"danger\"\n    >\n      <IonIcon icon={cloudOfflineOutline} />\n      <span className=\"ml-1\">{t('network.offline')}</span>\n    </IonChip>\n  );\n};\n\ninterface NetworkStatusIndicatorProps {\n  showWhenOnline?: boolean;\n  className?: string;\n}\n\nexport const NetworkStatusIndicator: React.FC<NetworkStatusIndicatorProps> = ({ \n  showWhenOnline = false,\n  className = '' \n}) => {\n  const { isConnected, connectionType, isInitializing } = useNetwork();\n  const { t } = useTranslation();\n\n  if (isInitializing) {\n    return null;\n  }\n\n  if (isConnected && !showWhenOnline) {\n    return null;\n  }\n\n  const getConnectionDisplayName = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'wifi':\n        return t('network.wifi');\n      case 'cellular':\n        return t('network.cellular');\n      case '4g':\n        return '4G';\n      case '3g':\n        return '3G';\n      case '2g':\n        return '2G';\n      case 'slow-2g':\n        return 'Slow 2G';\n      case 'none':\n        return t('network.disconnected');\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <IonChip \n      className={`${className}`}\n      color={isConnected ? 'success' : 'danger'}\n    >\n      <IonIcon icon={isConnected ? wifiOutline : cloudOfflineOutline} />\n      <span className=\"ml-1\">\n        {isConnected \n          ? `${getConnectionDisplayName(connectionType)} ${t('network.connected')}`\n          : t('network.offline')\n        }\n      </span>\n    </IonChip>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/ReviewsTabSegment.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":676,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":676,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26069,26072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26069,26072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { IonSpinner, IonInfiniteScroll, IonInfiniteScrollContent, IonModal } from '@ionic/react';\nimport { useTranslation } from 'react-i18next';\nimport { \n  getMovieReviews, \n  getPopularMoviesWithReviews, \n  getSeriesReviews,\n  getPopularSeriesWithReviews,\n  TMDBReview, \n  TMDBMovieResult, \n  searchAll, \n  TMDBSearchResult \n} from '../services/tmdb';\n\ninterface ReviewsTabSegmentProps {\n  className?: string;\n}\n\ninterface FilterState {\n  searchQuery: string;\n  mediaType: 'all' | 'movie' | 'tv';\n}\n\nconst ReviewsTabSegment: React.FC<ReviewsTabSegmentProps> = ({ className = '' }) => {\n  const { t } = useTranslation();\n  const [allReviews, setAllReviews] = useState<TMDBReview[]>([]);\n  const [filteredReviews, setFilteredReviews] = useState<TMDBReview[]>([]);\n  const [loading, setLoading] = useState(false);\n  // Removed: currentPage, setCurrentPage, totalPages, setTotalPages (unused pagination)\n  const [error, setError] = useState<string | null>(null);\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [filter, setFilter] = useState<FilterState>({\n    searchQuery: '',\n    mediaType: 'all'\n  });\n  const [suggestions, setSuggestions] = useState<TMDBSearchResult[]>([]);\n  const [searchLoading, setSearchLoading] = useState(false);\n  // Removed: selectedContent (unused state)\n  const [showFullReviewModal, setShowFullReviewModal] = useState(false);\n  const [selectedReview, setSelectedReview] = useState<TMDBReview | null>(null);\n  \n  // Infinite scroll için state'ler\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [hasMoreReviews, setHasMoreReviews] = useState(true);\n  const [popularMovies, setPopularMovies] = useState<TMDBMovieResult[]>([]);\n  const [popularSeries, setPopularSeries] = useState<TMDBMovieResult[]>([]);\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0);\n  const [currentSeriesIndex, setCurrentSeriesIndex] = useState(0);\n  const [currentMoviePage, setCurrentMoviePage] = useState(1);\n  const [currentSeriesPage, setCurrentSeriesPage] = useState(1);\n\n  // Popular filmleri ve dizileri yükle ve yorumlarını çek\n  useEffect(() => {\n    loadInitialReviews();\n  }, []);\n\n  // Filtreleme uygula\n  useEffect(() => {\n    applyFilters();\n  }, [allReviews, filter]);\n\n  // Scroll event listener ekle\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      \n      // Sayfanın %80'ine geldiğinde yeni yorumlar yükle\n      if (scrollTop + windowHeight >= documentHeight * 0.8) {\n        if (hasMoreReviews && !loadingMore) {\n          console.log('Scroll threshold reached, loading more reviews...');\n          loadMoreReviews();\n        }\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [hasMoreReviews, loadingMore]);\n\n  const loadInitialReviews = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [moviesData, seriesData] = await Promise.all([\n        getPopularMoviesWithReviews(),\n        getPopularSeriesWithReviews()\n      ]);\n      \n      // Popular listeleri state'e kaydet\n      setPopularMovies(moviesData);\n      setPopularSeries(seriesData);\n      \n      const allReviewsData: TMDBReview[] = [];\n      \n      // İlk 10 popüler filmin yorumlarını çek (2 sayfa her biri)\n      for (let i = 0; i < Math.min(10, moviesData.length); i++) {\n        try {\n          // İlk sayfa\n          const response1 = await getMovieReviews(moviesData[i].id, 1);\n          console.log(`Movie \"${moviesData[i].title}\" page 1 has ${response1.results.length} reviews`);\n          \n          // İkinci sayfa (eğer varsa)\n          let response2 = null;\n          if (response1.total_pages > 1) {\n            response2 = await getMovieReviews(moviesData[i].id, 2);\n            console.log(`Movie \"${moviesData[i].title}\" page 2 has ${response2.results.length} reviews`);\n          }\n          \n          const allMovieReviews = [\n            ...response1.results,\n            ...(response2 ? response2.results : [])\n          ];\n          \n          const reviewsWithMovieInfo = allMovieReviews.map(review => ({\n            ...review,\n            movieInfo: {\n              id: moviesData[i].id,\n              title: moviesData[i].title,\n              poster_path: moviesData[i].poster_path,\n              mediaType: 'movie' as const\n            }\n          }));\n          allReviewsData.push(...reviewsWithMovieInfo);\n        } catch (err) {\n          console.error(`Error loading reviews for ${moviesData[i].title}:`, err);\n        }\n      }\n\n      // İlk 10 popüler dizinin yorumlarını çek (2 sayfa her biri)\n      for (let i = 0; i < Math.min(10, seriesData.length); i++) {\n        try {\n          // İlk sayfa\n          const response1 = await getSeriesReviews(seriesData[i].id, 1);\n          console.log(`Series \"${seriesData[i].title}\" page 1 has ${response1.results.length} reviews`);\n          \n          // İkinci sayfa (eğer varsa)\n          let response2 = null;\n          if (response1.total_pages > 1) {\n            response2 = await getSeriesReviews(seriesData[i].id, 2);\n            console.log(`Series \"${seriesData[i].title}\" page 2 has ${response2.results.length} reviews`);\n          }\n          \n          const allSeriesReviews = [\n            ...response1.results,\n            ...(response2 ? response2.results : [])\n          ];\n          \n          const reviewsWithSeriesInfo = allSeriesReviews.map(review => ({\n            ...review,\n            movieInfo: {\n              id: seriesData[i].id,\n              title: seriesData[i].title,\n              poster_path: seriesData[i].poster_path,\n              mediaType: 'tv' as const\n            }\n          }));\n          allReviewsData.push(...reviewsWithSeriesInfo);\n        } catch (err) {\n          console.error(`Error loading reviews for ${seriesData[i].title}:`, err);\n        }\n      }\n      \n      // Yorumları tarihe göre sırala (en yeni önce)\n      const sortedReviews = allReviewsData.sort((a, b) => \n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n      );\n      \n      console.log(`Total reviews loaded: ${sortedReviews.length}`);\n      console.log('Reviews by type:', {\n        movies: sortedReviews.filter(r => r.movieInfo?.mediaType === 'movie').length,\n        tv: sortedReviews.filter(r => r.movieInfo?.mediaType === 'tv').length\n      });\n      \n      setAllReviews(sortedReviews);\n      setFilteredReviews(sortedReviews);\n      \n      // Infinite scroll için index'leri ayarla\n      setCurrentMovieIndex(10);\n      setCurrentSeriesIndex(10);\n      setCurrentMoviePage(3);\n      setCurrentSeriesPage(3);\n    } catch (err) {\n      setError('Failed to load reviews');\n      console.error('Error loading initial reviews:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilters = () => {\n    let filtered = [...allReviews];\n\n    // Arama filtresi\n    if (filter.searchQuery.trim()) {\n      filtered = filtered.filter(review => \n        review.movieInfo?.title?.toLowerCase().includes(filter.searchQuery.toLowerCase()) ||\n        review.author.toLowerCase().includes(filter.searchQuery.toLowerCase()) ||\n        review.content.toLowerCase().includes(filter.searchQuery.toLowerCase())\n      );\n    }\n\n    // Media type filtresi\n    if (filter.mediaType !== 'all') {\n      filtered = filtered.filter(review => \n        review.movieInfo?.mediaType === filter.mediaType\n      );\n    }\n\n    setFilteredReviews(filtered);\n  };\n\n  const handleSearch = async (query: string) => {\n    if (query.length >= 3) {\n      setSearchLoading(true);\n      try {\n        const response = await searchAll(query);\n        const combined = [...response.movies, ...response.series];\n        setSuggestions(combined);\n      } catch {\n        setSuggestions([]);\n      } finally {\n        setSearchLoading(false);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleContentSelect = async (content: TMDBSearchResult) => {\n    // selectedContent state kaldırıldı (unused)\n    setFilter(prev => ({ ...prev, searchQuery: content.title || content.name || '' }));\n    setSuggestions([]);\n    \n    // Seçilen içeriğin yorumlarını çek\n    try {\n      let response;\n      if (content.media_type === 'movie') {\n        response = await getMovieReviews(content.id, 1);\n      } else if (content.media_type === 'tv') {\n        response = await getSeriesReviews(content.id, 1);\n      } else {\n        return; // Person için yorum yok\n      }\n\n      const reviewsWithContentInfo = response.results.map(review => ({\n        ...review,\n        movieInfo: {\n          id: content.id,\n          title: content.title || content.name || '',\n          poster_path: content.poster_path,\n          mediaType: content.media_type === 'movie' ? 'movie' : 'tv'\n        }\n      }));\n      \n      // Yeni yorumları mevcut listeye ekle ve sırala\n      const updatedReviews = [...allReviews, ...reviewsWithContentInfo].sort((a, b) => \n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n      );\n      \n      setAllReviews(updatedReviews);\n    } catch (err) {\n      console.error('Error loading reviews for selected content:', err);\n    }\n  };\n\n  const loadMoreReviews = async () => {\n    if (loadingMore || !hasMoreReviews) return;\n    \n    setLoadingMore(true);\n    const newReviews: TMDBReview[] = [];\n    \n    try {\n      // Mevcut state değerlerini al\n      const currentMovieIdx = currentMovieIndex;\n      const currentSeriesIdx = currentSeriesIndex;\n      const currentMoviePg = currentMoviePage;\n      const currentSeriesPg = currentSeriesPage;\n      \n      // Film yorumlarını yükle (birden fazla sayfa)\n      if (currentMovieIdx < popularMovies.length) {\n        const movie = popularMovies[currentMovieIdx];\n        try {\n          // Mevcut sayfa ve sonraki 2 sayfa\n          const pagesToLoad = [currentMoviePg];\n          if (currentMoviePg + 1 <= 5) pagesToLoad.push(currentMoviePg + 1);\n          if (currentMoviePg + 2 <= 5) pagesToLoad.push(currentMoviePg + 2);\n          \n          for (const page of pagesToLoad) {\n            const response = await getMovieReviews(movie.id, page);\n            console.log(`Loading more movie reviews: \"${movie.title}\" page ${page} has ${response.results.length} reviews`);\n            \n            if (response.results.length > 0) {\n              const reviewsWithMovieInfo = response.results.map(review => ({\n                ...review,\n                movieInfo: {\n                  id: movie.id,\n                  title: movie.title,\n                  poster_path: movie.poster_path,\n                  mediaType: 'movie' as const\n                }\n              }));\n              newReviews.push(...reviewsWithMovieInfo);\n            }\n            \n            // Eğer bu filmin son sayfasıysa, döngüden çık\n            if (page >= response.total_pages) break;\n          }\n          \n          // Bir sonraki filme geç\n          setCurrentMovieIndex(currentMovieIdx + 1);\n          setCurrentMoviePage(1);\n        } catch (err) {\n          console.error(`Error loading more reviews for ${movie.title}:`, err);\n          setCurrentMovieIndex(currentMovieIdx + 1);\n          setCurrentMoviePage(1);\n        }\n      }\n      \n      // Dizi yorumlarını yükle (birden fazla sayfa)\n      if (currentSeriesIdx < popularSeries.length) {\n        const series = popularSeries[currentSeriesIdx];\n        try {\n          // Mevcut sayfa ve sonraki 2 sayfa\n          const pagesToLoad = [currentSeriesPg];\n          if (currentSeriesPg + 1 <= 5) pagesToLoad.push(currentSeriesPg + 1);\n          if (currentSeriesPg + 2 <= 5) pagesToLoad.push(currentSeriesPg + 2);\n          \n          for (const page of pagesToLoad) {\n            const response = await getSeriesReviews(series.id, page);\n            console.log(`Loading more series reviews: \"${series.title}\" page ${page} has ${response.results.length} reviews`);\n            \n            if (response.results.length > 0) {\n              const reviewsWithSeriesInfo = response.results.map(review => ({\n                ...review,\n                movieInfo: {\n                  id: series.id,\n                  title: series.title,\n                  poster_path: series.poster_path,\n                  mediaType: 'tv' as const\n                }\n              }));\n              newReviews.push(...reviewsWithSeriesInfo);\n            }\n            \n            // Eğer bu dizinin son sayfasıysa, döngüden çık\n            if (page >= response.total_pages) break;\n          }\n          \n          // Bir sonraki dizine geç\n          setCurrentSeriesIndex(currentSeriesIdx + 1);\n          setCurrentSeriesPage(1);\n        } catch (err) {\n          console.error(`Error loading more reviews for ${series.title}:`, err);\n          setCurrentSeriesIndex(currentSeriesIdx + 1);\n          setCurrentSeriesPage(1);\n        }\n      }\n      \n      // Eğer hem film hem dizi listelerinin sonuna geldiysek, daha fazla yorum yok\n      const nextMovieIdx = currentMovieIdx >= popularMovies.length ? currentMovieIdx : currentMovieIdx + 1;\n      const nextSeriesIdx = currentSeriesIdx >= popularSeries.length ? currentSeriesIdx : currentSeriesIdx + 1;\n      \n      if (nextMovieIdx >= popularMovies.length && nextSeriesIdx >= popularSeries.length) {\n        setHasMoreReviews(false);\n        console.log('No more reviews available - reached end of all content');\n      }\n      \n      // Yeni yorumları mevcut listeye ekle ve sırala\n      if (newReviews.length > 0) {\n        const updatedReviews = [...allReviews, ...newReviews].sort((a, b) => \n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n        );\n        \n        setAllReviews(updatedReviews);\n        console.log(`Loaded ${newReviews.length} more reviews. Total: ${updatedReviews.length}`);\n      }\n      \n    } catch (err) {\n      console.error('Error loading more reviews:', err);\n    } finally {\n      setLoadingMore(false);\n    }\n  };\n\n  const handleLoadMore = async (event: CustomEvent<void>) => {\n    await loadMoreReviews();\n    (event.target as HTMLIonInfiniteScrollElement).complete();\n  };\n\n\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const truncateText = (text: string, maxLength: number = 200) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  };\n\n  const clearFilters = () => {\n    setFilter({\n      searchQuery: '',\n      mediaType: 'all'\n    });\n    // selectedContent state kaldırıldı\n  };\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center py-12 ${className}`}>\n        <IonSpinner name=\"crescent\" />\n        <span className=\"ml-2 text-muted-foreground\">{t('social.loading_reviews')}</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`text-center py-12 ${className}`}>\n        <p className=\"text-red-500 mb-4\">{error}</p>\n        <button \n          onClick={() => window.location.reload()} \n          className=\"px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90\"\n        >\n          {t('social.try_again')}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n\n\n      {/* Filter Button */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{t('social.all_reviews')}</h3>\n        <button\n          onClick={() => setShowFilterModal(true)}\n          className=\"px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 text-sm font-medium\"\n        >\n          {t('social.filter')}\n        </button>\n      </div>\n\n      {/* Active Filters Display */}\n      {(filter.searchQuery || filter.mediaType !== 'all') && (\n        <div className=\"flex items-center gap-2 mb-4 flex-wrap\">\n          <span className=\"text-sm text-muted-foreground\">{t('social.active_filters')}</span>\n          {filter.searchQuery && (\n            <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded text-sm\">\n              Search: {filter.searchQuery}\n            </span>\n          )}\n          {filter.mediaType !== 'all' && (\n            <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded text-sm\">\n              Type: {filter.mediaType === 'movie' ? t('social.movies') : t('social.tv_shows')}\n            </span>\n          )}\n          <button\n            onClick={clearFilters}\n            className=\"px-2 py-1 bg-red-100 text-red-600 rounded text-sm hover:bg-red-200\"\n          >\n            {t('social.clear')}\n          </button>\n        </div>\n      )}\n\n      {/* Reviews Section */}\n      {filteredReviews.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">\n            {filter.searchQuery || filter.mediaType !== 'all' \n              ? t('social.no_reviews_match') \n              : t('social.no_reviews')}\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredReviews.map((review) => (\n            <div key={review.id} className=\"bg-card rounded-xl p-4 shadow-lg border border-border\">\n              {/* Movie/Series Info */}\n              {review.movieInfo && (\n                <div className=\"flex items-start gap-4 mb-4 pb-4 border-b border-border\">\n                  {review.movieInfo.poster_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w92${review.movieInfo.poster_path}`}\n                      alt={review.movieInfo.title}\n                      className=\"w-16 h-24 object-cover rounded-lg shadow-md flex-shrink-0\"\n                    />\n                  ) : (\n                    <div className=\"w-16 h-24 bg-muted rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-muted-foreground text-xs\">No Image</span>\n                    </div>\n                  )}\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-bold text-card-foreground text-base leading-tight mb-1\">{review.movieInfo.title}</h4>\n                    <p className=\"text-xs text-muted-foreground capitalize font-medium\">{review.movieInfo.mediaType}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Review Content */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {review.author_details.avatar_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w45${review.author_details.avatar_path}`}\n                        alt={review.author}\n                        className=\"w-12 h-12 rounded-full shadow-sm\"\n                      />\n                    ) : (\n                      <div className=\"w-12 h-12 bg-muted rounded-full flex items-center justify-center shadow-sm\">\n                        <span className=\"text-muted-foreground font-bold text-lg\">\n                          {review.author.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n                    <div>\n                      <h4 className=\"font-semibold text-card-foreground text-base\">{review.author}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatDate(review.created_at)}\n                      </p>\n                    </div>\n                  </div>\n                  {review.author_details.rating && (\n                    <div className=\"flex items-center gap-2 bg-muted/50 px-3 py-1 rounded-full\">\n                      <span className=\"text-yellow-500 text-lg\">★</span>\n                      <span className=\"text-sm font-bold text-card-foreground\">{review.author_details.rating}/10</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"text-sm text-card-foreground leading-relaxed bg-muted/30 rounded-lg p-3\">\n                  {truncateText(review.content)}\n                </div>\n                \n                {review.content.length > 200 && (\n                  <button\n                    onClick={() => {\n                      setSelectedReview(review);\n                      setShowFullReviewModal(true);\n                    }}\n                    className=\"inline-flex items-center gap-2 mt-2 text-primary hover:text-primary/80 font-semibold text-sm transition-colors\"\n                  >\n                    <span>{t('social.read_full_review')}</span>\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            </div>\n          ))}\n          \n          {/* Infinite Scroll */}\n          <IonInfiniteScroll \n            onIonInfinite={handleLoadMore}\n            disabled={!hasMoreReviews || loadingMore}\n            threshold=\"50px\"\n          >\n            <IonInfiniteScrollContent\n              loadingSpinner=\"crescent\"\n              loadingText={loadingMore ? t('social.loading_reviews') : hasMoreReviews ? t('social.loading_reviews') : t('social.no_more_reviews')}\n            />\n          </IonInfiniteScroll>\n          \n\n        </div>\n      )}\n\n      {/* Inline Bottom Filter Modal */}\n      <IonModal \n        isOpen={showFilterModal} \n        onDidDismiss={() => setShowFilterModal(false)}\n        initialBreakpoint={0.5}\n        breakpoints={[0, 0.4, 0.5, 0.7]}\n        className=\"filter-modal\"\n      >\n        {/* Ana Modal Container - Dark Theme */}\n        <div className=\"bg-[#1a1a1a] text-gray-100 h-full rounded-t-[20px] relative\">\n          {/* Pull Indicator */}\n          <div className=\"flex justify-center pt-3 pb-2\">\n            <div className=\"w-8 h-1 bg-gray-600 rounded-full\"></div>\n          </div>\n\n          {/* Modal Header */}\n          <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-700\">\n            <button \n              onClick={clearFilters}\n              className=\"text-sm font-medium text-orange-500 hover:text-orange-400 transition-colors\"\n            >\n              {t('social.clear_filters')}\n            </button>\n            <h2 className=\"text-lg font-semibold text-gray-100\">\n              {t('social.filter_reviews')}\n            </h2>\n            <button \n              onClick={() => setShowFilterModal(false)}\n              className=\"text-sm font-medium text-gray-400 hover:text-gray-200 transition-colors\"\n            >\n              {t('common.close')}\n            </button>\n          </div>\n\n          {/* Modal Content */}\n          <div className=\"px-4 py-4 space-y-5\">\n            {/* Search Input */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-300 mb-3\">\n                {t('social.search_content')}\n              </h3>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={filter.searchQuery}\n                  onChange={(e) => {\n                    setFilter(prev => ({ ...prev, searchQuery: e.target.value }));\n                    handleSearch(e.target.value);\n                  }}\n                  placeholder={t('social.search_placeholder')}\n                  className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500\"\n                />\n                {searchLoading && (\n                  <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                    <IonSpinner name=\"crescent\" />\n                  </div>\n                )}\n              </div>\n              \n              {/* Search Suggestions */}\n              {suggestions.length > 0 && (\n                <div className=\"mt-2 border border-gray-600 rounded-lg max-h-48 overflow-y-auto bg-gray-800\">\n                  {suggestions.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex items-center gap-3 px-3 py-2 cursor-pointer hover:bg-gray-700\"\n                      onClick={() => handleContentSelect(item)}\n                    >\n                      <img\n                        src={item.poster_path ? `https://image.tmdb.org/t/p/w45${item.poster_path}` : 'https://placehold.co/40x60?text=No+Image'}\n                        alt={item.title || item.name}\n                        className=\"w-10 h-15 object-cover rounded\"\n                      />\n                      <div className=\"flex-1\">\n                        <span className=\"text-sm font-medium text-gray-100\">{item.title || item.name}</span>\n                        <span className=\"text-xs text-gray-400 block capitalize\">{item.media_type}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Media Type Filter */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-300 mb-3\">\n                {t('social.content_type')}\n              </h3>\n              <div className=\"flex gap-2\">\n                {[\n                  { value: 'all', label: t('social.all') },\n                  { value: 'movie', label: t('social.movies') },\n                  { value: 'tv', label: t('social.tv_shows') }\n                ].map((type) => (\n                  <button\n                    key={type.value}\n                    onClick={() => setFilter(prev => ({ ...prev, mediaType: type.value as any }))}\n                    className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-200 ${\n                      filter.mediaType === type.value\n                        ? 'bg-orange-500 text-white shadow-sm'\n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-gray-100'\n                    }`}\n                  >\n                    {type.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Modal Footer */}\n          <div className=\"px-4 pb-4\">\n            <button \n              onClick={() => setShowFilterModal(false)}\n              className=\"w-full py-3 rounded-lg bg-orange-500 text-white text-sm font-semibold hover:bg-orange-600 transition-colors shadow-sm\"\n            >\n              {t('social.apply_filters')}\n            </button>\n          </div>\n        </div>\n      </IonModal>\n\n      {/* Full Review Modal */}\n      <IonModal \n        isOpen={showFullReviewModal} \n        onDidDismiss={() => setShowFullReviewModal(false)}\n        initialBreakpoint={0.7}\n        breakpoints={[0, 0.5, 0.7, 0.9]}\n        className=\"full-review-modal\"\n      >\n        {/* Ana Modal Container - Dark Theme */}\n        <div className=\"bg-[#1a1a1a] text-gray-100 h-full rounded-t-[20px] relative\">\n          {/* Pull Indicator */}\n          <div className=\"flex justify-center pt-3 pb-2\">\n            <div className=\"w-8 h-1 bg-gray-600 rounded-full\"></div>\n          </div>\n\n          {/* Modal Header */}\n          <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-700\">\n            <div className=\"flex items-center gap-3\">\n              {selectedReview?.movieInfo?.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w45${selectedReview.movieInfo.poster_path}`}\n                  alt={selectedReview.movieInfo.title}\n                  className=\"w-12 h-18 object-cover rounded\"\n                />\n              ) : (\n                <div className=\"w-12 h-18 bg-gray-200 rounded flex items-center justify-center\">\n                  <span className=\"text-gray-500 text-xs\">No Image</span>\n                </div>\n              )}\n              <div>\n                <h2 className=\"text-lg font-semibold text-gray-100\">{selectedReview?.movieInfo?.title}</h2>\n                <p className=\"text-xs text-gray-400 capitalize\">{selectedReview?.movieInfo?.mediaType}</p>\n              </div>\n            </div>\n            <button \n              onClick={() => setShowFullReviewModal(false)}\n              className=\"text-sm font-medium text-gray-400 hover:text-gray-200 transition-colors\"\n            >\n              {t('common.close')}\n            </button>\n          </div>\n\n          {/* Modal Content */}\n          <div className=\"px-4 py-4 overflow-y-auto max-h-[calc(100vh-200px)]\">\n            {selectedReview && (\n              <div className=\"space-y-4\">\n                {/* Review Header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {selectedReview.author_details.avatar_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w45${selectedReview.author_details.avatar_path}`}\n                        alt={selectedReview.author}\n                        className=\"w-12 h-12 rounded-full\"\n                      />\n                    ) : (\n                      <div className=\"w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center\">\n                        <span className=\"text-gray-600 font-semibold\">\n                          {selectedReview.author.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n                    <div>\n                      <h3 className=\"font-semibold text-gray-100 text-lg\">{selectedReview.author}</h3>\n                      <p className=\"text-sm text-gray-400\">\n                        {formatDate(selectedReview.created_at)}\n                      </p>\n                    </div>\n                  </div>\n                  {selectedReview.author_details.rating && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-yellow-500 text-xl\">★</span>\n                      <span className=\"text-lg font-medium text-gray-100\">{selectedReview.author_details.rating}/10</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Full Review Content */}\n                <div className=\"bg-gray-800 rounded-lg p-4\">\n                  <div className=\"text-gray-100 leading-relaxed whitespace-pre-wrap\">\n                    {selectedReview.content}\n                  </div>\n                </div>\n\n                {/* Original Review Link */}\n                <div className=\"text-center pt-4 border-t border-gray-700\">\n                                     <a\n                     href={selectedReview.url}\n                     target=\"_blank\"\n                     rel=\"noopener noreferrer\"\n                     className=\"inline-flex items-center gap-2 text-orange-500 hover:text-orange-400 text-sm\"\n                   >\n                     <span>{t('social.view_original_review')}</span>\n                     <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                     </svg>\n                   </a>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </IonModal>\n    </div>\n  );\n};\n\nexport default ReviewsTabSegment; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/SeriesDetailModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":15,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":80}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getSeriesDetails, getSeriesCast, getSeriesTrailerKey, getSimilarSeries, TMDBSeriesDetails, TMDBCastMember, TMDBMovieResult } from '../services/tmdb';\nimport { LocalStorageService } from '../services/localStorage';\n// Removed: ActorDetailModal import (unused)\nimport ToastNotification from './ToastNotification';\nimport { useModal } from '../context/ModalContext';\n\ninterface SeriesDetailModalProps {\n  open: boolean;\n  onClose: () => void; // Kullanılmıyor ama prop interface için tutulmalı\n  seriesId: number | null;\n}\n\nconst SeriesDetailModal: React.FC<SeriesDetailModalProps> = ({ open, onClose: _, seriesId }) => {\n  const { t } = useTranslation();\n  const { openModal, closeModal } = useModal();\n  const [seriesDetails, setSeriesDetails] = useState<TMDBSeriesDetails | null>(null);\n  const [cast, setCast] = useState<TMDBCastMember[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [trailerKey, setTrailerKey] = useState<string | null>(null);\n  const [similarSeries, setSimilarSeries] = useState<TMDBMovieResult[]>([]);\n  const [selectedSeriesId, setSelectedSeriesId] = useState<number | null>(null);\n  // Removed: actorModalOpen, selectedActorId (unused actor modal states)\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n\n\n  const loadSeriesDetails = async () => {\n    if (!selectedSeriesId) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const [details, castData] = await Promise.all([\n        getSeriesDetails(selectedSeriesId),\n        getSeriesCast(selectedSeriesId)\n      ]);\n      \n      setSeriesDetails(details);\n      setCast(castData);\n    } catch (err) {\n      setError('Failed to load series details');\n      console.error('Error loading series details:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadTrailer = async () => {\n    if (!selectedSeriesId) return;\n    const key = await getSeriesTrailerKey(selectedSeriesId);\n    setTrailerKey(key);\n  };\n\n  const loadSimilarSeries = async () => {\n    if (!selectedSeriesId) return;\n    const series = await getSimilarSeries(selectedSeriesId);\n    setSimilarSeries(series);\n  };\n\n  const handleSimilarSeriesClick = (newSeriesId: number) => {\n    // Reset states for new series\n    setSeriesDetails(null);\n    setCast([]);\n    setTrailerKey(null);\n    setSimilarSeries([]);\n    setError(null);\n    setLoading(true);\n    // Set new series ID - this will trigger useEffect\n    setSelectedSeriesId(newSeriesId);\n  };\n\n  const handleActorClick = (actorId: number) => {\n    openModal('actor', actorId);\n  };\n\n  // Removed: handleActorModalClose (unused function)\n\n  // İzleme durumu state'i\n  const [logStatus, setLogStatus] = useState<'watched' | 'watchlist' | null>(null);\n\n  useEffect(() => {\n    if (open && seriesId) {\n      setSelectedSeriesId(seriesId);\n      loadSeriesDetails();\n      loadTrailer();\n      loadSimilarSeries();\n      // İzleme durumunu kontrol et\n      const status = LocalStorageService.getLogStatusByTmdbId(seriesId, 'tv');\n      setLogStatus(status);\n    } else if (!open) {\n      // Modal kapandığında state'leri temizle\n      setSeriesDetails(null);\n      setCast([]);\n      setTrailerKey(null);\n      setSimilarSeries([]);\n      setError(null);\n      setLoading(false);\n      setSelectedSeriesId(null);\n      setLogStatus(null);\n      setShowToast(false);\n    }\n  }, [open, seriesId]);\n\n  const handleWatchlistToggle = () => {\n    const seriesIdToUpdate = selectedSeriesId || seriesId;\n    if (!seriesIdToUpdate || !seriesDetails) return;\n\n    const newType = logStatus === 'watchlist' ? null : 'watchlist';\n    \n    if (newType === null) {\n      // Kaydı sil\n      const logs = LocalStorageService.getMovieLogs();\n      const logToDelete = logs.find(log => log.tmdbId === seriesIdToUpdate && log.mediaType === 'tv');\n      if (logToDelete) {\n        LocalStorageService.deleteMovieLog(logToDelete.id);\n      }\n      setLogStatus(null);\n      setToastMessage(t('toast.series_removed_from_watchlist', { title: seriesDetails.name }));\n      setShowToast(true);\n    } else {\n      // Önce mevcut kaydı güncellemeyi dene\n      let updatedLog = LocalStorageService.updateLogTypeByTmdbId(seriesIdToUpdate, newType, 'tv');\n      \n      if (!updatedLog) {\n        // Kayıt yoksa yeni kayıt oluştur\n        updatedLog = LocalStorageService.saveMovieLog({\n          title: seriesDetails.name,\n          date: new Date().toISOString().split('T')[0],\n          rating: '',\n          review: '',\n          poster: seriesDetails.poster_path ? `https://image.tmdb.org/t/p/w500${seriesDetails.poster_path}` : '',\n          type: newType,\n          mediaType: 'tv',\n          tmdbId: seriesIdToUpdate,\n          contentType: 'tv',\n          seasonCount: seriesDetails.number_of_seasons,\n          episodeCount: seriesDetails.number_of_episodes,\n          seriesId: seriesDetails.id.toString(),\n          seriesTitle: seriesDetails.name,\n          seriesPoster: seriesDetails.poster_path ? `https://image.tmdb.org/t/p/w500${seriesDetails.poster_path}` : '',\n          genres: seriesDetails.genres?.map(g => g.name) || [],\n          releaseYear: seriesDetails.first_air_date ? new Date(seriesDetails.first_air_date).getFullYear() : undefined\n        });\n      }\n      setLogStatus(newType);\n      setToastMessage(t('toast.series_added_to_watchlist', { title: seriesDetails.name }));\n      setShowToast(true);\n    }\n  };\n\n  const handleWatchedToggle = () => {\n    const seriesIdToUpdate = selectedSeriesId || seriesId;\n    if (!seriesIdToUpdate || !seriesDetails) return;\n\n    const newType = logStatus === 'watched' ? null : 'watched';\n    \n    if (newType === null) {\n      // Kaydı sil\n      const logs = LocalStorageService.getMovieLogs();\n      const logToDelete = logs.find(log => log.tmdbId === seriesIdToUpdate && log.mediaType === 'tv');\n      if (logToDelete) {\n        LocalStorageService.deleteMovieLog(logToDelete.id);\n      }\n      setLogStatus(null);\n      setToastMessage(t('toast.series_removed_from_watchlist', { title: seriesDetails.name }));\n      setShowToast(true);\n    } else {\n      // Önce mevcut kaydı güncellemeyi dene\n      let updatedLog = LocalStorageService.updateLogTypeByTmdbId(seriesIdToUpdate, newType, 'tv');\n      \n      if (!updatedLog) {\n        // Kayıt yoksa yeni kayıt oluştur\n        updatedLog = LocalStorageService.saveMovieLog({\n          title: seriesDetails.name,\n          date: new Date().toISOString().split('T')[0],\n          rating: '',\n          review: '',\n          poster: seriesDetails.poster_path ? `https://image.tmdb.org/t/p/w500${seriesDetails.poster_path}` : '',\n          type: newType,\n          mediaType: 'tv',\n          tmdbId: seriesIdToUpdate,\n          contentType: 'tv',\n          seasonCount: seriesDetails.number_of_seasons,\n          episodeCount: seriesDetails.number_of_episodes,\n          seriesId: seriesDetails.id.toString(),\n          seriesTitle: seriesDetails.name,\n          seriesPoster: seriesDetails.poster_path ? `https://image.tmdb.org/t/p/w500${seriesDetails.poster_path}` : '',\n          genres: seriesDetails.genres?.map(g => g.name) || [],\n          releaseYear: seriesDetails.first_air_date ? new Date(seriesDetails.first_air_date).getFullYear() : undefined\n        });\n      }\n      setLogStatus(newType);\n      setToastMessage(t('toast.series_marked_as_watched', { title: seriesDetails.name }));\n      setShowToast(true);\n    }\n  };\n\n  // Removed: formatYear function (unused utility)\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"w-full h-full bg-[#0C1117] overflow-y-auto\">\n        {/* Back Button */}\n        <button\n          onClick={closeModal}\n          className=\"absolute top-4 left-4 z-10 w-6 h-6 flex items-center justify-center\"\n        >\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M19 12H5M12 19L5 12L12 5\" stroke=\"#F8F8FF\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </svg>\n        </button>\n\n        {/* Action Buttons - Sağ Üst */}\n        <div className=\"absolute top-4 right-4 z-10 flex gap-2\">\n          {/* İzledim Butonu */}\n          <button\n            onClick={handleWatchedToggle}\n            className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-200 hover:scale-105 active:scale-95 ${\n              logStatus === 'watched' \n                ? 'bg-[#FE7743] text-white shadow-lg' \n                : 'bg-black bg-opacity-50 text-[#F8F8FF] hover:bg-opacity-70'\n            }`}\n            aria-label={logStatus === 'watched' ? 'İzledim olarak işaretle' : 'İzledim olarak işaretle'}\n          >\n            <svg \n              width=\"20\" \n              height=\"20\" \n              viewBox=\"0 0 24 24\" \n              fill={logStatus === 'watched' ? 'currentColor' : 'none'} \n              stroke=\"currentColor\" \n              strokeWidth=\"2\"\n            >\n              <path d=\"M20 6L9 17l-5-5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </button>\n\n          {/* İzleme Listesi Butonu */}\n          <button\n            onClick={handleWatchlistToggle}\n            className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-200 hover:scale-105 active:scale-95 ${\n              logStatus === 'watchlist' \n                ? 'bg-[#FE7743] text-white shadow-lg' \n                : 'bg-black bg-opacity-50 text-[#F8F8FF] hover:bg-opacity-70'\n            }`}\n            aria-label={logStatus === 'watchlist' ? 'İzleme listesinden çıkar' : 'İzleme listesine ekle'}\n          >\n            <svg \n              width=\"20\" \n              height=\"20\" \n              viewBox=\"0 0 24 24\" \n              fill={logStatus === 'watchlist' ? 'currentColor' : 'none'} \n              stroke=\"currentColor\" \n              strokeWidth=\"2\"\n            >\n              <path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </button>\n        </div>\n\n        {loading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-white font-poppins\">{t('series_detail_modal.loading')}</div>\n          </div>\n        ) : error ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-red-400 font-poppins\">{t('series_detail_modal.error')}</div>\n          </div>\n        ) : seriesDetails ? (\n          <>\n            {/* Poster Background */}\n            <div className=\"relative h-[424px] w-full\">\n              <img\n                src={seriesDetails.backdrop_path ? `https://image.tmdb.org/t/p/w500${seriesDetails.backdrop_path}` : 'https://placehold.co/393x424?text=No+Image'}\n                alt={seriesDetails.name}\n                className=\"w-full h-full object-cover\"\n              />\n              {/* Gradient Overlay */}\n              <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-80\"></div>\n            </div>\n\n            {/* Content Container */}\n            <div className=\"relative -mt-16 px-[18px] pb-20\">\n              <div className=\"bg-[#0C1117] rounded-t-[24px] p-4 pb-8\">\n                {/* Series Title and Genres */}\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <h1 className=\"text-[#F8F8FF] font-poppins font-extrabold text-2xl leading-6 drop-shadow-[0_4px_15px_rgba(255,255,255,0.7)]\">\n                    {seriesDetails.name}\n                  </h1>\n                  <div className=\"flex gap-1\">\n                    {seriesDetails.genres?.slice(0, 2).map((genre) => (\n                      <span\n                        key={genre.id}\n                        className=\"px-1 py-0.5 bg-[rgba(254,119,67,0.5)] rounded-lg text-[#F8F8FF] text-[10px] font-poppins font-medium\"\n                      >\n                        {genre.name}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Seasons and Episodes */}\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <span className=\"text-[#F8F8FF] font-poppins font-semibold text-base drop-shadow-[0_8px_15px_rgba(255,255,255,0.7)]\">\n                    {seriesDetails.number_of_seasons} {t('series_detail_modal.seasons')}{seriesDetails.number_of_seasons !== 1 ? 's' : ''}\n                  </span>\n                  <div className=\"w-2.5 h-2.5 bg-[#F8F8FF] rounded-full drop-shadow-[0_8px_15px_rgba(255,255,255,0.7)]\"></div>\n                  <span className=\"text-[#F8F8FF] font-poppins font-semibold text-base drop-shadow-[0_8px_15px_rgba(255,255,255,0.7)]\">\n                    {seriesDetails.number_of_episodes} {t('series_detail_modal.episodes')}\n                  </span>\n                </div>\n\n                {/* Rating */}\n                <div className=\"inline-flex items-center gap-1 px-2.5 py-0.5 bg-[#FE7743] rounded-xl mb-2 drop-shadow-[0_4px_15px_rgba(255,255,255,0.5)]\">\n                  <span className=\"text-[#F8F8FF] font-poppins text-xs\">{t('series_detail_modal.imdb_rating')}</span>\n                  <div className=\"flex items-center gap-0.5\">\n                    <span className=\"text-[#F8F8FF] font-poppins text-sm\">\n                      {seriesDetails.vote_average ? seriesDetails.vote_average.toFixed(1) : 'N/A'}\n                    </span>\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"#F8F8FF\">\n                      <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"/>\n                    </svg>\n                  </div>\n                </div>\n\n                {/* Overview */}\n                <p className=\"text-[#EFEEEA] font-poppins text-xs leading-6 mb-4\">\n                  {seriesDetails.overview || t('series_detail_modal.no_overview')}\n                </p>\n\n                {/* Cast Section */}\n                <div className=\"mb-4\">\n                  <h2 className=\"text-[#EFEEEA] font-poppins font-bold text-2xl mb-1\">{t('series_detail_modal.stars')}</h2>\n                  <div className=\"flex gap-4 overflow-x-auto\">\n                    {cast.slice(0, 6).map((member) => (\n                      <div \n                        key={member.id} \n                        className=\"flex flex-col items-center gap-1 min-w-[46px] cursor-pointer hover:opacity-80 transition-opacity\"\n                        onClick={() => handleActorClick(member.id)}\n                      >\n                        <div className=\"w-[50px] h-[50px] rounded-full overflow-hidden bg-[#D9D9D9]\">\n                          <img\n                            src={member.profile_path ? `https://image.tmdb.org/t/p/w500${member.profile_path}` : 'https://placehold.co/50x50?text=?'}\n                            alt={member.name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <span className=\"text-[#F8F8FF] font-poppins text-[10px] font-medium text-center leading-3\">\n                          {member.name.split(' ').slice(0, 2).join(' ')}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Watch Trailer Section */}\n                <div className=\"mb-4\">\n                  <h2 className=\"text-[#F8F8FF] font-poppins font-bold text-2xl mb-2\">{t('series_detail_modal.watch_trailer')}</h2>\n                  {trailerKey ? (\n                    <div className=\"w-full h-40 bg-black rounded-lg overflow-hidden flex items-center justify-center\">\n                      <iframe\n                        width=\"100%\"\n                        height=\"100%\"\n                        src={`https://www.youtube.com/embed/${trailerKey}`}\n                        title=\"YouTube trailer\"\n                        frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen\n                        className=\"w-full h-full rounded-lg\"\n                      ></iframe>\n                    </div>\n                  ) : (\n                    <div className=\"w-full h-40 bg-gray-800 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-[#F8F8FF] font-poppins\">{t('series_detail_modal.trailer_not_found')}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Similar Series Section */}\n                <div className=\"mb-6\">\n                  <h2 className=\"text-[#F8F8FF] font-poppins font-bold text-2xl mb-2\">{t('series_detail_modal.liked_others')}</h2>\n                  <div className=\"flex gap-3 overflow-x-auto pb-4\">\n                    {similarSeries.slice(0, 5).map((series) => (\n                      <div \n                        key={series.id} \n                        className=\"w-[90px] h-[135px] bg-gray-800 rounded-lg border border-white flex-shrink-0 overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\"\n                        onClick={() => handleSimilarSeriesClick(series.id)}\n                      >\n                        <img\n                          src={series.poster_path ? `https://image.tmdb.org/t/p/w500${series.poster_path}` : 'https://placehold.co/90x135?text=No+Image'}\n                          alt={series.title}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : null}\n\n        {/* Toast Notification */}\n        <ToastNotification\n          isOpen={showToast}\n          onClose={() => setShowToast(false)}\n          message={toastMessage}\n          type=\"success\"\n          duration={3000}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SeriesDetailModal; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/SeriesGroupCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkmark' is defined but never used.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'history' is assigned a value but never used.","line":16,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { IonIcon } from '@ionic/react';\nimport { play, checkmark, chevronDown, chevronUp } from 'ionicons/icons';\nimport { MovieLog } from '../services/localStorage';\nimport MovieCard from './MovieCard';\n\ninterface SeriesGroupCardProps {\n  seriesInfo: { id: string; title: string; poster: string; };\n  episodes: MovieLog[];\n  onClick: () => void;\n}\n\nconst SeriesGroupCard: React.FC<SeriesGroupCardProps> = ({ seriesInfo, episodes, onClick }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const history = useHistory();\n\n  // Güvenlik kontrolü\n  if (!seriesInfo || !episodes || episodes.length === 0) {\n    return null;\n  }\n\n  const watchedCount = episodes.filter(ep => ep.type === 'watched').length;\n  const totalCount = episodes.length;\n\n  const handleSeriesClick = () => {\n    // 🐛 DEBUG: SeriesGroupCard click'inde veriyi logla\n    console.log('🎯 SeriesGroupCard clicked, seriesInfo:', seriesInfo);\n    console.log('🔗 Navigating to series ID:', seriesInfo.id);\n    console.log('📊 Episodes in this series:', episodes.length);\n    onClick();\n  };\n\n  const handleToggleExpanded = (e: React.MouseEvent) => {\n    e.stopPropagation(); // Ana tıklama olayını engelle\n    setIsExpanded(prev => !prev);\n  };\n\n  return (\n    <div \n      className=\"bg-card rounded-2xl shadow-lg overflow-hidden transition-all duration-300 ease-in-out transform hover:scale-[1.02] active:scale-[0.98] cursor-pointer\"\n      onClick={handleSeriesClick}\n    >\n      <div className=\"p-4 flex items-center gap-4\">\n        <div className=\"w-20 h-28 flex-shrink-0 rounded-xl overflow-hidden bg-muted\">\n          <img\n            src={seriesInfo.poster || 'https://placehold.co/96x96?text=No+Image'}\n            alt={seriesInfo.title}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-foreground font-bold truncate text-body\">{seriesInfo.title}</h3>\n          \n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground mt-1\">\n            <span>{totalCount} bölüm</span>\n            <div className=\"bg-primary px-2 py-1 rounded-full\">\n              <span className=\"text-xs font-bold text-primary-foreground\">\n                {watchedCount}/{totalCount}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"w-full bg-muted rounded-full h-1.5 mt-2\">\n            <div \n              className=\"bg-primary h-1.5 rounded-full transition-all duration-300\" \n              style={{ width: `${totalCount > 0 ? (watchedCount / totalCount) * 100 : 0}%` }}\n            />\n          </div>\n        </div>\n\n        <button\n          onClick={handleToggleExpanded}\n          className=\"p-2 rounded-full hover:bg-muted transition-colors\"\n        >\n          <IonIcon \n            icon={isExpanded ? chevronUp : chevronDown} \n            className=\"text-muted-foreground\"\n          />\n        </button>\n      </div>\n\n      {isExpanded && (\n        <div className=\"mt-4 space-y-3 animate-fadeIn\">\n          <h4 className=\"text-foreground font-semibold text-sm px-2 flex items-center gap-2\">\n            <IonIcon icon={play} className=\"text-primary\" />\n            Bölümler ({episodes.length})\n          </h4>\n          \n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n            {episodes.map((episode: MovieLog) => (\n              <div key={episode.id} className=\"ml-4\">\n                <MovieCard \n                  title={episode.title}\n                  date={episode.date}\n                  rating={episode.rating}\n                  review={episode.review}\n                  poster={episode.poster}\n                  onClick={() => {\n                    // Episode detail action - şimdilik boş\n                    console.log('Episode clicked:', episode.title);\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SeriesGroupCard;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/components/ToastNotification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTypeStyles' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentLanguage' is assigned a value but never used.","line":86,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface ToastNotificationProps {\n  isOpen: boolean;\n  onClose: () => void;\n  message?: string;\n  messageKey?: string;\n  messageParams?: Record<string, string>;\n  type?: 'success' | 'info' | 'warning' | 'error';\n  duration?: number;\n}\n\nconst ToastNotification: React.FC<ToastNotificationProps> = ({\n  isOpen,\n  onClose,\n  message,\n  messageKey,\n  messageParams,\n  type = 'success',\n  duration = 3000\n}) => {\n  const { t, i18n } = useTranslation();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setIsVisible(true);\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        setTimeout(onClose, 300); // Animation duration\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen, duration, onClose]);\n\n  if (!isOpen) return null;\n\n  const getTypeStyles = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'info':\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'error':\n        return 'bg-red-50 border-red-200 text-red-800';\n      default:\n        return 'bg-green-50 border-green-200 text-green-800';\n    }\n  };\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return (\n          <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'info':\n        return (\n          <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'warning':\n        return (\n          <svg className=\"w-4 h-4 text-yellow-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'error':\n        return (\n          <svg className=\"w-4 h-4 text-red-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  // Aktif dili al\n  const currentLanguage = i18n.language || 'tr';\n  \n  // Mesajı çevir\n  const translatedMessage = messageKey ? t(messageKey, messageParams) : message;\n\n  return (\n    <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-[99999]\">\n      <div\n        className={`\n          bg-white border border-gray-200 rounded-xl shadow-lg px-4 py-3 max-w-sm mx-4\n          transform transition-all duration-300 ease-out\n          ${isVisible ? 'translate-y-0 opacity-100' : '-translate-y-2 opacity-0'}\n        `}\n      >\n        <div className=\"flex items-center justify-center space-x-2\">\n          {getIcon()}\n          <p className=\"text-sm font-medium text-gray-900 truncate\">\n            {translatedMessage}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToastNotification; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1280,1283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1280,1283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AÇIKLAMA: Bu dosya, uygulamanın tamamında kullanıcı oturumunu (session) ve profil\n// bilgilerini yönetecek olan merkezi state yönetim sistemini (React Context) oluşturur.\n// Bu sayede her sayfadan \"kullanıcı giriş yapmış mı?\" diye kontrol edebiliriz.\n\nimport React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { Session, User } from '@supabase/supabase-js';\n\n// Context'in içinde hangi verilerin ve fonksiyonların bulunacağını tanımlıyoruz.\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  profile: any | null; // Profil verisi için şimdilik 'any' kullanıyoruz.\n  loading: boolean;\n  signInWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\n// React Context'i oluşturuyoruz.\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Provider bileşenini oluşturuyoruz. Bu bileşen, tüm uygulamayı sarmalayarak\n// içindeki tüm bileşenlerin AuthContext verilerine erişmesini sağlayacak.\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<any | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  // Debug için loading state'ini izle\n  useEffect(() => {\n    console.log('🔄 AuthContext: Loading state değişti:', loading);\n  }, [loading]);\n\n  useEffect(() => {\n    console.log('🚀 AuthContext: useEffect başladı');\n    \n    // İlk yükleme sırasında mevcut session'ı kontrol et\n    const getInitialSession = async () => {\n      console.log('🔄 AuthContext: getInitialSession fonksiyonu çağrıldı');\n      \n      try {\n        console.log('🔄 AuthContext: İlk session kontrolü başlıyor...');\n        const { data: { session: initialSession } } = await supabase.auth.getSession();\n        console.log('📦 AuthContext: İlk session alındı:', !!initialSession);\n        setSession(initialSession);\n        const currentUser = initialSession?.user ?? null;\n        console.log('👤 AuthContext: Kullanıcı:', currentUser?.email || 'Yok');\n        setUser(currentUser);\n        \n        if (currentUser) {\n          console.log('🔄 AuthContext: Profil yükleniyor...');\n          await getProfile(currentUser);\n        } else {\n          console.log('❌ AuthContext: Kullanıcı yok, profil temizleniyor');\n          setProfile(null);\n        }\n      } catch (error) {\n        console.error('❌ AuthContext: İlk session kontrolü hatası:', error);\n      } finally {\n        console.log('✅ AuthContext: Loading false yapılıyor');\n        setLoading(false);\n      }\n    };\n\n    // Hemen çalıştır\n    getInitialSession();\n    \n    // Fallback: 5 saniye sonra loading'i false yap\n    const fallbackTimer = setTimeout(() => {\n      console.log('⚠️ AuthContext: Fallback timer tetiklendi, loading false yapılıyor');\n      setLoading(false);\n    }, 5000);\n    \n    return () => {\n      clearTimeout(fallbackTimer);\n    };\n\n    // Supabase'in onAuthStateChange listener'ını kuruyoruz.\n    // Bu, kullanıcı giriş yaptığında, çıkış yaptığında veya oturum yenilendiğinde\n    // otomatik olarak tetiklenir.\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('🔄 AuthContext: onAuthStateChange tetiklendi:', event);\n      console.log('📦 AuthContext: Session:', !!session);\n      setSession(session);\n      const currentUser = session?.user ?? null;\n      console.log('👤 AuthContext: Kullanıcı:', currentUser?.email || 'Yok');\n      setUser(currentUser);\n      \n      // Eğer bir kullanıcı varsa, onun profil bilgilerini veritabanından çek.\n      if (currentUser) {\n        console.log('🔄 AuthContext: Profil yükleniyor...');\n        await getProfile(currentUser);\n      } else {\n        console.log('❌ AuthContext: Kullanıcı yok, profil temizleniyor');\n        setProfile(null); // Kullanıcı yoksa (çıkış yapmışsa) profili temizleniyor.\n      }\n      console.log('✅ AuthContext: Loading false yapılıyor');\n      setLoading(false);\n    });\n\n    // Component DOM'dan kaldırıldığında (unmount) listener'ı temizliyoruz.\n    // Bu, hafıza sızıntılarını önler.\n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Kullanıcının profil bilgilerini 'profiles' tablosundan çeken fonksiyon.\n  const getProfile = async (user: User) => {\n    try {\n      console.log('🔄 AuthContext: getProfile çağrıldı, user ID:', user.id);\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, avatar_url`)\n        .eq('id', user.id)\n        .single();\n\n      console.log('📦 AuthContext: getProfile response:', { data, error, status });\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      if (data) {\n        console.log('✅ AuthContext: Profil bulundu:', data.username);\n        setProfile(data);\n      } else {\n        console.log('❌ AuthContext: Profil bulunamadı');\n        setProfile(null);\n      }\n    } catch (error) {\n      console.error('❌ AuthContext: getProfile hatası:', error);\n      setProfile(null);\n    }\n  };\n\n  // Google ile giriş fonksiyonu\n  const signInWithGoogle = async () => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`\n        }\n      });\n      if (error) {\n        console.error('Error signing in with Google:', error);\n        setLoading(false);\n      }\n      // Başarılı giriş durumunda loading state'i onAuthStateChange'de false yapılacak\n    } catch (error) {\n      console.error('Error signing in with Google:', error);\n      setLoading(false);\n    }\n  };\n\n  // Çıkış fonksiyonu\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n        setLoading(false);\n      }\n      // Başarılı çıkış durumunda loading state'i onAuthStateChange'de false yapılacak\n    } catch (error) {\n      console.error('Error signing out:', error);\n      setLoading(false);\n    }\n  };\n\n  // Context aracılığıyla paylaşılacak olan değerler.\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    signInWithGoogle,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Context'i her seferinde uzun uzun yazmak yerine kolayca kullanmak için\n// bir custom hook oluşturuyoruz.\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/context/NetworkContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[147,249],"text":"type NetworkContextType = NetworkStatus"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, ReactNode } from 'react';\nimport { useNetworkStatus, NetworkStatus } from '../hooks/useNetworkStatus';\n\ninterface NetworkContextType extends NetworkStatus {\n  // Gelecekte ilave fonksiyonlar ekleyebiliriz\n}\n\nconst NetworkContext = createContext<NetworkContextType | undefined>(undefined);\n\nexport const NetworkProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const networkStatus = useNetworkStatus();\n\n  return (\n    <NetworkContext.Provider value={networkStatus}>\n      {children}\n    </NetworkContext.Provider>\n  );\n};\n\nexport const useNetwork = (): NetworkContextType => {\n  const context = useContext(NetworkContext);\n  if (context === undefined) {\n    throw new Error('useNetwork must be used within a NetworkProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/hooks/useNetworkStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3094,3097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3094,3097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Network, ConnectionStatus } from '@capacitor/network';\nimport { Capacitor } from '@capacitor/core';\n\nexport interface NetworkStatus {\n  isConnected: boolean;\n  connectionType: string;\n  isInitializing: boolean;\n}\n\nexport const useNetworkStatus = () => {\n  const [networkStatus, setNetworkStatus] = useState<NetworkStatus>({\n    isConnected: true, // Default olarak true başlatıyoruz\n    connectionType: 'unknown',\n    isInitializing: true,\n  });\n\n  useEffect(() => {\n    const initializeNetworkStatus = async () => {\n      try {\n        if (Capacitor.isNativePlatform()) {\n          // Native platform için Capacitor Network API kullan\n          const status = await Network.getStatus();\n          setNetworkStatus({\n            isConnected: status.connected,\n            connectionType: status.connectionType,\n            isInitializing: false,\n          });\n        } else {\n          // Web platform için navigator.onLine kullan\n          setNetworkStatus({\n            isConnected: navigator.onLine,\n            connectionType: getWebConnectionType(),\n            isInitializing: false,\n          });\n        }\n      } catch (error) {\n        console.error('Network status initialization error:', error);\n        setNetworkStatus(prev => ({ ...prev, isInitializing: false }));\n      }\n    };\n\n    const setupNetworkListener = () => {\n      if (Capacitor.isNativePlatform()) {\n        // Native platform listener\n        let networkListenerHandle: any = null;\n        \n        const addNetworkListener = async () => {\n          networkListenerHandle = await Network.addListener('networkStatusChange', (status: ConnectionStatus) => {\n            setNetworkStatus({\n              isConnected: status.connected,\n              connectionType: status.connectionType,\n              isInitializing: false,\n            });\n          });\n        };\n        \n        addNetworkListener();\n\n        return () => {\n          if (networkListenerHandle) {\n            networkListenerHandle.remove();\n          }\n        };\n      } else {\n        // Web platform listeners\n        const handleOnline = () => {\n          setNetworkStatus(prev => ({\n            ...prev,\n            isConnected: true,\n            connectionType: getWebConnectionType(),\n          }));\n        };\n\n        const handleOffline = () => {\n          setNetworkStatus(prev => ({\n            ...prev,\n            isConnected: false,\n            connectionType: 'none',\n          }));\n        };\n\n        window.addEventListener('online', handleOnline);\n        window.addEventListener('offline', handleOffline);\n\n        return () => {\n          window.removeEventListener('online', handleOnline);\n          window.removeEventListener('offline', handleOffline);\n        };\n      }\n    };\n\n    initializeNetworkStatus();\n    const cleanup = setupNetworkListener();\n\n    return cleanup;\n  }, []);\n\n  // Web platformda connection type'ı tahmin etmeye çalış\n  const getWebConnectionType = (): string => {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      if (connection) {\n        return connection.effectiveType || connection.type || 'unknown';\n      }\n    }\n    return navigator.onLine ? 'unknown' : 'none';\n  };\n\n  return networkStatus;\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/NotificationSettingsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":36,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonToggle,\n  IonButton,\n  IonIcon,\n  IonSpinner,\n  IonToast,\n  IonBackButton,\n  IonButtons,\n} from '@ionic/react';\nimport { \n  notifications, \n  film, \n  tv, \n  star, \n  alertCircle,\n  checkmarkCircle \n} from 'ionicons/icons';\nimport { useTranslation } from 'react-i18next';\nimport { \n  getNotificationSettings, \n  updateNotificationSettings, \n  getPushNotificationToken,\n  NotificationPreferences \n} from '../services/pushNotifications';\n\nconst NotificationSettingsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [preferences, setPreferences] = useState<NotificationPreferences>({\n    enabled: false,\n    newReleases: false,\n    watchlistReminders: false,\n    seasonFinales: false,\n    recommendations: false\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastColor, setToastColor] = useState<'success' | 'danger'>('success');\n  const [fcmToken, setFcmToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadNotificationSettings();\n    loadFCMToken();\n  }, []);\n\n  const loadNotificationSettings = async () => {\n    try {\n      setIsLoading(true);\n      const settings = await getNotificationSettings();\n      setPreferences(settings);\n    } catch (error) {\n      console.error('Failed to load notification settings:', error);\n      setToastMessage('Bildirim ayarları yüklenemedi');\n      setToastColor('danger');\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadFCMToken = async () => {\n    try {\n      const token = await getPushNotificationToken();\n      setFcmToken(token);\n    } catch (error) {\n      console.error('Failed to load FCM token:', error);\n    }\n  };\n\n  const handlePreferenceChange = async (key: keyof NotificationPreferences, value: boolean) => {\n    try {\n      const newPreferences = { ...preferences, [key]: value };\n      \n      // Ana bildirimleri kapatıyorsa, diğerlerini de kapat\n      if (key === 'enabled' && !value) {\n        newPreferences.newReleases = false;\n        newPreferences.watchlistReminders = false;\n        newPreferences.seasonFinales = false;\n        newPreferences.recommendations = false;\n      }\n      \n      setPreferences(newPreferences);\n      \n      setIsSaving(true);\n      await updateNotificationSettings(newPreferences);\n      \n      setToastMessage('Ayarlar başarıyla güncellendi');\n      setToastColor('success');\n      setShowToast(true);\n    } catch (error) {\n      console.error('Failed to update notification preferences:', error);\n      setToastMessage('Ayarlar güncellenemedi');\n      setToastColor('danger');\n      setShowToast(true);\n      \n      // Hata durumunda eski ayarları geri yükle\n      loadNotificationSettings();\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTestNotification = async () => {\n    // Test bildirimi gönderme (geliştirme amaçlı)\n    setToastMessage('Test bildirimi gönderildi (geliştirme modu)');\n    setToastColor('success');\n    setShowToast(true);\n  };\n\n  if (isLoading) {\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonButtons slot=\"start\">\n              <IonBackButton defaultHref=\"/profile\" />\n            </IonButtons>\n            <IonTitle>Bildirim Ayarları</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent className=\"ion-padding\">\n          <div className=\"flex justify-center items-center h-64\">\n            <IonSpinner name=\"circular\" />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/profile\" />\n          </IonButtons>\n          <IonTitle>Bildirim Ayarları</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      \n      <IonContent>\n        <IonList className=\"py-4\">\n          {/* Ana Bildirim Ayarı */}\n          <IonItem>\n            <IonIcon icon={notifications} slot=\"start\" className=\"text-primary\" />\n            <IonLabel>\n              <h2 className=\"font-semibold\">Push Bildirimleri</h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Tüm push bildirimlerini etkinleştir/devre dışı bırak\n              </p>\n            </IonLabel>\n            <IonToggle \n              checked={preferences.enabled} \n              onIonChange={(e) => handlePreferenceChange('enabled', e.detail.checked)}\n              disabled={isSaving}\n            />\n          </IonItem>\n\n          {/* Alt Kategori Ayarları - Sadece ana ayar açıksa göster */}\n          {preferences.enabled && (\n            <>\n              <div className=\"px-4 py-2\">\n                <h3 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wide\">\n                  Bildirim Türleri\n                </h3>\n              </div>\n\n              <IonItem>\n                <IonIcon icon={film} slot=\"start\" className=\"text-blue-500\" />\n                <IonLabel>\n                  <h3>Yeni Çıkan Filmler</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    İlgilendiğiniz türlerde yeni filmler çıktığında bildirim alın\n                  </p>\n                </IonLabel>\n                <IonToggle \n                  checked={preferences.newReleases} \n                  onIonChange={(e) => handlePreferenceChange('newReleases', e.detail.checked)}\n                  disabled={isSaving}\n                />\n              </IonItem>\n\n              <IonItem>\n                <IonIcon icon={alertCircle} slot=\"start\" className=\"text-orange-500\" />\n                <IonLabel>\n                  <h3>İzleme Listesi Hatırlatmaları</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    İzleme listenizdeki içerikler için hatırlatmalar\n                  </p>\n                </IonLabel>\n                <IonToggle \n                  checked={preferences.watchlistReminders} \n                  onIonChange={(e) => handlePreferenceChange('watchlistReminders', e.detail.checked)}\n                  disabled={isSaving}\n                />\n              </IonItem>\n\n              <IonItem>\n                <IonIcon icon={tv} slot=\"start\" className=\"text-purple-500\" />\n                <IonLabel>\n                  <h3>Sezon Finalleri</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Takip ettiğiniz dizilerin sezon finalleri için bildirimler\n                  </p>\n                </IonLabel>\n                <IonToggle \n                  checked={preferences.seasonFinales} \n                  onIonChange={(e) => handlePreferenceChange('seasonFinales', e.detail.checked)}\n                  disabled={isSaving}\n                />\n              </IonItem>\n\n              <IonItem>\n                <IonIcon icon={star} slot=\"start\" className=\"text-yellow-500\" />\n                <IonLabel>\n                  <h3>Öneriler</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    İzleme geçmişinize göre kişiselleştirilmiş öneriler\n                  </p>\n                </IonLabel>\n                <IonToggle \n                  checked={preferences.recommendations} \n                  onIonChange={(e) => handlePreferenceChange('recommendations', e.detail.checked)}\n                  disabled={isSaving}\n                />\n              </IonItem>\n            </>\n          )}\n\n          {/* Durum Bilgisi */}\n          <div className=\"px-4 py-4\">\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n              <h4 className=\"font-semibold mb-2 flex items-center\">\n                <IonIcon \n                  icon={fcmToken ? checkmarkCircle : alertCircle} \n                  className={`mr-2 ${fcmToken ? 'text-green-500' : 'text-orange-500'}`}\n                />\n                Bildirim Durumu\n              </h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                {fcmToken \n                  ? 'Cihaz push bildirimleri almaya hazır' \n                  : 'Push bildirimleri henüz etkinleştirilmedi'\n                }\n              </p>\n              {fcmToken && (\n                <p className=\"text-xs text-gray-500 dark:text-gray-500 font-mono break-all\">\n                  Token: {fcmToken.substring(0, 20)}...\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Test Butonu (geliştirme amaçlı) */}\n          {fcmToken && preferences.enabled && (\n            <div className=\"px-4 py-2\">\n              <IonButton \n                expand=\"block\" \n                fill=\"outline\" \n                onClick={handleTestNotification}\n                className=\"mt-2\"\n              >\n                Test Bildirimi Gönder\n              </IonButton>\n            </div>\n          )}\n        </IonList>\n\n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setShowToast(false)}\n          message={toastMessage}\n          duration={3000}\n          position=\"bottom\"\n          color={toastColor}\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default NotificationSettingsPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/PushNotificationTestPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkmark' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'close' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'warning' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'send' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[962,965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[962,965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonIcon,\n  IonBadge,\n  IonSpinner,\n  IonToast\n} from '@ionic/react';\nimport { \n  notifications, \n  checkmark, \n  close, \n  warning,\n  informationCircle,\n  send\n} from 'ionicons/icons';\nimport { Capacitor } from '@capacitor/core';\nimport { \n  pushNotificationService,\n  getPushNotificationToken,\n  getNotificationSettings,\n  PushNotificationPayload\n} from '../services/pushNotifications';\n\ninterface NotificationTest {\n  id: string;\n  name: string;\n  description: string;\n  payload: PushNotificationPayload;\n}\n\nconst PushNotificationTestPage: React.FC = () => {\n  const [isNative, setIsNative] = useState(false);\n  const [fcmToken, setFcmToken] = useState<string | null>(null);\n  const [preferences, setPreferences] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [testResults, setTestResults] = useState<{ [key: string]: 'success' | 'error' | 'pending' }>({});\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  const notificationTests: NotificationTest[] = [\n    {\n      id: 'new_movie',\n      name: 'Yeni Film Bildirimi',\n      description: 'Yeni çıkan film için bildirim testi',\n      payload: {\n        id: 'test_movie_1',\n        title: 'Yeni Film Çıktı! 🎬',\n        body: 'Avengers: Endgame artık izleme listenizde',\n        type: 'new_release',\n        data: {\n          movieId: '299534',\n          tmdbId: '299534',\n          contentType: 'movie',\n          deepLink: '/movie/299534'\n        }\n      }\n    },\n    {\n      id: 'watchlist_reminder',\n      name: 'İzleme Listesi Hatırlatması',\n      description: 'İzleme listesindeki içerik için hatırlatma',\n      payload: {\n        id: 'test_reminder_1',\n        title: 'İzleme Listesi Hatırlatması 📺',\n        body: 'Stranger Things - 4. sezon henüz izlenmedi',\n        type: 'watchlist_reminder',\n        data: {\n          seriesId: '66732',\n          tmdbId: '66732',\n          contentType: 'tv',\n          deepLink: '/series/66732'\n        }\n      }\n    }\n  ];\n\n  useEffect(() => {\n    initializePage();\n  }, []);\n\n  const initializePage = async () => {\n    setIsLoading(true);\n    setIsNative(Capacitor.isNativePlatform());\n\n    try {\n      // FCM token'ı al\n      const token = await getPushNotificationToken();\n      setFcmToken(token);\n\n      // Notification preferences'ı al\n      const prefs = await getNotificationSettings();\n      setPreferences(prefs);\n    } catch (error) {\n      console.error('Failed to initialize push notification test page:', error);\n      setToastMessage('Sayfa başlatılamadı: ' + error);\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const runNotificationTest = async (test: NotificationTest) => {\n    setTestResults(prev => ({ ...prev, [test.id]: 'pending' }));\n\n    try {\n      // Test notification gönderimi\n      await pushNotificationService.scheduleLocalNotification(test.payload);\n      \n      // Başarılı sonuç simülasyonu\n      setTimeout(() => {\n        setTestResults(prev => ({ ...prev, [test.id]: 'success' }));\n        setToastMessage(`${test.name} başarıyla test edildi!`);\n        setShowToast(true);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Notification test failed:', error);\n      setTestResults(prev => ({ ...prev, [test.id]: 'error' }));\n      setToastMessage(`Test başarısız: ${error}`);\n      setShowToast(true);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Push Notification Test</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent className=\"ion-padding\">\n          <div className=\"flex justify-center items-center h-64\">\n            <IonSpinner name=\"circular\" />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Push Notification Test</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      \n      <IonContent>\n        {/* Platform Durumu */}\n        <IonCard>\n          <IonCardHeader>\n            <IonCardTitle className=\"flex items-center\">\n              <IonIcon icon={informationCircle} className=\"mr-2\" />\n              Platform Durumu\n            </IonCardTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonList>\n              <IonItem>\n                <IonLabel>Platform</IonLabel>\n                <IonBadge color={isNative ? 'success' : 'warning'}>\n                  {isNative ? 'Native (iOS/Android)' : 'Web Browser'}\n                </IonBadge>\n              </IonItem>\n              \n              <IonItem>\n                <IonLabel>FCM Token</IonLabel>\n                <IonBadge color={fcmToken ? 'success' : 'danger'}>\n                  {fcmToken ? 'Mevcut' : 'Yok'}\n                </IonBadge>\n              </IonItem>\n\n              <IonItem>\n                <IonLabel>Bildirimler Etkin</IonLabel>\n                <IonBadge color={preferences?.enabled ? 'success' : 'danger'}>\n                  {preferences?.enabled ? 'Evet' : 'Hayır'}\n                </IonBadge>\n              </IonItem>\n            </IonList>\n\n            {!isNative && (\n              <div className=\"mt-4 p-3 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  ⚠️ Push notifications sadece native platformlarda (iOS/Android) çalışır.\n                </p>\n              </div>\n            )}\n          </IonCardContent>\n        </IonCard>\n\n        {/* Notification Testleri */}\n        <IonCard>\n          <IonCardHeader>\n            <IonCardTitle className=\"flex items-center\">\n              <IonIcon icon={notifications} className=\"mr-2\" />\n              Notification Testleri\n            </IonCardTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonList>\n              {notificationTests.map((test) => (\n                <IonItem key={test.id}>\n                  <IonLabel>\n                    <h3>{test.name}</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {test.description}\n                    </p>\n                  </IonLabel>\n                  \n                  <IonButton \n                    size=\"small\" \n                    fill=\"clear\" \n                    onClick={() => runNotificationTest(test)}\n                    disabled={testResults[test.id] === 'pending'}\n                  >\n                    {testResults[test.id] === 'pending' ? <IonSpinner name=\"circular\" /> : 'Test Et'}\n                  </IonButton>\n                </IonItem>\n              ))}\n            </IonList>\n          </IonCardContent>\n        </IonCard>\n\n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setShowToast(false)}\n          message={toastMessage}\n          duration={3000}\n          position=\"bottom\"\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default PushNotificationTestPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/PushNotificationTestPageNew.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkmark' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'close' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'warning' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'send' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[962,965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[962,965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonIcon,\n  IonBadge,\n  IonSpinner,\n  IonToast\n} from '@ionic/react';\nimport { \n  notifications, \n  checkmark, \n  close, \n  warning,\n  informationCircle,\n  send\n} from 'ionicons/icons';\nimport { Capacitor } from '@capacitor/core';\nimport { \n  pushNotificationService,\n  getPushNotificationToken,\n  getNotificationSettings,\n  PushNotificationPayload\n} from '../services/pushNotifications';\n\ninterface NotificationTest {\n  id: string;\n  name: string;\n  description: string;\n  payload: PushNotificationPayload;\n}\n\nconst PushNotificationTestPage: React.FC = () => {\n  const [isNative, setIsNative] = useState(false);\n  const [fcmToken, setFcmToken] = useState<string | null>(null);\n  const [preferences, setPreferences] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [testResults, setTestResults] = useState<{ [key: string]: 'success' | 'error' | 'pending' }>({});\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  const notificationTests: NotificationTest[] = [\n    {\n      id: 'new_movie',\n      name: 'Yeni Film Bildirimi',\n      description: 'Yeni çıkan film için bildirim testi',\n      payload: {\n        id: 'test_movie_1',\n        title: 'Yeni Film Çıktı! 🎬',\n        body: 'Avengers: Endgame artık izleme listenizde',\n        type: 'new_release',\n        data: {\n          movieId: '299534',\n          tmdbId: '299534',\n          contentType: 'movie',\n          deepLink: '/movie/299534'\n        }\n      }\n    },\n    {\n      id: 'watchlist_reminder',\n      name: 'İzleme Listesi Hatırlatması',\n      description: 'İzleme listesindeki içerik için hatırlatma',\n      payload: {\n        id: 'test_reminder_1',\n        title: 'İzleme Listesi Hatırlatması 📺',\n        body: 'Stranger Things - 4. sezon henüz izlenmedi',\n        type: 'watchlist_reminder',\n        data: {\n          seriesId: '66732',\n          tmdbId: '66732',\n          contentType: 'tv',\n          deepLink: '/series/66732'\n        }\n      }\n    }\n  ];\n\n  useEffect(() => {\n    initializePage();\n  }, []);\n\n  const initializePage = async () => {\n    setIsLoading(true);\n    setIsNative(Capacitor.isNativePlatform());\n\n    try {\n      // FCM token'ı al\n      const token = await getPushNotificationToken();\n      setFcmToken(token);\n\n      // Notification preferences'ı al\n      const prefs = await getNotificationSettings();\n      setPreferences(prefs);\n    } catch (error) {\n      console.error('Failed to initialize push notification test page:', error);\n      setToastMessage('Sayfa başlatılamadı: ' + error);\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const runNotificationTest = async (test: NotificationTest) => {\n    setTestResults(prev => ({ ...prev, [test.id]: 'pending' }));\n\n    try {\n      // Test notification gönderimi\n      await pushNotificationService.scheduleLocalNotification(test.payload);\n      \n      // Başarılı sonuç simülasyonu\n      setTimeout(() => {\n        setTestResults(prev => ({ ...prev, [test.id]: 'success' }));\n        setToastMessage(`${test.name} başarıyla test edildi!`);\n        setShowToast(true);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Notification test failed:', error);\n      setTestResults(prev => ({ ...prev, [test.id]: 'error' }));\n      setToastMessage(`Test başarısız: ${error}`);\n      setShowToast(true);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Push Notification Test</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent className=\"ion-padding\">\n          <div className=\"flex justify-center items-center h-64\">\n            <IonSpinner name=\"circular\" />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Push Notification Test</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      \n      <IonContent>\n        {/* Platform Durumu */}\n        <IonCard>\n          <IonCardHeader>\n            <IonCardTitle className=\"flex items-center\">\n              <IonIcon icon={informationCircle} className=\"mr-2\" />\n              Platform Durumu\n            </IonCardTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonList>\n              <IonItem>\n                <IonLabel>Platform</IonLabel>\n                <IonBadge color={isNative ? 'success' : 'warning'}>\n                  {isNative ? 'Native (iOS/Android)' : 'Web Browser'}\n                </IonBadge>\n              </IonItem>\n              \n              <IonItem>\n                <IonLabel>FCM Token</IonLabel>\n                <IonBadge color={fcmToken ? 'success' : 'danger'}>\n                  {fcmToken ? 'Mevcut' : 'Yok'}\n                </IonBadge>\n              </IonItem>\n\n              <IonItem>\n                <IonLabel>Bildirimler Etkin</IonLabel>\n                <IonBadge color={preferences?.enabled ? 'success' : 'danger'}>\n                  {preferences?.enabled ? 'Evet' : 'Hayır'}\n                </IonBadge>\n              </IonItem>\n            </IonList>\n\n            {!isNative && (\n              <div className=\"mt-4 p-3 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  ⚠️ Push notifications sadece native platformlarda (iOS/Android) çalışır.\n                </p>\n              </div>\n            )}\n          </IonCardContent>\n        </IonCard>\n\n        {/* Notification Testleri */}\n        <IonCard>\n          <IonCardHeader>\n            <IonCardTitle className=\"flex items-center\">\n              <IonIcon icon={notifications} className=\"mr-2\" />\n              Notification Testleri\n            </IonCardTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonList>\n              {notificationTests.map((test) => (\n                <IonItem key={test.id}>\n                  <IonLabel>\n                    <h3>{test.name}</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {test.description}\n                    </p>\n                  </IonLabel>\n                  \n                  <IonButton \n                    size=\"small\" \n                    fill=\"clear\" \n                    onClick={() => runNotificationTest(test)}\n                    disabled={testResults[test.id] === 'pending'}\n                  >\n                    {testResults[test.id] === 'pending' ? <IonSpinner name=\"circular\" /> : 'Test Et'}\n                  </IonButton>\n                </IonItem>\n              ))}\n            </IonList>\n          </IonCardContent>\n        </IonCard>\n\n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setShowToast(false)}\n          message={toastMessage}\n          duration={3000}\n          position=\"bottom\"\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default PushNotificationTestPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/home.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useModal' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IonContent, IonPage } from '@ionic/react';\nimport { useTranslation } from 'react-i18next';\nimport TopHeaderBar from '../components/TopHeaderBar';\nimport BottomNavBar from '../components/BottomNavBar';\nimport FabAddButton from '../components/FabAddButton';\nimport FilterModal from '../components/FilterModal';\nimport DetailViewModal from '../components/DetailViewModal';  // 🎯 YENİ IMPORT\nimport { NetworkStatusIndicator } from '../components/NetworkIndicator';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport TabSegment from '../components/TabSegment';\nimport LocalStorageService, { MovieLog } from '../services/localStorage';\nimport { useModal } from '../context/ModalContext';\n\n// FilterOptions type'ını tanımla\nexport type FilterOptions = {\n  contentType: 'all' | 'movie' | 'tv';\n  sortBy: 'date_desc' | 'rating_desc' | 'alpha_asc';\n};\n\n// movies array ve mock MovieCard renderlarını kaldır\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState<'watched' | 'watchlist'>('watched');\n  const [movieLogs, setMovieLogs] = useState<MovieLog[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // 🎯 YENİ: DetailViewModal state'leri\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<{\n    itemId: string;\n    itemType: 'movie' | 'tv';\n  } | null>(null);\n  \n  // Filtre modalı state'leri\n  const [isFilterModalOpen, setFilterModalOpen] = useState(false);\n  const [filters, setFilters] = useState<FilterOptions>({\n    contentType: 'all',  // 'all', 'movie', 'tv'\n    sortBy: 'date_desc'  // 'date_desc', 'rating_desc', 'alpha_asc'\n  });\n\n  // 🎯 YENİ: Poster Kütüphanesi için Veri İşleme\n  const posterLibraryData = useMemo(() => {\n    // Aktif tab'a göre filtreleme\n    const filteredLogs = movieLogs.filter(log => log.type === activeTab);\n    \n    // 📊 VERI GRUPLAMA - Diziler\n    const seriesGroups = filteredLogs\n      .filter(log => log.contentType === 'tv')\n      .reduce((acc, log) => {\n        const seriesId = log.seriesId || log.tmdbId?.toString() || 'unknown';\n        if (!acc[seriesId]) {\n          acc[seriesId] = {\n            type: 'series' as const,\n            id: seriesId,\n            title: log.seriesTitle || log.title,\n            poster: log.seriesPoster || log.poster,\n            episodes: []\n          };\n        }\n        acc[seriesId].episodes.push(log);\n        return acc;\n      }, {} as Record<string, {\n        type: 'series';\n        id: string;\n        title: string;\n        poster: string;\n        episodes: MovieLog[];\n      }>);\n    \n    // 🎬 VERI GRUPLAMA - Filmler\n    const movies = filteredLogs\n      .filter(log => log.contentType === 'movie')\n      .map(log => ({\n        type: 'movie' as const,\n        id: log.id,\n        title: log.title,\n        poster: log.poster,\n        movieData: log\n      }));\n    \n    // 🎯 BİRLEŞİK POSTER KÜTÜPHANESİ\n    const combinedLibrary = [\n      ...Object.values(seriesGroups),\n      ...movies\n    ];\n    \n    // Filtre uygulama\n    let filtered = combinedLibrary;\n    if (filters.contentType !== 'all') {\n      filtered = filtered.filter(item => \n        filters.contentType === 'movie' ? item.type === 'movie' : item.type === 'series'\n      );\n    }\n    \n    // Sıralama\n    filtered.sort((a, b) => {\n      switch (filters.sortBy) {\n        case 'alpha_asc':\n          return a.title.localeCompare(b.title);\n        case 'rating_desc':\n          // TODO: Rating sıralaması eklenebilir\n          return 0;\n        case 'date_desc':\n        default:\n          return 0; // Şimdilik tarih sıralaması yok\n      }\n    });\n    \n    return filtered;\n  }, [movieLogs, activeTab, filters]);\n\n  // 🎯 YENİ: Poster Tıklama Handler'ı\n  const handlePosterClick = (item: typeof posterLibraryData[0]) => {\n    if (item.type === 'movie') {\n      setSelectedItem({\n        itemId: item.id,\n        itemType: 'movie'\n      });\n    } else {\n      setSelectedItem({\n        itemId: item.id,\n        itemType: 'tv'\n      });\n    }\n    setIsDetailModalOpen(true);\n  };\n\n  // Modal'dan gelen filtreleri ana state'e uygulayacak fonksiyon\n  const handleApplyFilters = (newFilters: FilterOptions) => {\n    setFilters(newFilters);\n    setFilterModalOpen(false); // Filtreleri uyguladıktan sonra modalı kapat\n  };\n\n  // Component mount olduğunda localStorage'dan verileri yükle\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Movie logs'ları yükle\n        const savedLogs = LocalStorageService.getMovieLogs();\n        setMovieLogs(savedLogs);\n\n        // Son aktif tab'ı yükle\n        const lastActiveTab = LocalStorageService.getLastActiveTab();\n        setActiveTab(lastActiveTab);\n      } catch (error) {\n        console.error('Error loading data from localStorage:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Tab değiştiğinde localStorage'a kaydet\n  const handleTabChange = (tab: 'watched' | 'watchlist') => {\n    setActiveTab(tab);\n    LocalStorageService.saveLastActiveTab(tab);\n  };\n\n  // Yeni film log'u eklendiğinde\n  const handleAddMovieLog = (logData: Omit<MovieLog, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      const newLog = LocalStorageService.saveMovieLog(logData);\n      setMovieLogs(prev => [...prev, newLog]);\n      // Profil istatistiklerini güncelle\n      LocalStorageService.updateProfileStats();\n    } catch (error) {\n      console.error('Error adding movie log:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <IonPage className=\"bg-background\">\n        <IonContent fullscreen className=\"bg-background\">\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-foreground\">Yükleniyor...</div>\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n  return (\n    <IonPage className=\"bg-background\">\n      <IonContent fullscreen className=\"bg-background relative\" scrollEvents={true}>\n        <div className=\"bg-background min-h-screen flex flex-col items-center\">\n          <TopHeaderBar />\n          {/* Tab Segment + Filter */}\n          <div className=\"relative w-full pt-6 pb-5 px-4\">\n            {/* TabSegment centered absolutely */}\n            <div className=\"absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n              <TabSegment activeTab={activeTab} onTabChange={handleTabChange} />\n            </div>\n            {/* Filter button and Network indicator positioned on the right */}\n            <div className=\"flex items-center gap-2\">\n              <NetworkStatusIndicator showWhenOnline={false} />\n              <button \n                className=\"w-7 h-7 rounded-full bg-card border border-border shadow-sm flex items-center justify-center transition-colors p-0\" \n                aria-label=\"Filter\"\n                onClick={() => setFilterModalOpen(true)}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 18 18\" strokeWidth={2} className=\"w-[18px] h-[18px] stroke-primary\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 3.75h13.5m-12.375 0A1.125 1.125 0 0 0 2.25 4.875v1.687c0 .311.126.608.33.826l4.162 4.426c.21.224.33.525.33.826v2.36a1.125 1.125 0 0 0 1.125 1.125h2.25a1.125 1.125 0 0 0 1.125-1.125v-2.36c0-.301.12-.602.33-.826l4.162-4.426A1.125 1.125 0 0 0 15.75 6.562V4.875a1.125 1.125 0 0 0-1.125-1.125H2.25z\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n          {/* 🎯 YENİ POSTER KÜTÜPHANESİ LAYOUT */}\n          <div className=\"pb-28 w-full px-4\">\n            {posterLibraryData.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">\n                  {activeTab === 'watched' ? t('empty_states.no_watched_content') : t('empty_states.empty_watchlist')}\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3\">\n                {posterLibraryData.map((item, index) => (\n                  <div\n                    key={`${item.type}-${item.id}-${index}`}\n                    className=\"relative aspect-[2/3] rounded-lg overflow-hidden cursor-pointer group\"\n                    onClick={() => handlePosterClick(item)}\n                  >\n                    {/* Poster Image */}\n                    <img\n                      src={item.poster || '/placeholder-poster.jpg'}\n                      alt={item.title}\n                      className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.src = '/placeholder-poster.jpg';\n                      }}\n                    />\n                    \n                    {/* Overlay for series episode count */}\n                    {item.type === 'series' && (\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2\">\n                        <p className=\"text-white text-xs font-medium\">\n                          {item.episodes.length} bölüm\n                        </p>\n                      </div>\n                    )}\n                    \n                    {/* Hover overlay with title */}\n                    <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-end\">\n                      <div className=\"p-3 w-full\">\n                        <h3 className=\"text-white text-sm font-medium line-clamp-2\">\n                          {item.title}\n                        </h3>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <FabAddButton onAddMovieLog={handleAddMovieLog} />\n          <BottomNavBar />\n        </div>\n      </IonContent>\n      \n      {/* Filtre Modalı */}\n      <FilterModal \n        isOpen={isFilterModalOpen} \n        onDidDismiss={() => setFilterModalOpen(false)}\n        initialFilters={filters}\n        onApplyFilters={handleApplyFilters}\n      />\n      \n      {/* 🎯 YENİ: DetailViewModal */}\n      <DetailViewModal\n        isOpen={isDetailModalOpen}\n        onClose={() => setIsDetailModalOpen(false)}\n        itemId={selectedItem?.itemId || null}\n        itemType={selectedItem?.itemType || null}\n      />\n    </IonPage>\n  );\n};\n\nexport default Home;","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/lists.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":33,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":33,"endColumn":16,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1108,1146],"text":"type Liste = FilmListesi"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { IonContent, IonPage } from '@ionic/react';\nimport { useTranslation } from 'react-i18next';\nimport TopHeaderBar from '../components/TopHeaderBar';\nimport BottomNavBar from '../components/BottomNavBar';\nimport MovieDetailModal from '../components/MovieDetailModal';\nimport SkeletonLoader from '../components/SkeletonLoader';\nimport { searchMovies } from '../services/tmdb';\nimport styles from './lists.module.css';\n\n// Film tipi tanımları\ninterface Film {\n  sira: number;\n  filmAdi: string;\n  yil: number | string; // Bazı listelerde string olabilir\n  yonetmen?: string; // Bazı listelerde opsiyonel\n  imdbPuani?: number; // Bazı listelerde opsiyonel\n  kisaAciklama?: string; // Bazı listelerde opsiyonel\n  kazandigiYil?: number; // Oscar vb listeler için\n  ulke?: string; // Ülke bazlı listeler için\n  tmdbId?: number; // API'den gelen id\n  posterPath?: string; // Poster URL\n}\n\ninterface FilmListesi {\n  listeAdi: string;\n  aciklama: string;\n  filmSayisi: number;\n  filmler: Film[];\n}\n\n// Top-level liste interface (gereksiz duplicate kaldırıldı)\ninterface Liste extends FilmListesi {}\n\ninterface TranslationFunction {\n  (key: string): string;\n}\n\n// Film listesi verileri\nconst getFilmListeleri = (t: TranslationFunction) => ({\n  \"filmListeleri\": [\n    {\n      \"listeAdi\": t('lists.film_lists.imdb_top_10.title'),\n      \"aciklama\": t('lists.film_lists.imdb_top_10.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"The Shawshank Redemption\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Frank Darabont\",\n          \"imdbPuani\": 9.3,\n          \"kisaAciklama\": \"Umut, dostluk ve hayatta kalma üzerine zamansız bir başyapıt.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"The Godfather\",\n          \"yil\": 1972,\n          \"yonetmen\": \"Francis Ford Coppola\",\n          \"imdbPuani\": 9.2,\n          \"kisaAciklama\": \"Bir suç ailesinin epik öyküsü ve sinema tarihinin en etkili gangster filmi.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"The Dark Knight\",\n          \"yil\": 2008,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 9.0,\n          \"kisaAciklama\": \"Süper kahraman türünü yeniden tanımlayan, anarşi ve düzen üzerine karanlık bir masal.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"12 Angry Men\",\n          \"yil\": 1957,\n          \"yonetmen\": \"Sidney Lumet\",\n          \"imdbPuani\": 9.0,\n          \"kisaAciklama\": \"Tek bir odada geçen, adalet ve önyargı kavramlarını sorgulatan bir mahkeme draması.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Schindler's List\",\n          \"yil\": 1993,\n          \"yonetmen\": \"Steven Spielberg\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"İnsanlığın en karanlık anlarında bile iyiliğin nasıl parlayabildiğini gösteren dokunaklı bir yapım.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"The Lord of the Rings: The Return of the King\",\n          \"yil\": 2003,\n          \"yonetmen\": \"Peter Jackson\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"Bir fantastik destanın görkemli ve tatmin edici finali.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Pulp Fiction\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Quentin Tarantino\",\n          \"imdbPuani\": 8.9,\n          \"kisaAciklama\": \"Doğrusal olmayan anlatımı ve unutulmaz diyaloglarıyla modern sinemayı etkileyen bir kült film.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Forrest Gump\",\n          \"yil\": 1994,\n          \"yonetmen\": \"Robert Zemeckis\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"20. yüzyıl Amerikan tarihine saf bir kalple tanıklık eden bir adamın hayat yolculuğu.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Fight Club\",\n          \"yil\": 1999,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"Tüketim kültürüne ve modern insanın yabancılaşmasına sert bir eleştiri.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Inception\",\n          \"yil\": 2010,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.8,\n          \"kisaAciklama\": \"Rüyaların katmanlı dünyasında geçen, akıl almaz bir soygun hikayesi.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.oscar_winners.title'),\n      \"aciklama\": t('lists.film_lists.oscar_winners.description'),\n      \"filmSayisi\": 11,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Oppenheimer\",\n          \"yil\": 2023,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"Atom bombasının yaratıcısı J. Robert Oppenheimer'ın hayatını anlatan epik biyografik drama.\",\n          \"kazandigiYil\": 2024\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Everything Everywhere All at Once\",\n          \"yil\": 2022,\n          \"yonetmen\": \"Daniel Kwan, Daniel Scheinert\",\n          \"imdbPuani\": 7.8,\n          \"kisaAciklama\": \"Çoklu evrenler arasında geçen, aile bağlarını konu alan bilim kurgu komedi-drama.\",\n          \"kazandigiYil\": 2023\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"CODA\",\n          \"yil\": 2021,\n          \"yonetmen\": \"Sian Heder\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Sağır bir ailenin tek duyabilen üyesi olan genç bir kızın müzik tutkusunu anlatan drama.\",\n          \"kazandigiYil\": 2022\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Nomadland\",\n          \"yil\": 2020,\n          \"yonetmen\": \"Chloé Zhao\",\n          \"imdbPuani\": 7.4,\n          \"kisaAciklama\": \"Amerika'nın batısında göçebe yaşam süren bir kadının hikayesini anlatan drama.\",\n          \"kazandigiYil\": 2021\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Parasite\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Bong Joon-ho\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"Sosyal sınıflar arasındaki uçurumu konu alan, sürpriz dönüşlerle dolu Kore filmi.\",\n          \"kazandigiYil\": 2020\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"Green Book\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Peter Farrelly\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"1960'larda ırkçılığın hüküm sürdüğü Amerika'da gelişen dostluk hikayesi.\",\n          \"kazandigiYil\": 2019\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"The Shape of Water\",\n          \"yil\": 2017,\n          \"yonetmen\": \"Guillermo del Toro\",\n          \"imdbPuani\": 7.3,\n          \"kisaAciklama\": \"Soğuk Savaş döneminde geçen, insan ve yaratık arasında gelişen aşk hikayesi.\",\n          \"kazandigiYil\": 2018\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Moonlight\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Barry Jenkins\",\n          \"imdbPuani\": 7.4,\n          \"kisaAciklama\": \"Afro-Amerikan bir gencin kimlik arayışını anlatan üç bölümlük drama.\",\n          \"kazandigiYil\": 2017\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Spotlight\",\n          \"yil\": 2015,\n          \"yonetmen\": \"Tom McCarthy\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Boston Globe gazetesinin Katolik Kilisesi'ndeki cinsel istismar skandalını ortaya çıkarma süreci.\",\n          \"kazandigiYil\": 2016\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Birdman\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Alejandro G. Iñárritu\",\n          \"imdbPuani\": 7.7,\n          \"kisaAciklama\": \"Bir zamanların süper kahraman oyuncusunun Broadway'de yeniden doğuş mücadelesi.\",\n          \"kazandigiYil\": 2015\n        },\n        {\n          \"sira\": 11,\n          \"filmAdi\": \"12 Years a Slave\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Steve McQueen\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Özgür bir adamın köleleştirilmesi ve 12 yıl sonra özgürlüğüne kavuşma hikayesi.\",\n          \"kazandigiYil\": 2014\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.mind_bending_scifi.title'),\n      \"aciklama\": t('lists.film_lists.mind_bending_scifi.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Arrival\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"Dilbilimin ve zaman algısının sınırlarını zorlayan, duygusal ve zeki bir ilk temas hikayesi.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Blade Runner 2049\",\n          \"yil\": 2017,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Orijinal filmin mirasını taşıyan, görsel olarak büyüleyici bir neo-noir ve varoluşsal bir sorgulama.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"Interstellar\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.6,\n          \"kisaAciklama\": \"İnsanlığın geleceği için uzayın derinliklerine yapılan, bilim ve sevgi dolu bir yolculuk.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Ex Machina\",\n          \"yil\": 2014,\n          \"yonetmen\": \"Alex Garland\",\n          \"imdbPuani\": 7.7,\n          \"kisaAciklama\": \"Yapay zekanın bilinç ve manipülasyon yeteneklerini sorgulatan klostrofobik bir gerilim.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Her\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Spike Jonze\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Yalnız bir adamın bir işletim sistemine aşık olmasını anlatan, teknoloji ve ilişkilere dair melankolik bir bakış.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"District 9\",\n          \"yil\": 2009,\n          \"yonetmen\": \"Neill Blomkamp\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"Apartheid ve yabancı düşmanlığına dair güçlü bir alegori sunan, belgesel tarzında bir bilim kurgu.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Children of Men\",\n          \"yil\": 2006,\n          \"yonetmen\": \"Alfonso Cuarón\",\n          \"imdbPuani\": 7.9,\n          \"kisaAciklama\": \"İnsanlığın soyunun tükendiği bir dünyada, umudun peşindeki nefes kesen bir kaçış öyküsü.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Dune: Part One & Two\",\n          \"yil\": \"2021 & 2024\",\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.0,\n          \"kisaAciklama\": \"Frank Herbert'in kült romanından uyarlanan, epik ölçekte ve görsel olarak baş döndürücü bir destan.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Source Code\",\n          \"yil\": 2011,\n          \"yonetmen\": \"Duncan Jones\",\n          \"imdbPuani\": 7.5,\n          \"kisaAciklama\": \"Bir askerin, bir tren patlamasını önlemek için sürekli olarak 8 dakikayı yeniden yaşadığı tempolu bir gerilim.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"Annihilation\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Alex Garland\",\n          \"imdbPuani\": 6.8,\n          \"kisaAciklama\": \"Gizemli bir bölgeye giren bir grup bilim insanının karşılaştığı, hem güzel hem de korkutucu olaylar.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.psychological_thrillers.title'),\n      \"aciklama\": t('lists.film_lists.psychological_thrillers.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"The Prestige\",\n          \"yil\": 2006,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"İki sihirbazın takıntıya dönüşen rekabetini anlatan, zekice kurgulanmış bir hikaye.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Shutter Island\",\n          \"yil\": 2010,\n          \"yonetmen\": \"Martin Scorsese\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"Bir akıl hastanesindeki kayıp vakasını araştıran dedektifin giderek kendi akıl sağlığını sorgulaması.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"The Sixth Sense\",\n          \"yil\": 1999,\n          \"yonetmen\": \"M. Night Shyamalan\",\n          \"imdbPuani\": 8.2,\n          \"kisaAciklama\": \"Sinema tarihinin en ikonik finaline sahip, ölüleri gören bir çocuk ve psikoloğunun hikayesi.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Oldeuboi (Oldboy)\",\n          \"yil\": 2003,\n          \"yonetmen\": \"Park Chan-wook\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"15 yıl sebepsizce hapsedilen bir adamın intikam arayışını anlatan, şok edici ve stilize bir film.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"The Usual Suspects\",\n          \"yil\": 1995,\n          \"yonetmen\": \"Bryan Singer\",\n          \"imdbPuani\": 8.5,\n          \"kisaAciklama\": \"Polise ifade veren bir dolandırıcının anlattığı karmaşık soygun hikayesi ve efsanevi finali.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"Memento\",\n          \"yil\": 2000,\n          \"yonetmen\": \"Christopher Nolan\",\n          \"imdbPuani\": 8.4,\n          \"kisaAciklama\": \"Kısa süreli hafıza kaybı yaşayan bir adamın, karısının katilini bulma çabasını tersten anlatan bir yapım.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Gone Girl\",\n          \"yil\": 2014,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Karısı aniden ortadan kaybolan bir adamın, medyanın ve polisin hedefi haline gelmesini konu alan bir gerilim.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Prisoners\",\n          \"yil\": 2013,\n          \"yonetmen\": \"Denis Villeneuve\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Kızı kaçırılan bir babanın, adaleti kendi sağlamaya çalışmasını anlatan karanlık ve sürükleyici bir film.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Se7en\",\n          \"yil\": 1995,\n          \"yonetmen\": \"David Fincher\",\n          \"imdbPuani\": 8.6,\n          \"kisaAciklama\": \"Yedi ölümcül günahı temel alan bir dizi cinayeti araştıran iki dedektifin kasvetli hikayesi.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"The Handmaiden\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Park Chan-wook\",\n          \"imdbPuani\": 8.1,\n          \"kisaAciklama\": \"Japon işgali altındaki Kore'de geçen, aldatma ve tutku dolu, katmanlı bir intikam öyküsü.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.tarantino_filmography.title'),\n      \"aciklama\": t('lists.film_lists.tarantino_filmography.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Pulp Fiction\", \"yil\": 1994 },\n        { \"sira\": 2, \"filmAdi\": \"Reservoir Dogs\", \"yil\": 1992 },\n        { \"sira\": 3, \"filmAdi\": \"Inglourious Basterds\", \"yil\": 2009 },\n        { \"sira\": 4, \"filmAdi\": \"Django Unchained\", \"yil\": 2012 },\n        { \"sira\": 5, \"filmAdi\": \"Kill Bill: Vol. 1\", \"yil\": 2003 },\n        { \"sira\": 6, \"filmAdi\": \"Once Upon a Time in Hollywood\", \"yil\": 2019 },\n        { \"sira\": 7, \"filmAdi\": \"The Hateful Eight\", \"yil\": 2015 },\n        { \"sira\": 8, \"filmAdi\": \"Jackie Brown\", \"yil\": 1997 },\n        { \"sira\": 9, \"filmAdi\": \"Kill Bill: Vol. 2\", \"yil\": 2004 },\n        { \"sira\": 10, \"filmAdi\": \"Death Proof\", \"yil\": 2007 }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.adult_animation.title'),\n      \"aciklama\": t('lists.film_lists.adult_animation.description'),\n      \"filmSayisi\": 11,\n      \"filmler\": [\n        {\n          \"sira\": 1,\n          \"filmAdi\": \"Spirited Away\",\n          \"yil\": 2001,\n          \"yonetmen\": \"Hayao Miyazaki\",\n          \"kisaAciklama\": \"Ruhların dünyasında kaybolan bir kızın büyüme hikayesini anlatan, Oscar ödüllü bir fantezi.\"\n        },\n        {\n          \"sira\": 2,\n          \"filmAdi\": \"Spider-Man: Into the Spider-Verse\",\n          \"yil\": 2018,\n          \"yonetmen\": \"Bob Persichetti, Peter Ramsey, Rodney Rothman\",\n          \"kisaAciklama\": \"Çizgi roman estetiğini sinemaya taşıyan, görsel olarak devrim niteliğinde bir süper kahraman filmi.\"\n        },\n        {\n          \"sira\": 3,\n          \"filmAdi\": \"Grave of the Fireflies\",\n          \"yil\": 1988,\n          \"yonetmen\": \"Isao Takahata\",\n          \"kisaAciklama\": \"2. Dünya Savaşı'nın sonlarında hayatta kalmaya çalışan iki kardeşin yürek burkan dramı.\"\n        },\n        {\n          \"sira\": 4,\n          \"filmAdi\": \"Princess Mononoke\",\n          \"yil\": 1997,\n          \"yonetmen\": \"Hayao Miyazaki\",\n          \"kisaAciklama\": \"Doğa ve insanlık arasındaki savaşı konu alan, epik ve karmaşık bir macera.\"\n        },\n        {\n          \"sira\": 5,\n          \"filmAdi\": \"Persepolis\",\n          \"yil\": 2007,\n          \"yonetmen\": \"Marjane Satrapi, Vincent Paronnaud\",\n          \"kisaAciklama\": \"İran İslam Devrimi sırasında büyüyen bir kızın otobiyografik hikayesini anlatan dokunaklı bir yapım.\"\n        },\n        {\n          \"sira\": 6,\n          \"filmAdi\": \"WALL-E\",\n          \"yil\": 2008,\n          \"yonetmen\": \"Andrew Stanton\",\n          \"kisaAciklama\": \"Diyalogsuz ilk yarısıyla sinema dersi veren, çevre bilinci ve aşk üzerine bir Pixar klasiği.\"\n        },\n        {\n          \"sira\": 7,\n          \"filmAdi\": \"Akira\",\n          \"yil\": 1988,\n          \"yonetmen\": \"Katsuhiro Otomo\",\n          \"kisaAciklama\": \"Siberpunk türünün temel taşlarından olan, distopik bir gelecekte geçen bir aksiyon ve gizem filmi.\"\n        },\n        {\n          \"sira\": 8,\n          \"filmAdi\": \"Perfect Blue\",\n          \"yil\": 1997,\n          \"yonetmen\": \"Satoshi Kon\",\n          \"kisaAciklama\": \"Şöhret, kimlik ve gerçeklik algısının kayboluşunu anlatan gerilim dolu bir psikolojik anime.\"\n        },\n        {\n          \"sira\": 9,\n          \"filmAdi\": \"Klaus\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Sergio Pablos\",\n          \"kisaAciklama\": \"Noel Baba efsanesine taze ve sıcak bir başlangıç hikayesi sunan, el çizimi estetiğiyle büyüleyen bir film.\"\n        },\n        {\n          \"sira\": 10,\n          \"filmAdi\": \"I Lost My Body\",\n          \"yil\": 2019,\n          \"yonetmen\": \"Jérémy Clapin\",\n          \"kisaAciklama\": \"Sahibini arayan kesik bir elin Paris'teki yolculuğunu anlatan, özgün ve melankolik bir Fransız animasyonu.\"\n        },\n        {\n          \"sira\": 11,\n          \"filmAdi\": \"Your Name.\",\n          \"yil\": 2016,\n          \"yonetmen\": \"Makoto Shinkai\",\n          \"kisaAciklama\": \"Bedenleri yer değiştiren iki gencin kader ve zamanla iç içe geçen romantik hikayesi.\"\n        }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.world_cinema.title'),\n      \"aciklama\": t('lists.film_lists.world_cinema.description'),\n      \"filmSayisi\": 12,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Parasite\", \"yil\": 2019, \"ulke\": \"Güney Kore\" },\n        { \"sira\": 2, \"filmAdi\": \"Cidade de Deus (City of God)\", \"yil\": 2002, \"ulke\": \"Brezilya\" },\n        { \"sira\": 3, \"filmAdi\": \"La vita è bella (Life Is Beautiful)\", \"yil\": 1997, \"ulke\": \"İtalya\" },\n        { \"sira\": 4, \"filmAdi\": \"Le Fabuleux Destin d'Amélie Poulain (Amélie)\", \"yil\": 2001, \"ulke\": \"Fransa\" },\n        { \"sira\": 5, \"filmAdi\": \"Das Leben der Anderen (The Lives of Others)\", \"yil\": 2006, \"ulke\": \"Almanya\" },\n        { \"sira\": 6, \"filmAdi\": \"Jodaeiye Nader az Simin (A Separation)\", \"yil\": 2011, \"ulke\": \"İran\" },\n        { \"sira\": 7, \"filmAdi\": \"El secreto de sus ojos (The Secret in Their Eyes)\", \"yil\": 2009, \"ulke\": \"Arjantin\" },\n        { \"sira\": 8, \"filmAdi\": \"Crouching Tiger, Hidden Dragon\", \"yil\": 2000, \"ulke\": \"Tayvan\" },\n        { \"sira\": 9, \"filmAdi\": \"Roma\", \"yil\": 2018, \"ulke\": \"Meksika\" },\n        { \"sira\": 10, \"filmAdi\": \"Jagten (The Hunt)\", \"yil\": 2012, \"ulke\": \"Danimarka\" },\n        { \"sira\": 11, \"filmAdi\": \"Yip Man (Ip Man)\", \"yil\": 2008, \"ulke\": \"Hong Kong\" },\n        { \"sira\": 12, \"filmAdi\": \"Kış Uykusu\", \"yil\": 2014, \"ulke\": \"Türkiye\" }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.coen_brothers.title'),\n      \"aciklama\": t('lists.film_lists.coen_brothers.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"No Country for Old Men\", \"yil\": 2007 },\n        { \"sira\": 2, \"filmAdi\": \"Fargo\", \"yil\": 1996 },\n        { \"sira\": 3, \"filmAdi\": \"The Big Lebowski\", \"yil\": 1998 },\n        { \"sira\": 4, \"filmAdi\": \"O Brother, Where Art Thou?\", \"yil\": 2000 },\n        { \"sira\": 5, \"filmAdi\": \"A Serious Man\", \"yil\": 2009 },\n        { \"sira\": 6, \"filmAdi\": \"Inside Llewyn Davis\", \"yil\": 2013 },\n        { \"sira\": 7, \"filmAdi\": \"Miller's Crossing\", \"yil\": 1990 },\n        { \"sira\": 8, \"filmAdi\": \"Barton Fink\", \"yil\": 1991 },\n        { \"sira\": 9, \"filmAdi\": \"True Grit\", \"yil\": 2010 },\n        { \"sira\": 10, \"filmAdi\": \"Raising Arizona\", \"yil\": 1987 }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.modern_comedy.title'),\n      \"aciklama\": t('lists.film_lists.modern_comedy.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"The Grand Budapest Hotel\", \"yil\": 2014, \"yonetmen\": \"Wes Anderson\" },\n        { \"sira\": 2, \"filmAdi\": \"What We Do in the Shadows\", \"yil\": 2014, \"yonetmen\": \"Jemaine Clement, Taika Waititi\" },\n        { \"sira\": 3, \"filmAdi\": \"Little Miss Sunshine\", \"yil\": 2006, \"yonetmen\": \"Jonathan Dayton, Valerie Faris\" },\n        { \"sira\": 4, \"filmAdi\": \"Superbad\", \"yil\": 2007, \"yonetmen\": \"Greg Mottola\" },\n        { \"sira\": 5, \"filmAdi\": \"Shaun of the Dead\", \"yil\": 2004, \"yonetmen\": \"Edgar Wright\" },\n        { \"sira\": 6, \"filmAdi\": \"Borat\", \"yil\": 2006, \"yonetmen\": \"Larry Charles\" },\n        { \"sira\": 7, \"filmAdi\": \"The Death of Stalin\", \"yil\": 2017, \"yonetmen\": \"Armando Iannucci\" },\n        { \"sira\": 8, \"filmAdi\": \"Booksmart\", \"yil\": 2019, \"yonetmen\": \"Olivia Wilde\" },\n        { \"sira\": 9, \"filmAdi\": \"Palm Springs\", \"yil\": 2020, \"yonetmen\": \"Max Barbakow\" },\n        { \"sira\": 10, \"filmAdi\": \"Toni Erdmann\", \"yil\": 2016, \"yonetmen\": \"Maren Ade\" }\n      ]\n    },\n    {\n      \"listeAdi\": t('lists.film_lists.epic_historical.title'),\n      \"aciklama\": t('lists.film_lists.epic_historical.description'),\n      \"filmSayisi\": 10,\n      \"filmler\": [\n        { \"sira\": 1, \"filmAdi\": \"Gladiator\", \"yil\": 2000, \"yonetmen\": \"Ridley Scott\" },\n        { \"sira\": 2, \"filmAdi\": \"Schindler's List\", \"yil\": 1993, \"yonetmen\": \"Steven Spielberg\" },\n        { \"sira\": 3, \"filmAdi\": \"Braveheart\", \"yil\": 1995, \"yonetmen\": \"Mel Gibson\" },\n        { \"sira\": 4, \"filmAdi\": \"Lawrence of Arabia\", \"yil\": 1962, \"yonetmen\": \"David Lean\" },\n        { \"sira\": 5, \"filmAdi\": \"The Last of the Mohicans\", \"yil\": 1992, \"yonetmen\": \"Michael Mann\" },\n        { \"sira\": 6, \"filmAdi\": \"Master and Commander: The Far Side of the World\", \"yil\": 2003, \"yonetmen\": \"Peter Weir\" },\n        { \"sira\": 7, \"filmAdi\": \"Kingdom of Heaven (Director's Cut)\", \"yil\": 2005, \"yonetmen\": \"Ridley Scott\" },\n        { \"sira\": 8, \"filmAdi\": \"Downfall (Der Untergang)\", \"yil\": 2004, \"yonetmen\": \"Oliver Hirschbiegel\" },\n        { \"sira\": 9, \"filmAdi\": \"1917\", \"yil\": 2019, \"yonetmen\": \"Sam Mendes\" },\n        { \"sira\": 10, \"filmAdi\": \"The Pianist\", \"yil\": 2002, \"yonetmen\": \"Roman Polanski\" }\n      ]\n    }\n  ]\n});\n\nconst Lists: React.FC = () => {\n  const { t } = useTranslation();\n  const [selectedListe, setSelectedListe] = useState<Liste | null>(null);\n  const [showListeDetail, setShowListeDetail] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState<number | null>(null);\n  const [showMovieDetail, setShowMovieDetail] = useState(false);\n  const [filmData, setFilmData] = useState<Map<string, { id: number; posterPath?: string }>>(new Map());\n  const [loadingPoster, setLoadingPoster] = useState<{ [key: string]: boolean }>({});\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n\n  // Sayfa yüklendiğinde tüm listelerin poster verilerini yükle (OPTIMIZED)\n  useEffect(() => {\n    const loadAllPosters = async () => {\n      setIsInitialLoading(true);\n      const newFilmData = new Map(filmData);\n      \n      // Tüm filmleri topla\n      const allFilms = (getFilmListeleri(t).filmListeleri as FilmListesi[]).flatMap(liste => liste.filmler);\n      const uniqueFilms = allFilms.filter((film: Film, index: number, self: Film[]) => \n        index === self.findIndex((f: Film) => f.filmAdi === film.filmAdi)\n      );\n      \n      // Cache'de olmayan filmleri filtrele\n      const uncachedFilms = uniqueFilms.filter((film: Film) => !newFilmData.has(film.filmAdi));\n      \n      if (uncachedFilms.length === 0) {\n        console.log('All films already cached on initial load');\n        setIsInitialLoading(false);\n        return;\n      }\n\n      console.log(`Initial loading: ${uncachedFilms.length} unique films in parallel...`);\n      \n      // Paralel API çağrıları\n      const searchPromises = uncachedFilms.map(async (film: Film) => {\n        try {\n          const searchResults = await searchMovies(film.filmAdi);\n          if (searchResults.length > 0) {\n            const firstResult = searchResults[0];\n            return {\n              filmAdi: film.filmAdi,\n              data: {\n                id: firstResult.id,\n                posterPath: firstResult.poster_path\n              }\n            };\n          }\n        } catch (error) {\n          console.error(`Error finding movie ID for ${film.filmAdi}:`, error);\n        }\n        return null;\n      });\n\n      // Tüm sonuçları bekle\n      const results = await Promise.all(searchPromises);\n      \n      // Sonuçları Map'e ekle\n      results.forEach((result: { filmAdi: string; data: { id: number; posterPath?: string } } | null) => {\n        if (result) {\n          newFilmData.set(result.filmAdi, result.data);\n        }\n      });\n      \n      setFilmData(newFilmData);\n      setIsInitialLoading(false);\n      console.log(`Initial load completed: ${newFilmData.size} films cached`);\n    };\n\n    loadAllPosters();\n  }, []);\n\n  // Film adlarından TMDB ID'lerini bul (PARALEL)\n  const findMovieIds = async (liste: Liste) => {\n    const newFilmData = new Map(filmData);\n    \n    // Sadece cache'de olmayan filmleri filtrele\n    const uncachedFilms = liste.filmler.filter(film => !newFilmData.has(film.filmAdi));\n    \n    if (uncachedFilms.length === 0) {\n      console.log('All films already cached');\n      return;\n    }\n\n    console.log(`Loading ${uncachedFilms.length} films in parallel...`);\n    \n    // Paralel API çağrıları\n    const searchPromises = uncachedFilms.map(async (film) => {\n      try {\n        const searchResults = await searchMovies(film.filmAdi);\n        if (searchResults.length > 0) {\n          const firstResult = searchResults[0];\n          return {\n            filmAdi: film.filmAdi,\n            data: {\n              id: firstResult.id,\n              posterPath: firstResult.poster_path\n            }\n          };\n        }\n      } catch (error) {\n        console.error(`Error finding movie ID for ${film.filmAdi}:`, error);\n      }\n      return null;\n    });\n\n    // Tüm sonuçları bekle\n    const results = await Promise.all(searchPromises);\n    \n    // Sonuçları Map'e ekle\n    results.forEach(result => {\n      if (result) {\n        newFilmData.set(result.filmAdi, result.data);\n      }\n    });\n    \n    setFilmData(newFilmData);\n    console.log(`Loaded ${results.filter(r => r !== null).length} films successfully`);\n  };\n\n  // Poster yüklenince skeleton'u kaldır\n  const handlePosterLoad = (filmAdi: string) => {\n    setLoadingPoster((prev) => ({ ...prev, [filmAdi]: false }));\n  };\n\n  // Liste kartı için poster seç\n  const getListePoster = (liste: Liste) => {\n    if (liste.filmler.length === 0) return null;\n    \n    // İlk filmden poster al\n    const firstFilm = liste.filmler[0];\n    const movieData = filmData.get(firstFilm.filmAdi);\n    return movieData?.posterPath;\n  };\n\n  // Liste açıldığında loadingPoster'ı true yap\n  const handleListeClick = async (liste: Liste) => {\n    setSelectedListe(liste);\n    setShowListeDetail(true);\n    // Film ID'lerini bul\n    await findMovieIds(liste);\n    // Skeleton başlat\n    const loadingMap: { [key: string]: boolean } = {};\n    liste.filmler.forEach(film => {\n      loadingMap[film.filmAdi] = true;\n    });\n    setLoadingPoster(loadingMap);\n  };\n\n  const handleCloseListeDetail = () => {\n    setShowListeDetail(false);\n    setSelectedListe(null);\n  };\n\n  const handleMovieClick = (filmAdi: string) => {\n    const movieData = filmData.get(filmAdi);\n    if (movieData) {\n      setSelectedMovieId(movieData.id);\n      setShowMovieDetail(true);\n    }\n  };\n\n  const handleCloseMovieModal = () => {\n    setShowMovieDetail(false);\n    setSelectedMovieId(null);\n  };\n\n  return (\n    <IonPage className={styles.listsPage}>\n      <IonContent className={styles.listsContent} scrollEvents={true}>\n        <TopHeaderBar title={t('lists.moviloi_lists')} />\n        {/* Ana Liste Görünümü */}\n        {!showListeDetail ? (\n          <div className=\"p-4 pb-24\">\n            \n            {isInitialLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }, (_, index) => (\n                  <div key={index} className=\"bg-gray-800 rounded-xl overflow-hidden\">\n                    {/* Poster Skeleton */}\n                    <div className=\"h-48 bg-gray-700 animate-pulse\"></div>\n                    {/* Content Skeleton */}\n                    <div className=\"p-4 bg-gray-800 space-y-2\">\n                      <SkeletonLoader type=\"text\" width=\"w-3/4\" height=\"h-6\" />\n                      <SkeletonLoader type=\"text\" width=\"w-full\" height=\"h-4\" />\n                      <SkeletonLoader type=\"text\" width=\"w-2/3\" height=\"h-4\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {(getFilmListeleri(t).filmListeleri as Liste[]).map((liste: Liste, index: number) => {\n                  const posterPath = getListePoster(liste);\n                  return (\n                    <div\n                      key={index}\n                      className=\"bg-gray-800 rounded-xl overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\"\n                      onClick={() => handleListeClick(liste)}\n                    >\n                      {/* Poster Alanı */}\n                      <div className=\"h-48 bg-gray-700 relative\">\n                        {posterPath ? (\n                          <img\n                            src={`https://image.tmdb.org/t/p/w500${posterPath}`}\n                            alt={liste.listeAdi}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center\">\n                            <span className=\"text-white text-lg font-bold text-center px-4\">{liste.listeAdi}</span>\n                          </div>\n                        )}\n                        \n                        {/* Film Sayısı Badge */}\n                        <div className=\"absolute top-3 right-3 bg-[#FE7743] text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg\">\n                          {t('lists.movie_count', { count: liste.filmSayisi })}\n                        </div>\n                      </div>\n                      \n                      {/* Liste Bilgileri */}\n                      <div className=\"p-4 bg-gray-800\">\n                        <h3 className=\"text-white font-bold text-lg font-poppins mb-2\">{liste.listeAdi}</h3>\n                        <p className=\"text-[#EFEEEA] text-sm font-poppins\">{liste.aciklama}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        ) : (\n          /* Liste Detay Görünümü */\n          <div className=\"p-4 pb-24\">\n            <div className=\"flex items-center mb-6\">\n              <button\n                onClick={handleCloseListeDetail}\n                className=\"mr-4 p-2 text-white\"\n              >\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M19 12H5M12 19L5 12L12 5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                </svg>\n              </button>\n              <h1 className=\"text-white font-bold text-xl font-poppins\">{selectedListe?.listeAdi}</h1>\n            </div>\n            \n            <p className=\"text-[#EFEEEA] text-sm mb-6 font-poppins\">{selectedListe?.aciklama}</p>\n            \n            <div className=\"grid grid-cols-3 gap-3\">\n              {selectedListe?.filmler.map((film, index) => {\n                const movieData = filmData.get(film.filmAdi);\n                const isLoading = loadingPoster[film.filmAdi];\n                return (\n                  <div\n                    key={index}\n                    className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n                    onClick={() => handleMovieClick(film.filmAdi)}\n                  >\n                    <div className=\"aspect-[2/3] bg-gray-800 rounded-lg overflow-hidden mb-2\">\n                      {movieData?.posterPath ? (\n                        <>\n                          {isLoading && (\n                            <div className=\"w-full h-full bg-gray-700 animate-pulse\" />\n                          )}\n                          <img\n                            src={`https://image.tmdb.org/t/p/w500${movieData.posterPath}`}\n                            alt={film.filmAdi}\n                            className={`w-full h-full object-cover ${isLoading ? 'hidden' : ''}`}\n                            onLoad={() => handlePosterLoad(film.filmAdi)}\n                          />\n                        </>\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center\">\n                          <span className=\"text-white text-sm font-bold text-center px-2\">{film.filmAdi}</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-white text-xs font-medium font-poppins\">{film.filmAdi}</p>\n                      <p className=\"text-[#FE7743] text-xs font-poppins\">{film.yil}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Bottom Navigation */}\n        <BottomNavBar className=\"rounded-t-[24px]\" />\n\n        {/* Movie Detail Modal */}\n        <MovieDetailModal\n          open={showMovieDetail}\n          onClose={handleCloseMovieModal}\n          movieId={selectedMovieId}\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Lists; ","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/pages/profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MovieCard' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":606,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":606,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22200,22203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22200,22203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":756,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":756,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27465,27468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27465,27468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IonContent, IonPage } from '@ionic/react';\nimport TopHeaderBar from '../components/TopHeaderBar';\nimport BottomNavBar from '../components/BottomNavBar';\nimport MovieCard from '../components/MovieCard';\nimport MoviePosterCard from '../components/MoviePosterCard';\nimport LocalStorageService, { UserProfile } from '../services/localStorage';\nimport { useAuth } from '../context/AuthContext';\nimport { supabase } from '../services/supabaseClient';\nimport styles from './profile.module.css';\n\nconst Profile: React.FC = () => {\n  // AuthContext'ten kullanıcı bilgilerini al\n  const { user, profile: authProfile, loading: authLoading, signInWithGoogle, signOut } = useAuth();\n  const { t, i18n } = useTranslation();\n  \n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [editData, setEditData] = useState({\n    username: '',\n    fullName: '',\n    bio: '',\n    favoriteGenres: [] as string[]\n  });\n\n  // Debug için state'leri logla\n  console.log('🔍 Profile Component Debug:', {\n    authLoading,\n    user: user?.email || 'Yok',\n    authProfile: authProfile?.username || 'Yok',\n    localProfile: profile?.username || 'Yok'\n  });\n\n  // Avatar galerisi - SVG tabanlı sinema ikonları\n  const avatarGallery = [\n    { \n      id: 'cinema', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#FE7743\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">🎬</text>\n      </svg>`, \n      name: 'Cinema' \n    },\n    { \n      id: 'popcorn', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#4ECDC4\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">🍿</text>\n      </svg>`, \n      name: 'Popcorn' \n    },\n    { \n      id: 'film', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#96CEB4\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">🎭</text>\n      </svg>`, \n      name: 'Film' \n    },\n    { \n      id: 'star', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#FFEAA7\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"#000000\" text-anchor=\"middle\">⭐</text>\n      </svg>`, \n      name: 'Star' \n    },\n    { \n      id: 'heart', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#DDA0DD\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">❤️</text>\n      </svg>`, \n      name: 'Heart' \n    },\n    { \n      id: 'movie', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#FF6B6B\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">🎥</text>\n      </svg>`, \n      name: 'Movie' \n    },\n    { \n      id: 'tv', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#45B7D1\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">📺</text>\n      </svg>`, \n      name: 'TV' \n    },\n    { \n      id: 'trophy', \n      svg: `<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"24\" cy=\"24\" r=\"24\" fill=\"#FDCB6E\"/>\n        <text x=\"24\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" fill=\"#000000\" text-anchor=\"middle\">🏆</text>\n      </svg>`, \n      name: 'Trophy' \n    }\n  ];\n\n  const popularGenres = [\n    t('genres.action'), t('genres.drama'), t('genres.comedy'), t('genres.horror'), t('genres.sci_fi'), t('genres.romantic'),\n    t('genres.thriller'), t('genres.fantasy'), t('genres.adventure'), t('genres.crime'), t('genres.documentary'), t('genres.animation')\n  ];\n\n  useEffect(() => {\n    console.log('🔄 Profile useEffect tetiklendi:', { authLoading, user: !!user });\n    \n    // Auth loading bittikten sonra profil yükleme işlemini yap\n    if (!authLoading) {\n      console.log('✅ Auth loading bitti, profil yükleme başlıyor');\n      if (user) {\n        console.log('👤 Kullanıcı var, profil yükleniyor...');\n        // Kullanıcı giriş yapmışsa localStorage profilini yükle\n        loadProfile();\n        // Profil istatistiklerini güncelle\n        LocalStorageService.updateProfileStats();\n      } else {\n        console.log('❌ Kullanıcı yok, profil temizleniyor');\n        // Kullanıcı giriş yapmamışsa profili temizle\n        setProfile(null);\n      }\n    } else {\n      console.log('⏳ Auth loading devam ediyor...');\n    }\n  }, [user, authLoading]);\n\n  const loadProfile = () => {\n    try {\n      console.log('🔄 Profil yükleniyor...');\n      const userProfile = LocalStorageService.getUserProfile();\n      if (userProfile) {\n        console.log('✅ Mevcut profil bulundu:', userProfile.username);\n        setProfile(userProfile);\n        setEditData({\n          username: userProfile.username || authProfile?.username || '',\n          fullName: userProfile.fullName || '',\n          bio: userProfile.bio || '',\n          favoriteGenres: userProfile.favoriteGenres\n        });\n        // Profil istatistiklerini güncelle\n        LocalStorageService.updateProfileStats();\n        // Güncellenmiş profili tekrar yükle\n        const updatedProfile = LocalStorageService.getUserProfile();\n        if (updatedProfile) {\n          setProfile(updatedProfile);\n        }\n      } else {\n        console.log('🆕 Yeni profil oluşturuluyor...');\n        // İlk kullanım için varsayılan profil oluştur\n        createDefaultProfile();\n      }\n    } catch (error) {\n      console.error('❌ Profil yükleme hatası:', error);\n      // Hata durumunda varsayılan profil oluştur\n      createDefaultProfile();\n    }\n  };\n\n  const createDefaultProfile = () => {\n    try {\n      console.log('🆕 Varsayılan profil oluşturuluyor...');\n      const defaultProfile = LocalStorageService.createUserProfile({\n        username: authProfile?.username || 'CinemaLover',\n        fullName: '',\n        bio: '',\n        joinDate: new Date().toISOString(),\n        favoriteMovies: [],\n        favoriteGenres: []\n      });\n      console.log('✅ Varsayılan profil oluşturuldu:', defaultProfile.username);\n      setProfile(defaultProfile);\n      setEditData({\n        username: defaultProfile.username,\n        fullName: defaultProfile.fullName || '',\n        bio: defaultProfile.bio || '',\n        favoriteGenres: defaultProfile.favoriteGenres\n      });\n    } catch (error) {\n      console.error('❌ Varsayılan profil oluşturma hatası:', error);\n    }\n  };\n\n  const generateInitialsAvatar = (name: string): string => {\n    const initials = name\n      .split(' ')\n      .map(n => n.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n    \n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n    const colorIndex = initials.charCodeAt(0) % colors.length;\n    \n    return `data:image/svg+xml,${encodeURIComponent(`\n      <svg width=\"120\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"60\" cy=\"60\" r=\"60\" fill=\"${colors[colorIndex]}\"/>\n        <text x=\"60\" y=\"75\" font-family=\"Arial, sans-serif\" font-size=\"36\" font-weight=\"bold\" fill=\"white\" text-anchor=\"middle\">${initials}</text>\n      </svg>\n    `)}`;\n  };\n\n  // Supabase'de profil güncelleme fonksiyonu\n  const updateSupabaseProfile = async (username: string, avatarUrl?: string) => {\n    if (!user) return;\n\n    try {\n      setIsUpdatingProfile(true);\n      const updates = {\n        id: user.id,\n        username,\n        avatar_url: avatarUrl || authProfile?.avatar_url,\n        updated_at: new Date().toISOString(),\n      };\n\n      const { error } = await supabase\n        .from('profiles')\n        .upsert(updates);\n\n      if (error) {\n        console.error('Error updating profile:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error updating profile:', error);\n    } finally {\n      setIsUpdatingProfile(false);\n    }\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setAvatarPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleAvatarGallerySelect = (avatarUrl: string) => {\n    console.log('🖼️ Avatar seçildi:', avatarUrl);\n    setAvatarPreview(avatarUrl);\n  };\n\n  const handleSave = async () => {\n    if (!profile) return;\n\n    try {\n      setIsUpdatingProfile(true);\n      \n      const updates = {\n        username: editData.username,\n        fullName: editData.fullName,\n        bio: editData.bio,\n        favoriteGenres: editData.favoriteGenres,\n        avatar: avatarPreview || profile.avatar\n      };\n\n      console.log('💾 Profil güncelleniyor:', updates);\n\n      // LocalStorage'ı güncelle\n      const updatedProfile = LocalStorageService.updateUserProfile(updates);\n      if (updatedProfile) {\n        console.log('✅ Profil başarıyla güncellendi:', updatedProfile);\n        setProfile(updatedProfile);\n        setIsEditing(false);\n        setAvatarPreview(null);\n        \n        // Eğer kullanıcı giriş yapmışsa Supabase'i de güncelle\n        if (user) {\n          await updateSupabaseProfile(editData.username, avatarPreview);\n        }\n      } else {\n        console.error('❌ Profil güncellenemedi');\n      }\n    } catch (error) {\n      console.error('❌ Profil kaydetme hatası:', error);\n    } finally {\n      setIsUpdatingProfile(false);\n    }\n  };\n\n  const handleCancel = () => {\n    console.log('❌ Düzenleme iptal ediliyor');\n    setIsEditing(false);\n    setAvatarPreview(null);\n    if (profile) {\n      setEditData({\n        username: profile.username || authProfile?.username || '',\n        fullName: profile.fullName || '',\n        bio: profile.bio || '',\n        favoriteGenres: profile.favoriteGenres\n      });\n    }\n  };\n\n  const formatJoinDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const currentLanguage = i18n.language;\n    const locale = currentLanguage === 'tr' ? 'tr-TR' : currentLanguage === 'es' ? 'es-ES' : 'en-US';\n    return date.toLocaleDateString(locale, { \n      year: 'numeric', \n      month: 'long' \n    });\n  };\n\n  const getRecentMovies = () => {\n    // LocalStorage'dan son izlenen filmleri al\n    const watchedMovies = LocalStorageService.getMovieLogsByType('watched');\n    // Tarih sırasına göre sırala (en yeni önce) ve ilk 5'ini al\n    return watchedMovies\n      .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n      .slice(0, 5);\n  };\n\n  // Ortalama puan hesaplama\n  const getAverageRating = () => {\n    if (!profile) return { average: 0, total: 0 };\n    const logs = LocalStorageService.getMovieLogs();\n    const watchedLogs = logs.filter(log => log.type === 'watched' && log.rating);\n    \n    if (watchedLogs.length === 0) return { average: 0, total: 0 };\n    \n    const totalRating = watchedLogs.reduce((sum, log) => {\n      const rating = parseFloat(log.rating);\n      return sum + (isNaN(rating) ? 0 : rating);\n    }, 0);\n    \n    const average = totalRating / watchedLogs.length;\n    return { average: Math.round(average * 10) / 10, total: watchedLogs.length };\n  };\n\n  // Bu ay izlenen toplam içerik sayısı (film + dizi)\n  const getThisMonthWatched = () => {\n    if (!profile) return { count: 0, trend: 0, movies: 0, tvShows: 0, episodes: 0 };\n    const logs = LocalStorageService.getMovieLogs();\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    \n    // Bu ay izlenenler\n    const thisMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      return log.type === 'watched' && \n             logDate.getMonth() === currentMonth && \n             logDate.getFullYear() === currentYear;\n    });\n    \n    // Geçen ay izlenenler\n    const lastMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;\n      const lastYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n      return log.type === 'watched' && \n             logDate.getMonth() === lastMonth && \n             logDate.getFullYear() === lastYear;\n    });\n    \n    const trend = thisMonthLogs.length - lastMonthLogs.length;\n    const movies = thisMonthLogs.filter(log => log.mediaType === 'movie').length;\n    \n    // Farklı dizi sayısı (aynı diziden birden fazla bölüm olsa bile 1 dizi sayılır)\n    const uniqueSeries = new Set(\n      thisMonthLogs\n        .filter(log => log.mediaType === 'tv' && log.seriesId)\n        .map(log => log.seriesId)\n    );\n    const tvShows = uniqueSeries.size;\n    \n    // Toplam bölüm sayısı\n    const episodes = thisMonthLogs\n      .filter(log => log.mediaType === 'tv')\n      .reduce((sum, log) => sum + (log.episodeCount || 1), 0);\n    \n    return { count: thisMonthLogs.length, trend, movies, tvShows, episodes };\n  };\n\n  // En çok izlenen tür\n  const getFavoriteGenre = () => {\n    if (!profile) return t('empty_states.not_yet');\n    const logs = LocalStorageService.getMovieLogs();\n    const watchedLogs = logs.filter(log => log.type === 'watched' && log.genres);\n    \n    if (watchedLogs.length === 0) return t('empty_states.not_yet');\n    \n    const genreCounts: { [key: string]: number } = {};\n    \n    watchedLogs.forEach(log => {\n      if (log.genres) {\n        log.genres.forEach(genre => {\n          const normalizedGenre = genre.toLowerCase();\n          genreCounts[normalizedGenre] = (genreCounts[normalizedGenre] || 0) + 1;\n        });\n      }\n    });\n    \n    if (Object.keys(genreCounts).length === 0) return t('empty_states.not_yet');\n    \n    const favoriteGenre = Object.entries(genreCounts)\n      .sort(([,a], [,b]) => b - a)[0][0];\n    \n    // Çok dilli karşılıkları\n    const genreTranslations: { [key: string]: string } = {\n      'drama': t('genres.drama'),\n      'comedy': t('genres.comedy'),\n      'komedi': t('genres.comedy'),\n      'action': t('genres.action'),\n      'aksiyon': t('genres.action'),\n      'thriller': t('genres.thriller'),\n      'horror': t('genres.horror'),\n      'korku': t('genres.horror'),\n      'romance': t('genres.romantic'),\n      'romantik': t('genres.romantic'),\n      'sci-fi': t('genres.sci_fi'),\n      'science fiction': t('genres.sci_fi'),\n      'fantasy': t('genres.fantasy'),\n      'fantastik': t('genres.fantasy'),\n      'adventure': t('genres.adventure'),\n      'macera': t('genres.adventure'),\n      'crime': t('genres.crime'),\n      'suç': t('genres.crime'),\n      'mystery': t('genres.thriller'),\n      'gizem': t('genres.thriller'),\n      'animation': t('genres.animation'),\n      'animasyon': t('genres.animation'),\n      'documentary': t('genres.documentary'),\n      'belgesel': t('genres.documentary')\n    };\n    \n    return genreTranslations[favoriteGenre] || favoriteGenre.charAt(0).toUpperCase() + favoriteGenre.slice(1);\n  };\n\n  // Zaman tüneli hesaplama\n  const getTimeTimeline = () => {\n    if (!profile) return { progress: 0, era: '2020\\'ler' };\n    const logs = LocalStorageService.getMovieLogs();\n    const watchedLogs = logs.filter(log => log.type === 'watched' && log.releaseYear);\n    \n    if (watchedLogs.length === 0) return { progress: 0, era: '2020\\'ler' };\n    \n    const years = watchedLogs.map(log => log.releaseYear!).sort((a, b) => a - b);\n    const oldestYear = years[0];\n    const newestYear = years[years.length - 1];\n    \n    // Hangi dönemde daha çok film var\n    const eraCounts = {\n      '90s': years.filter(year => year >= 1990 && year < 2000).length,\n      '2000s': years.filter(year => year >= 2000 && year < 2010).length,\n      '2010s': years.filter(year => year >= 2010 && year < 2020).length,\n      '2020s': years.filter(year => year >= 2020).length\n    };\n    \n    const dominantEra = Object.entries(eraCounts)\n      .sort(([,a], [,b]) => b - a)[0][0];\n    \n    // Progress hesaplama (yıl aralığına göre)\n    const totalRange = newestYear - oldestYear;\n    const currentYear = new Date().getFullYear();\n    const progress = totalRange > 0 ? Math.min(((currentYear - oldestYear) / totalRange) * 100, 100) : 0;\n    \n    const eraLabels = {\n      '90s': '90\\'lar',\n      '2000s': '2000\\'ler', \n      '2010s': '2010\\'lar',\n      '2020s': '2020\\'ler'\n    };\n    \n    return { progress: Math.round(progress), era: eraLabels[dominantEra as keyof typeof eraLabels] };\n  };\n\n  // Bu ay izlenen film sayısı (ayrı fonksiyon)\n  const getThisMonthMovies = () => {\n    if (!profile) return { count: 0, trend: 0 };\n    const logs = LocalStorageService.getMovieLogs();\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    \n    // Bu ay izlenen filmler\n    const thisMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      return log.type === 'watched' && \n             log.mediaType === 'movie' &&\n             logDate.getMonth() === currentMonth && \n             logDate.getFullYear() === currentYear;\n    });\n    \n    // Geçen ay izlenen filmler\n    const lastMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;\n      const lastYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n      return log.type === 'watched' && \n             log.mediaType === 'movie' &&\n             logDate.getMonth() === lastMonth && \n             logDate.getFullYear() === lastYear;\n    });\n    \n    const trend = thisMonthLogs.length - lastMonthLogs.length;\n    return { count: thisMonthLogs.length, trend };\n  };\n\n  // Bu ay izlenen dizi sayısı\n  const getThisMonthTvShows = () => {\n    if (!profile) return { count: 0, trend: 0, uniqueSeries: 0 };\n    const logs = LocalStorageService.getMovieLogs();\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    \n    // Bu ay izlenen diziler\n    const thisMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      return log.type === 'watched' && \n             log.mediaType === 'tv' &&\n             logDate.getMonth() === currentMonth && \n             logDate.getFullYear() === currentYear;\n    });\n    \n    // Geçen ay izlenen diziler\n    const lastMonthLogs = logs.filter(log => {\n      const logDate = new Date(log.date);\n      const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;\n      const lastYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n      return log.type === 'watched' && \n             log.mediaType === 'tv' &&\n             logDate.getMonth() === lastMonth && \n             logDate.getFullYear() === lastYear;\n    });\n    \n    // Farklı dizi sayısı (aynı diziden birden fazla bölüm olsa bile 1 dizi sayılır)\n    const thisMonthUniqueSeries = new Set(\n      thisMonthLogs\n        .filter(log => log.seriesId)\n        .map(log => log.seriesId)\n    );\n    \n    const lastMonthUniqueSeries = new Set(\n      lastMonthLogs\n        .filter(log => log.seriesId)\n        .map(log => log.seriesId)\n    );\n    \n    const trend = thisMonthUniqueSeries.size - lastMonthUniqueSeries.size;\n    return { \n      count: thisMonthLogs.length, \n      trend, \n      uniqueSeries: thisMonthUniqueSeries.size \n    };\n  };\n\n  // Toplam bölüm sayısı hesaplama\n  const getTotalEpisodes = () => {\n    if (!profile) return { total: 0, average: 0, uniqueSeries: 0 };\n    const logs = LocalStorageService.getMovieLogs();\n    const watchedLogs = logs.filter(log => log.type === 'watched' && log.mediaType === 'tv');\n    \n    const totalEpisodes = watchedLogs.reduce((sum, log) => sum + (log.episodeCount || 1), 0);\n    const uniqueSeries = new Set(\n      watchedLogs\n        .filter(log => log.seriesId)\n        .map(log => log.seriesId)\n    );\n    \n    const average = uniqueSeries.size > 0 ? Math.round(totalEpisodes / uniqueSeries.size) : 0;\n    \n    return { total: totalEpisodes, average, uniqueSeries: uniqueSeries.size };\n  };\n\n  // Günlük ortalama izleme süresi\n  const getDailyAverageWatchTime = () => {\n    if (!profile) return 0;\n    const joinDate = new Date(profile.joinDate);\n    const now = new Date();\n    const daysSinceJoin = Math.max(1, Math.floor((now.getTime() - joinDate.getTime()) / (1000 * 60 * 60 * 24)));\n    return Math.round(profile.totalWatchTimeMinutes / daysSinceJoin);\n  };\n\n  const getCurrentAvatar = () => {\n    if (avatarPreview) return avatarPreview;\n    if (profile?.avatar) return profile.avatar;\n    // AuthContext'ten avatar_url'i kontrol et\n    if (authProfile?.avatar_url) return authProfile.avatar_url;\n    const displayName = profile?.fullName || profile?.username || authProfile?.username || 'User';\n    return generateInitialsAvatar(displayName);\n  };\n\n  const handleGenreToggle = (genre: string) => {\n    setEditData(prev => ({\n      ...prev,\n      favoriteGenres: prev.favoriteGenres.includes(genre)\n        ? prev.favoriteGenres.filter(g => g !== genre)\n        : [...prev.favoriteGenres, genre]\n    }));\n  };\n\n  // Rozet ilerleme fonksiyonları\n  const getProgressForBadge = (badge: any) => {\n    if (!profile) return 0;\n\n    const logs = LocalStorageService.getMovieLogs();\n    const watchedLogs = logs.filter(log => log.type === 'watched');\n\n    switch (badge.id) {\n      case 'first-movie': {\n        return profile.watchedMovieCount;\n      }\n      case 'comedy-expert': {\n        return watchedLogs.filter(log =>\n          log.mediaType === 'movie' &&\n          log.genres &&\n          log.genres.some(genre =>\n            genre.toLowerCase().includes('komedi') ||\n            genre.toLowerCase().includes('comedy')\n          )\n        ).length;\n      }\n      case 'drama-expert': {\n        return watchedLogs.filter(log =>\n          log.mediaType === 'movie' &&\n          log.genres &&\n          log.genres.some(genre =>\n            genre.toLowerCase().includes('drama') ||\n            genre.toLowerCase().includes('dram')\n          )\n        ).length;\n      }\n      case 'action-expert': {\n        return watchedLogs.filter(log =>\n          log.mediaType === 'movie' &&\n          log.genres &&\n          log.genres.some(genre =>\n            genre.toLowerCase().includes('aksiyon') ||\n            genre.toLowerCase().includes('action')\n          )\n        ).length;\n      }\n      case 'series-killer': {\n        const completedSeries = LocalStorageService.getCompletedSeries(watchedLogs);\n        return completedSeries.length;\n      }\n      case 'nostalgia-traveler': {\n        return watchedLogs.filter(log =>\n          log.mediaType === 'movie' &&\n          log.releaseYear &&\n          log.releaseYear < 1990\n        ).length;\n      }\n      case 'marathon-runner': {\n        const dailyCounts = new Map<string, number>();\n        watchedLogs\n          .filter(log => log.mediaType === 'movie')\n          .forEach(log => {\n            const date = log.date.split('T')[0];\n            dailyCounts.set(date, (dailyCounts.get(date) || 0) + 1);\n          });\n        const maxDailyCount = Math.max(...Array.from(dailyCounts.values()), 0);\n        return maxDailyCount;\n      }\n      case 'century-watcher': {\n        return profile.watchedMovieCount;\n      }\n      case 'binge-watcher': {\n        return profile.totalEpisodesWatched;\n      }\n      case 'time-traveler': {\n        return profile.totalWatchTimeMinutes;\n      }\n      case 'critic-master': {\n        return watchedLogs.filter(log =>\n          log.review && log.review.trim().length > 0\n        ).length;\n      }\n      case 'collector': {\n        return logs.filter(log => log.type === 'watchlist').length;\n      }\n      default: {\n        return 0;\n      }\n    }\n  };\n\n  const getNextBadgeTarget = () => {\n    if (!profile) return null;\n    return profile.badges.find(badge => !badge.isEarned);\n  };\n\n  const getUserLevel = () => {\n    if (!profile) return t('profile.user_levels.rookie');\n    \n    const earnedCount = profile.earnedBadgeCount;\n    if (earnedCount >= 8) return t('profile.user_levels.cinema_legend');\n    if (earnedCount >= 6) return t('profile.user_levels.film_expert');\n    if (earnedCount >= 4) return t('profile.user_levels.cinema_enthusiast');\n    if (earnedCount >= 2) return t('profile.user_levels.film_lover');\n    return t('profile.user_levels.rookie');\n  };\n\n  const getLevelStyle = () => {\n    if (!profile) return 'bg-gray-600';\n    \n    const earnedCount = profile.earnedBadgeCount;\n    if (earnedCount >= 8) return 'bg-gradient-to-r from-[#FFD700] to-[#FFA500] text-black';\n    if (earnedCount >= 6) return 'bg-gradient-to-r from-[#FE7743] to-[#E56A3C] text-white';\n    if (earnedCount >= 4) return 'bg-gradient-to-r from-[#4ECDC4] to-[#44B7C8] text-white';\n    if (earnedCount >= 2) return 'bg-gradient-to-r from-[#96CEB4] to-[#74B9FF] text-white';\n    return 'bg-gray-600 text-white';\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'milestone': return 'bg-gradient-to-r from-[#FE7743] to-[#E56A3C]';\n      case 'genre': return 'bg-gradient-to-r from-[#4ECDC4] to-[#44B7C8]';\n      case 'time': return 'bg-gradient-to-r from-[#FFEAA7] to-[#FDCB6E]';\n      case 'streak': return 'bg-gradient-to-r from-[#96CEB4] to-[#74B9FF]';\n      case 'special': return 'bg-gradient-to-r from-[#DDA0DD] to-[#A29BFE]';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  // Konfeti animasyonu\n  const createConfetti = () => {\n    const colors = ['#FE7743', '#E56A3C', '#4ECDC4', '#FFEAA7', '#96CEB4', '#DDA0DD'];\n    \n    for (let i = 0; i < 50; i++) {\n      const confetti = document.createElement('div');\n      confetti.className = 'fixed w-2 h-2 pointer-events-none z-50';\n      confetti.style.left = Math.random() * 100 + 'vw';\n      confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n      confetti.style.animationDelay = Math.random() * 2 + 's';\n      confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';\n      confetti.style.borderRadius = '50%';\n      \n      // Animasyon CSS'i\n      confetti.style.animation = `confetti-fall ${confetti.style.animationDuration} linear ${confetti.style.animationDelay}`;\n      \n      document.body.appendChild(confetti);\n      \n      // Temizleme\n      setTimeout(() => {\n        if (confetti.parentNode) {\n          confetti.parentNode.removeChild(confetti);\n        }\n      }, 5000);\n    }\n  };\n\n  const handleBadgeClick = (badge: any) => {\n    if (badge.isEarned) {\n      createConfetti();\n      // Haptic feedback (mobil cihazlar için)\n      if (navigator.vibrate) {\n        navigator.vibrate(100);\n      }\n    }\n  };\n\n\n\n  // Yükleme durumu\n  if (authLoading) {\n    return (\n      <IonPage className=\"bg-background\">\n        <IonContent fullscreen className=\"bg-background relative\" scrollEvents={true}>\n          <div className=\"bg-background min-h-screen flex flex-col items-center\">\n            <TopHeaderBar \n              title={t('profile.my_profile')} \n              showBackButton={false}\n              showLanguageSwitcher={true}\n              isProfilePage={true}\n            />\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#FE7743]\"></div>\n                <p className=\"text-gray-400\">Yükleniyor...</p>\n                <p className=\"text-xs text-gray-500\">Auth durumu kontrol ediliyor</p>\n              </div>\n            </div>\n            <BottomNavBar />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  // Kullanıcı giriş yapmamışsa\n  if (!user) {\n    return (\n      <IonPage className=\"bg-background\">\n        <IonContent fullscreen className=\"bg-background relative\" scrollEvents={true}>\n          <div className=\"bg-background min-h-screen flex flex-col items-center\">\n            <TopHeaderBar \n              title={t('profile.my_profile')} \n              showBackButton={false}\n              showLanguageSwitcher={true}\n              isProfilePage={true}\n            />\n            <div className=\"flex-1 flex items-center justify-center px-6\">\n              <div className=\"text-center space-y-6 max-w-md\">\n                <div className=\"w-24 h-24 mx-auto bg-[#FE7743] rounded-full flex items-center justify-center\">\n                  <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"white\">\n                    <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n                  </svg>\n                </div>\n                <h2 className=\"text-2xl font-bold text-white\">{t('auth.welcome')}</h2>\n                <p className=\"text-gray-400 text-center leading-relaxed\">\n                  {t('auth.track_movies_description')}\n                </p>\n                <button\n                  onClick={signInWithGoogle}\n                  className=\"w-full bg-white text-black py-3 px-6 rounded-xl font-semibold flex items-center justify-center space-x-3 hover:bg-gray-100 transition-colors\"\n                >\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                    <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  <span>{t('auth.sign_in_with_google')}</span>\n                </button>\n              </div>\n            </div>\n            <BottomNavBar />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  // Kullanıcı giriş yapmış ama profil yüklenmemişse\n  if (!profile) {\n    return (\n      <IonPage className=\"bg-background\">\n        <IonContent fullscreen className=\"bg-background relative\" scrollEvents={true}>\n          <div className=\"bg-background min-h-screen flex flex-col items-center\">\n            <TopHeaderBar \n              title={t('profile.my_profile')} \n              showBackButton={false}\n              showLanguageSwitcher={true}\n              isProfilePage={true}\n            />\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#FE7743]\"></div>\n                <p className=\"text-gray-400\">Profil yükleniyor...</p>\n                <p className=\"text-xs text-gray-500\">Kullanıcı bilgileri hazırlanıyor</p>\n              </div>\n            </div>\n            <BottomNavBar />\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  return (\n    <IonPage className=\"bg-background\">\n      <IonContent fullscreen className=\"bg-background relative\" scrollEvents={true}>\n        <div className=\"bg-background min-h-screen flex flex-col items-center\">\n          <TopHeaderBar \n            title={t('profile.my_profile')} \n            showBackButton={false}\n            showLanguageSwitcher={true}\n            isProfilePage={true}\n          />\n          \n          <div className=\"flex-1 px-4 py-6 pb-32 overflow-y-auto w-full\">\n        {/* Profil Başlığı (Hero Section) */}\n        <div className=\"bg-[#222] rounded-[20px] p-6 mb-6 shadow-lg relative overflow-hidden\">\n          {/* Arka Plan - En Yüksek Puanlı Film Afişi (Opsiyonel) */}\n          <div className=\"absolute inset-0 opacity-5 bg-gradient-to-r from-[#FE7743]/10 to-[#E56A3C]/10\"></div>\n          \n          <div className=\"relative z-10 flex items-start space-x-4\">\n            {/* Avatar - Sol Hizalı */}\n            <div className=\"relative flex-shrink-0\">\n              <img\n                src={getCurrentAvatar()}\n                alt=\"Profile\"\n                className=\"w-20 h-20 rounded-full object-cover border-4 border-[#FE7743]\"\n              />\n              {isEditing && (\n                <button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-[#FE7743] rounded-full flex items-center justify-center text-white hover:bg-[#E56A3C] transition-colors\"\n                >\n                  <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n                  </svg>\n                </button>\n              )}\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"hidden\"\n              />\n            </div>\n\n            {/* Kullanıcı Bilgileri - Sağ Hizalı */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editData.username}\n                    onChange={(e) => setEditData(prev => ({ ...prev, username: e.target.value }))}\n                    className={`${styles.editInput} text-white text-xl font-bold rounded-lg px-3 py-1 flex-1`}\n                    placeholder={t('profile.username_placeholder')}\n                  />\n                ) : (\n                  <>\n                    <h1 className=\"text-xl font-bold text-white font-poppins\">\n                      @{profile.username || authProfile?.username || 'kullanici'}\n                    </h1>\n                    <button\n                      onClick={() => setIsEditing(true)}\n                      className=\"w-6 h-6 bg-[#FE7743]/20 hover:bg-[#FE7743]/40 rounded-full flex items-center justify-center text-[#FE7743] transition-colors\"\n                    >\n                      <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n                      </svg>\n                    </button>\n                  </>\n                )}\n              </div>\n\n              {/* Hakkında */}\n              <div className=\"mb-3\">\n                {isEditing ? (\n                  <textarea\n                    value={editData.bio}\n                    onChange={(e) => setEditData(prev => ({ ...prev, bio: e.target.value }))}\n                    className={`${styles.editInput} w-full text-white rounded-lg px-3 py-2 resize-none text-sm`}\n                    rows={2}\n                    placeholder={t('profile.bio_placeholder')}\n                  />\n                ) : (\n                  <p className=\"text-gray-300 text-sm leading-relaxed font-poppins\">\n                    {profile.bio || t('empty_states.no_bio')}\n                  </p>\n                )}\n              </div>\n\n              {/* Favori Türler */}\n              <div className=\"mb-3\">\n                {isEditing ? (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {popularGenres.slice(0, 6).map((genre) => (\n                      <button\n                        key={genre}\n                        onClick={() => handleGenreToggle(genre)}\n                        className={`${styles.genreTag} px-2 py-1 rounded-full text-xs font-medium ${\n                          editData.favoriteGenres.includes(genre) ? styles.selected : ''\n                        }`}\n                      >\n                        {genre}\n                      </button>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {profile.favoriteGenres.slice(0, 3).map((genre) => (\n                      <span\n                        key={genre}\n                        className=\"px-2 py-1 bg-[#FE7743] text-white rounded-full text-xs font-medium\"\n                      >\n                        {genre}\n                      </span>\n                    ))}\n                    {profile.favoriteGenres.length > 3 && (\n                      <span className=\"px-2 py-1 bg-gray-600 text-white rounded-full text-xs font-medium\">\n                        +{profile.favoriteGenres.length - 3}\n                      </span>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Aramıza Katılma Tarihi */}\n              <p className=\"text-gray-400 text-xs font-poppins\">\n                {t('profile.join_date')}: {formatJoinDate(profile.joinDate)}\n              </p>\n            </div>\n          </div>\n\n          {/* Avatar Galerisi - Düzenleme Modunda */}\n          {isEditing && (\n            <div className=\"mt-6 pt-4 border-t border-[#333]\">\n              <p className=\"text-[#FE7743] text-sm mb-3\">{t('profile.avatar_gallery')}</p>\n              <div className=\"grid grid-cols-4 gap-3\">\n                {avatarGallery.map((avatar) => {\n                  const dataUrl = `data:image/svg+xml,${encodeURIComponent(avatar.svg)}`;\n                  return (\n                    <button\n                      key={avatar.id}\n                      onClick={() => handleAvatarGallerySelect(dataUrl)}\n                      className={`${styles.avatarSelectionButton} w-12 h-12 rounded-full border-2 overflow-hidden ${\n                        avatarPreview === dataUrl ? styles.selected : 'border-gray-600'\n                      }`}\n                    >\n                      <img\n                        src={dataUrl}\n                        alt={avatar.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Düzenleme Butonları */}\n          {isEditing && (\n            <div className=\"mt-6 flex gap-3\">\n              <button\n                onClick={handleSave}\n                disabled={isUpdatingProfile}\n                className={`${styles.editModeButton} ${styles.editModeButton} ${styles.save} flex-1 text-white py-2 rounded-lg font-medium font-poppins text-sm flex items-center justify-center space-x-2`}\n              >\n                {isUpdatingProfile ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>{t('profile.saving')}</span>\n                  </>\n                ) : (\n                  <span>{t('common.save')}</span>\n                )}\n              </button>\n              <button\n                onClick={handleCancel}\n                className={`${styles.editModeButton} ${styles.editModeButton} ${styles.cancel} flex-1 text-white py-2 rounded-lg font-medium font-poppins text-sm`}\n              >\n                {t('common.cancel')}\n              </button>\n            </div>\n          )}\n\n          {/* Bildirim Ayarları Butonu - Kullanıcı giriş yapmışsa göster */}\n          {user && !isEditing && (\n            <div className=\"mt-4\">\n              <button\n                onClick={() => window.location.href = '/notifications'}\n                className=\"w-full bg-[#333] hover:bg-[#444] text-white py-3 rounded-xl font-medium transition-colors flex items-center justify-center space-x-2 border border-[#444]\"\n              >\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12,2A2,2 0 0,1 14,4C14,4.74 13.6,5.39 13,5.73V7A7,7 0 0,1 20,14V16A1,1 0 0,0 21,17H22V19H2V17H3A1,1 0 0,0 4,16V14A7,7 0 0,1 11,7V5.73C10.4,5.39 10,4.74 10,4A2,2 0 0,1 12,2M6,14A5,5 0 0,0 11,9H13A5,5 0 0,0 18,14V16H6V14M10.5,19A1.5,1.5 0 0,0 12,20.5A1.5,1.5 0 0,0 13.5,19\"/>\n                </svg>\n                <span>{t('profile.notification_settings')}</span>\n              </button>\n            </div>\n          )}\n\n          {/* Çıkış Yap Butonu - Kullanıcı giriş yapmışsa göster */}\n          {user && !isEditing && (\n            <div className=\"mt-4 pt-4 border-t border-[#333]\">\n              <button\n                onClick={signOut}\n                className=\"w-full bg-red-600 hover:bg-red-700 text-white py-3 rounded-xl font-medium transition-colors flex items-center justify-center space-x-2\"\n              >\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z\"/>\n                </svg>\n                <span>{t('profile.logout')}</span>\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* İstatistiksel Gösterge Paneli (Dashboard) */}\n        <div className=\"bg-[#222] rounded-[20px] p-6 mb-6 shadow-lg\">\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-1 h-6 bg-[#FE7743] rounded-full mr-3\"></div>\n            <h2 className=\"text-xl font-bold text-white font-poppins\">{t('profile.statistical_dashboard')}</h2>\n          </div>\n\n          {/* Ana Göstergeler - İyileştirilmiş Kartlar */}\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            {/* İzlenen Filmler */}\n            <div className={`${styles.statisticCard} bg-gradient-to-br from-[#333] to-[#444] rounded-xl p-4 border border-[#FE7743]/10 hover:border-[#FE7743]/30 transition-all duration-300 relative overflow-hidden`}>\n              {/* Mikro-grafik arka plan efekti */}\n              <div className={`${styles.microChart} absolute inset-0 opacity-5`}>\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 40\" preserveAspectRatio=\"none\">\n                  <path d=\"M0,30 Q20,20 40,25 T80,15 L100,20 L100,40 L0,40 Z\" fill=\"url(#filmGradient)\" />\n                  <defs>\n                    <linearGradient id=\"filmGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#FE7743\" />\n                      <stop offset=\"100%\" stopColor=\"#E56A3C\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n              \n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"w-10 h-10 bg-[#FE7743]/20 rounded-lg flex items-center justify-center\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"#FE7743\">\n                      <path d=\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\"/>\n                    </svg>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 font-poppins\">{t('profile.this_month')}</p>\n                    <p className={`text-xs font-poppins ${\n                      getThisMonthMovies().trend > 0 ? 'text-[#4CAF50]' : \n                      getThisMonthMovies().trend < 0 ? 'text-[#FF6B6B]' : 'text-white'\n                    }`}>\n                      {getThisMonthMovies().trend > 0 ? '+' : ''}{getThisMonthMovies().trend}\n                    </p>\n                  </div>\n                </div>\n                <p className={`${styles.numberCounter} text-3xl font-bold text-white font-poppins mb-1 leading-none`}>{profile.watchedMovieCount}</p>\n                <p className=\"text-sm text-gray-300 font-poppins\">{t('profile.watched_movies')}</p>\n              </div>\n            </div>\n\n            {/* İzlenen Diziler */}\n            <div className={`${styles.statisticCard} bg-gradient-to-br from-[#333] to-[#444] rounded-xl p-4 border border-[#4ECDC4]/10 hover:border-[#4ECDC4]/30 transition-all duration-300 relative overflow-hidden`}>\n              <div className={`${styles.microChart} absolute inset-0 opacity-5`}>\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 40\" preserveAspectRatio=\"none\">\n                  <path d=\"M0,25 Q25,15 50,20 T100,25 L100,40 L0,40 Z\" fill=\"url(#tvGradient)\" />\n                  <defs>\n                    <linearGradient id=\"tvGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#4ECDC4\" />\n                      <stop offset=\"100%\" stopColor=\"#45B7D1\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n              \n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"w-10 h-10 bg-[#4ECDC4]/20 rounded-lg flex items-center justify-center\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"#4ECDC4\">\n                      <path d=\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zM9 8v8l7-4z\"/>\n                    </svg>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 font-poppins\">{t('profile.this_month')}</p>\n                    <p className={`text-xs font-poppins ${\n                      getThisMonthTvShows().uniqueSeries > 0 ? 'text-[#4CAF50]' : 'text-white'\n                    }`}>\n                      +{getThisMonthTvShows().uniqueSeries}\n                    </p>\n                  </div>\n                </div>\n                <p className={`${styles.numberCounter} text-3xl font-bold text-white font-poppins mb-1 leading-none`}>{getTotalEpisodes().uniqueSeries}</p>\n                <p className=\"text-sm text-gray-300 font-poppins\">{t('profile.watched_series')}</p>\n              </div>\n            </div>\n\n            {/* Toplam Bölümler */}\n            <div className={`${styles.statisticCard} bg-gradient-to-br from-[#333] to-[#444] rounded-xl p-4 border border-[#96CEB4]/10 hover:border-[#96CEB4]/30 transition-all duration-300 relative overflow-hidden`}>\n              <div className={`${styles.microChart} absolute inset-0 opacity-5`}>\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 40\" preserveAspectRatio=\"none\">\n                  <path d=\"M0,35 Q30,10 60,30 T100,15 L100,40 L0,40 Z\" fill=\"url(#episodeGradient)\" />\n                  <defs>\n                    <linearGradient id=\"episodeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#96CEB4\" />\n                      <stop offset=\"100%\" stopColor=\"#FFEAA7\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n              \n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"w-10 h-10 bg-[#96CEB4]/20 rounded-lg flex items-center justify-center\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"#96CEB4\">\n                      <path d=\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8 12.5v-9l6 4.5-6 4.5z\"/>\n                    </svg>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 font-poppins\">{t('profile.average')}</p>\n                    <p className=\"text-xs text-white font-poppins\">{getTotalEpisodes().average}/{t('profile.per_series')}</p>\n                  </div>\n                </div>\n                <p className={`${styles.numberCounter} text-3xl font-bold text-white font-poppins mb-1 leading-none`}>{getTotalEpisodes().total}</p>\n                <p className=\"text-sm text-gray-300 font-poppins\">{t('profile.total_episodes')}</p>\n              </div>\n            </div>\n\n            {/* Harcanan Süre - İyileştirilmiş */}\n            <div className={`${styles.statisticCard} bg-gradient-to-br from-[#333] to-[#444] rounded-xl p-4 border border-[#FFEAA7]/10 hover:border-[#FFEAA7]/30 transition-all duration-300 relative overflow-hidden`}>\n              <div className={`${styles.microChart} absolute inset-0 opacity-5`}>\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 40\" preserveAspectRatio=\"none\">\n                  <path d=\"M0,20 Q40,5 80,25 L100,30 L100,40 L0,40 Z\" fill=\"url(#timeGradient)\" />\n                  <defs>\n                    <linearGradient id=\"timeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#FFEAA7\" />\n                      <stop offset=\"100%\" stopColor=\"#FDCB6E\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n              \n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"w-10 h-10 bg-[#FFEAA7]/20 rounded-lg flex items-center justify-center\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"#FFEAA7\">\n                      <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n                      <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/>\n                    </svg>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 font-poppins\">{t('profile.daily')}</p>\n                    <p className=\"text-xs text-white font-poppins\">\n                      {getDailyAverageWatchTime()}{t('profile.minutes')}\n                    </p>\n                  </div>\n                </div>\n                <p className=\"text-lg font-bold text-white font-poppins mb-1 leading-tight\">\n                  {LocalStorageService.formatWatchTime(profile.totalWatchTimeMinutes)}\n                </p>\n                <p className=\"text-sm text-gray-300 font-poppins\">{t('profile.total_duration')}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Hızlı Bakış - Görselleştirilmiş */}\n          <div className={`${styles.quickOverviewCard} bg-gradient-to-r from-[#333]/80 to-[#444]/80 rounded-2xl p-6 backdrop-blur-sm border border-[#FE7743]/10`}>\n            <h3 className=\"text-lg font-semibold text-[#FE7743] mb-6 font-poppins flex items-center\">\n              <svg width=\"20\" height=\"20\" className=\"mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n              </svg>\n              {t('profile.quick_overview')}\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Ortalama Puan - Dairesel Progress */}\n              <div className={`${styles.hoverScale} flex items-center space-x-4`}>\n                <div className=\"relative w-16 h-16\">\n                  <svg className={`${styles.progressRing} w-16 h-16 transform -rotate-90`} viewBox=\"0 0 32 32\">\n                    <circle\n                      cx=\"16\"\n                      cy=\"16\"\n                      r=\"14\"\n                      stroke=\"#333\"\n                      strokeWidth=\"2\"\n                      fill=\"none\"\n                    />\n                    <circle\n                      cx=\"16\"\n                      cy=\"16\"\n                      r=\"14\"\n                      stroke=\"#FE7743\"\n                      strokeWidth=\"2\"\n                      fill=\"none\"\n                      strokeDasharray={`${(getAverageRating().average / 10) * 88} 88`}\n                      strokeLinecap=\"round\"\n                      className=\"transition-all duration-1000\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-white font-bold text-sm\">{getAverageRating().average || '0'}</span>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-gray-300 text-sm font-poppins\">{t('profile.average_rating')}</p>\n                  <p className=\"text-white font-semibold font-poppins\">\n                    {getAverageRating().average >= 8 ? t('profile.perfect') : \n                     getAverageRating().average >= 7 ? t('profile.very_good') : \n                     getAverageRating().average >= 6 ? t('profile.good') : \n                     getAverageRating().average >= 5 ? t('profile.average_quality') : t('profile.needs_improvement')}\n                  </p>\n                </div>\n              </div>\n\n              {/* En Çok İzlenen Tür - Chip */}\n              <div className={`${styles.hoverScale} flex items-center space-x-4`}>\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#4ECDC4] to-[#45B7D1] rounded-full flex items-center justify-center\">\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"white\">\n                    <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"text-gray-300 text-sm font-poppins\">{t('profile.favorite_genre')}</p>\n                  <span className={`${styles.chipComponent} inline-block bg-[#4ECDC4] text-white px-3 py-1 rounded-full text-sm font-medium`}>\n                    {getFavoriteGenre()}\n                  </span>\n                </div>\n              </div>\n\n              {/* Bu Ay İzlenen - Trend Göstergesi */}\n              <div className={`${styles.hoverScale} flex items-center space-x-4`}>\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#96CEB4] to-[#FFEAA7] rounded-full flex items-center justify-center\">\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"white\">\n                    <path d=\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"text-gray-300 text-sm font-poppins\">{t('profile.this_month_watched')}</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-white font-semibold font-poppins\">\n                      {getThisMonthWatched().movies} {t('profile.film')}, {getThisMonthWatched().tvShows} {t('profile.series')}\n                    </span>\n                    {getThisMonthWatched().trend !== 0 && (\n                      <span className={`${styles.trendIndicator} text-xs font-medium px-2 py-1 rounded-full ${\n                        getThisMonthWatched().trend > 0 \n                          ? 'text-[#4CAF50] bg-[#4CAF50]/20' \n                          : 'text-[#FF6B6B] bg-[#FF6B6B]/20'\n                      }`}>\n                        {getThisMonthWatched().trend > 0 ? '+' : ''}{getThisMonthWatched().trend} {getThisMonthWatched().trend > 0 ? '↗' : '↘'}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Sinema Zaman Tüneli */}\n              <div className={`${styles.hoverScale} flex items-center space-x-4`}>\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#DDA0DD] to-[#9B59B6] rounded-full flex items-center justify-center\">\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"white\">\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                  </svg>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-300 text-sm font-poppins mb-2\">{t('profile.time_timeline')}</p>\n                  <div className=\"flex space-x-1\">\n                    <div className={`${styles.timelineProgress} flex-1 bg-[#333] rounded-full h-2`}>\n                      <div className=\"bg-gradient-to-r from-[#FF6B6B] to-[#FE7743] h-2 rounded-full\" style={{width: `${getTimeTimeline().progress}%`}}></div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n                    <span>{t('profile.nineties')}</span>\n                    <span>{t('profile.twenties')}</span>\n                    <span>{t('profile.twenties_2020')}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Son Aktiviteler Modülü */}\n        <div className=\"bg-[#222] rounded-[20px] p-6 mb-6 shadow-lg\">\n          <div className=\"flex items-center mb-6\">\n            <div className=\"w-1 h-6 bg-[#FE7743] rounded-full mr-3\"></div>\n            <h2 className=\"text-xl font-bold text-white font-poppins\">{t('profile.recent_activities')}</h2>\n          </div>\n\n          {/* Yatayda Kaydırılabilir Poster Şeridi */}\n          <div className=\"overflow-x-auto pb-4\">\n            <div className=\"flex space-x-4 min-w-max\">\n              {/* Son izlenen filmler için sadece posterler */}\n              {getRecentMovies().map((movie, index) => (\n                <MoviePosterCard\n                  key={`recent-${index}`}\n                  title={movie.title}\n                  poster={movie.poster}\n                />\n              ))}\n              \n              {/* Eğer hiç film yoksa */}\n              {getRecentMovies().length === 0 && (\n                <div className=\"flex-shrink-0 w-24 h-36 bg-[#333] rounded-xl flex flex-col items-center justify-center border-2 border-dashed border-gray-600\">\n                  <svg width=\"32\" height=\"32\" className=\"text-gray-500 mb-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\"/>\n                  </svg>\n                  <p className=\"text-gray-400 text-xs text-center font-poppins\">\n                    {t('empty_states.no_movies')}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Alt Bilgi */}\n          <div className=\"flex items-center mt-4 pt-4 border-t border-[#333]\">\n            <p className=\"text-gray-400 text-sm font-poppins\">\n              {t('profile.last_activities', { count: getRecentMovies().length })}\n            </p>\n          </div>\n        </div>\n\n        {/* Rozetler ve Başarılar */}\n        <div className=\"bg-[#222] rounded-[20px] p-6 mb-6 shadow-lg\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-1 h-6 bg-[#FE7743] rounded-full mr-3\"></div>\n              <h2 className=\"text-xl font-bold text-white font-poppins\">{t('profile.badges_achievements')}</h2>\n            </div>\n            <div className=\"bg-[#FE7743] text-white px-3 py-1 rounded-full text-sm font-medium font-poppins\">\n              {profile.earnedBadgeCount}/{profile.badges.length}\n            </div>\n          </div>\n\n          {/* Rozet Grid */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {profile.badges.map((badge) => (\n              <div\n                key={badge.id}\n                className={`\n                  relative p-5 rounded-2xl border-2 transition-all duration-300 hover:scale-105 cursor-pointer\n                  ${badge.isEarned \n                    ? `bg-gradient-to-br from-[#FE7743]/25 to-[#E56A3C]/15 border-[#FE7743] shadow-xl shadow-[#FE7743]/30 \n                       hover:shadow-2xl hover:shadow-[#FE7743]/40 hover:border-[#FE7743]` \n                    : `bg-[#1A1A1A] border-gray-700 opacity-70 hover:opacity-90 hover:border-gray-600\n                       bg-gradient-to-br from-[#222] to-[#333]`\n                  }\n                `}\n                onClick={() => handleBadgeClick(badge)}\n              >\n                {/* Kazanılmış rozet için ışıltı efekti */}\n                {badge.isEarned && (\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-[#FE7743]/10 to-transparent \n                                  animate-pulse rounded-2xl\"></div>\n                )}\n\n                {/* Kazanılmış işareti */}\n                {badge.isEarned && (\n                  <div className=\"absolute -top-3 -right-3 w-8 h-8 bg-gradient-to-br from-[#FE7743] to-[#E56A3C] \n                                  rounded-full flex items-center justify-center shadow-lg border-2 border-white\">\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"white\">\n                      <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n                    </svg>\n                  </div>\n                )}\n                \n                {/* Kategori çizgisi */}\n                <div className={`absolute top-0 left-0 w-full h-1 rounded-t-2xl ${getCategoryColor(badge.category)}`}></div>\n                \n                <div className=\"text-center relative z-10\">\n                  {/* İkon */}\n                  <div className={`text-4xl mb-3 transition-all duration-300 ${\n                    badge.isEarned \n                      ? 'filter-none transform scale-110' \n                      : 'filter grayscale opacity-50'\n                  }`}>\n                    {badge.icon}\n                  </div>\n                  \n                  {/* Başlık */}\n                  <h4 className={`text-sm font-bold mb-2 font-poppins leading-tight ${\n                    badge.isEarned ? 'text-white' : 'text-gray-500'\n                  }`}>\n                    {t(badge.name)}\n                  </h4>\n                  \n                  {/* Açıklama */}\n                  <p className={`text-xs leading-snug font-poppins mb-3 ${\n                    badge.isEarned ? 'text-gray-300' : 'text-gray-600'\n                  }`}>\n                    {t(badge.description)}\n                  </p>\n                  \n                  {/* Kazanılma tarihi */}\n                  {badge.isEarned && badge.earnedAt && (\n                    <div className=\"mt-3 px-2 py-1 bg-[#FE7743]/20 rounded-full\">\n                      <p className=\"text-xs text-[#FE7743] font-medium font-poppins\">\n                        {new Date(badge.earnedAt).toLocaleDateString('tr-TR')}\n                      </p>\n                    </div>\n                  )}\n                  \n                  {/* İlerleme çubuğu (kazanılmamış rozetler için) */}\n                  {!badge.isEarned && (\n                    <div className=\"mt-3\">\n                      <div className={`w-full bg-gray-700 rounded-full h-2.5 overflow-hidden ${\n                        getProgressForBadge(badge) / badge.requirement > 0.8 ? 'ring-2 ring-[#FE7743]/50' : ''\n                      }`}>\n                        <div \n                          className={`h-full rounded-full transition-all duration-700 ease-out ${\n                            getProgressForBadge(badge) / badge.requirement > 0.8 \n                              ? 'bg-gradient-to-r from-[#FE7743] to-[#E56A3C] shadow-lg progressBarGlow' \n                              : getProgressForBadge(badge) / badge.requirement > 0.5\n                              ? 'bg-gradient-to-r from-[#FE7743]/80 to-[#E56A3C]/80'\n                              : 'bg-gradient-to-r from-gray-500 to-gray-600'\n                          }`}\n                          style={{ \n                            width: `${Math.min(100, (getProgressForBadge(badge) / badge.requirement) * 100)}%` \n                          }}\n                        ></div>\n                      </div>\n                      <div className=\"flex justify-between items-center mt-2\">\n                        <p className=\"text-xs text-gray-500 font-poppins\">\n                          {getProgressForBadge(badge)}/{badge.requirement}\n                        </p>\n                        <p className={`text-xs font-poppins ${\n                          getProgressForBadge(badge) / badge.requirement > 0.8 \n                            ? 'text-[#FE7743] font-semibold' \n                            : 'text-gray-400'\n                        }`}>\n                          %{Math.round((getProgressForBadge(badge) / badge.requirement) * 100)}\n                        </p>\n                      </div>\n                      {getProgressForBadge(badge) / badge.requirement > 0.8 && (\n                        <p className=\"text-xs text-[#FE7743] font-medium font-poppins mt-1 animate-pulse\">\n                          {t('profile.very_close_to_target')}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  \n                  {/* Kilit ikonu */}\n                  {!badge.isEarned && getProgressForBadge(badge) === 0 && (\n                    <div className=\"absolute top-2 right-2 w-6 h-6 bg-gray-700 rounded-full flex items-center justify-center\">\n                      <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"gray\">\n                        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/>\n                      </svg>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Başarı Özeti */}\n          <div className=\"mt-8 bg-gradient-to-r from-[#333]/50 to-[#444]/50 rounded-xl p-6 border border-[#FE7743]/20\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-[#FE7743] font-poppins flex items-center\">\n                <svg width=\"20\" height=\"20\" className=\"mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n                </svg>\n                {t('profile.achievement_summary')}\n              </h3>\n              <div className={`px-3 py-1 rounded-full text-sm font-bold font-poppins ${getLevelStyle()}`}>\n                {getUserLevel()}\n              </div>\n            </div>\n            \n            {/* İlerleme çemberi */}\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"relative w-24 h-24\">\n                <svg className=\"w-24 h-24 transform -rotate-90\" viewBox=\"0 0 24 24\">\n                  <circle\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"#333\"\n                    strokeWidth=\"2\"\n                    fill=\"transparent\"\n                  />\n                  <circle\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"#FE7743\"\n                    strokeWidth=\"2\"\n                    fill=\"transparent\"\n                    strokeDasharray={`${2 * Math.PI * 10}`}\n                    strokeDashoffset={`${2 * Math.PI * 10 * (1 - profile.earnedBadgeCount / profile.badges.length)}`}\n                    className=\"transition-all duration-1000 ease-out\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-xl font-bold text-white font-poppins\">\n                    %{Math.round((profile.earnedBadgeCount / profile.badges.length) * 100)}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"bg-[#222] rounded-lg p-3 text-center\">\n                <div className=\"text-2xl font-bold text-[#FE7743] font-poppins\">{profile.earnedBadgeCount}</div>\n                <div className=\"text-gray-300 font-poppins\">{t('profile.earned')}</div>\n              </div>\n              <div className=\"bg-[#222] rounded-lg p-3 text-center\">\n                <div className=\"text-2xl font-bold text-gray-400 font-poppins\">\n                  {profile.badges.length - profile.earnedBadgeCount}\n                </div>\n                <div className=\"text-gray-300 font-poppins\">{t('profile.remaining')}</div>\n              </div>\n              <div className=\"bg-[#222] rounded-lg p-3 text-center col-span-2\">\n                <div className=\"text-gray-300 text-sm font-poppins mb-1\">{t('profile.next_target')}</div>\n                <div className=\"text-white font-medium font-poppins\">\n                  {getNextBadgeTarget() ? t(getNextBadgeTarget()?.name || '') : t('profile.all_badges_earned')}\n                </div>\n                {getNextBadgeTarget() && (\n                  <div className=\"text-xs text-gray-400 mt-1 font-poppins\">\n                    {getProgressForBadge(getNextBadgeTarget())}/{getNextBadgeTarget()?.requirement}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          </div>\n        </div>\n        <BottomNavBar />\n      </div>\n    </IonContent>\n  </IonPage>\n  );\n};\n\nexport default Profile;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/geminiService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1519,1522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1519,1522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import i18n from '../i18n';\n\n// Film önerisi için Gemini AI entegrasyonu\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';\n\n// TMDB API URL\nconst TMDB_API_URL = 'https://api.themoviedb.org/3';\n\n// Film önerisi response tipi\nexport interface MovieSuggestion {\n  title: string;\n  year: number;\n  tmdbId: number;\n  poster_path: string;\n}\n\n// Dil kodlarını Gemini için uygun formata çevir\nconst getLanguageCode = (language: string): string => {\n  switch (language) {\n    case 'tr':\n      return 'Turkish';\n    case 'en':\n      return 'English';\n    case 'es':\n      return 'Spanish';\n    default:\n      return 'Turkish';\n  }\n};\n\n// TMDB dil kodlarını al\nconst getTmdbLanguageCode = (language: string): string => {\n  switch (language) {\n    case 'tr':\n      return 'tr-TR';\n    case 'en':\n      return 'en-US';\n    case 'es':\n      return 'es-ES';\n    default:\n      return 'tr-TR';\n  }\n};\n\n/**\n * Gemini'den gelen raw text'i parse ederek film adlarını çıkarır\n */\nfunction parseMovieTitles(rawText: string): string[] {\n  if (!rawText) return [];\n  \n  // Numaralandırılmış satırları bul (1. Film Adı (Yıl) formatında)\n  const movieLines = rawText.match(/^(\\d+\\.\\s.*)$/gm);\n  if (!movieLines) return [];\n\n  return movieLines\n    .map(line => line.replace(/^\\d+\\.\\s*/, '').trim()) // Numaralandırmayı kaldır\n    .filter(line => line.length > 0); // Boş satırları filtrele\n}\n\n/**\n * TMDB'de film arama yapar\n */\nasync function searchTmdb(query: string): Promise<any> {\n  const tmdbApiKey = import.meta.env.VITE_TMDB_API_KEY;\n  if (!tmdbApiKey) {\n    throw new Error('TMDB API anahtarı tanımlanmamış');\n  }\n\n  const currentLanguage = i18n.language || 'tr';\n  const tmdbLanguageCode = getTmdbLanguageCode(currentLanguage);\n\n  // Yıl bilgisini çıkar\n  let year = '';\n  const yearMatch = query.match(/\\((\\d{4})\\)/);\n  if (yearMatch) year = yearMatch[1];\n  const movieTitle = query.replace(/\\s\\(\\d{4}\\)$/, '').trim();\n\n  let url = `${TMDB_API_URL}/search/movie?query=${encodeURIComponent(movieTitle)}&language=${tmdbLanguageCode}&api_key=${tmdbApiKey}`;\n  if (year) url += `&year=${year}`;\n\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`TMDB arama başarısız: ${query}`);\n    return null;\n  }\n  \n  const data = await response.json();\n  return data.results && data.results.length > 0 ? data.results[0] : null;\n}\n\n/**\n * Kullanıcının tarifiine göre Gemini AI'dan film önerileri alır\n * @param promptText - Kullanıcının film tarifi\n * @param excludedMovies - Daha önce önerilen filmlerin listesi (opsiyonel)\n * @returns Film önerileri dizisi\n */\nexport const getMovieSuggestions = async (\n  promptText: string,\n  excludedMovies?: MovieSuggestion[]\n): Promise<MovieSuggestion[]> => {\n  try {\n    const currentLanguage = i18n.language || 'tr';\n    const languageCode = getLanguageCode(currentLanguage);\n    \n    let prompt = `Lütfen kullanıcının şu isteğine göre birbirinden farklı 9 film öner: \"${promptText}\".`;\n\n    // Dışlama mantığını ekle\n    if (excludedMovies && excludedMovies.length > 0) {\n      const excludedTitles = excludedMovies.map(movie => `${movie.title} (${movie.year})`).join(', ');\n      prompt += `\\n\\nAşağıdaki filmleri kesinlikle önerme: ${excludedTitles}.`;\n    }\n\n    prompt += `\\n\\nSadece numaralandırılmış bir liste halinde, her satırda bir tane olacak şekilde, filmlerin orijinal adını ve parantez içinde çıkış yılını döndür. Başka hiçbir açıklama, selamlama veya ek metin ekleme.\n\nÖrneğin:\n1. The Dark Knight (2008)\n2. Inception (2010)\n3. Pulp Fiction (1994)\n4. The Matrix (1999)\n5. Interstellar (2014)\n6. The Shawshank Redemption (1994)\n7. Fight Club (1999)\n8. Forrest Gump (1994)\n9. The Godfather (1972)\n\nPlease respond in ${languageCode} language.`;\n\n    // Gemini API'ye istek gönder\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    \n    if (!apiKey) {\n      throw new Error('Gemini API anahtarı tanımlanmamış. VITE_GEMINI_API_KEY environment variable\\'ını ayarlayın.');\n    }\n\n    const response = await fetch(`${GEMINI_API_URL}?key=${apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 1.0,\n          topK: 40,\n          topP: 0.95,\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Gemini API isteği başarısız: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // API yanıtını kontrol et\n    if (\n      !data.candidates ||\n      !Array.isArray(data.candidates) ||\n      data.candidates.length === 0 ||\n      !data.candidates[0].content ||\n      !data.candidates[0].content.parts ||\n      !data.candidates[0].content.parts[0].text\n    ) {\n      throw new Error('Gemini API\\'den geçersiz yanıt alındı');\n    }\n\n    const responseText = data.candidates[0].content.parts[0].text;\n    console.log('Gemini raw response:', responseText);\n    \n    // Film adlarını parse et\n    const movieTitles = parseMovieTitles(responseText);\n    console.log('Parsed movie titles:', movieTitles);\n\n    if (movieTitles.length < 9) {\n      console.warn(`Gemini'den ${movieTitles.length} film adı alındı, 9 bekleniyordu`);\n    }\n\n    // TMDB'de her film için arama yap\n    const moviePromises = movieTitles.map(title => searchTmdb(title));\n    const tmdbResults = await Promise.all(moviePromises);\n    \n    // Bulunan filmleri filtrele ve formatla\n    const foundMovies = tmdbResults\n      .filter(movie => movie !== null)\n      .map(movie => ({\n        title: movie.title,\n        year: new Date(movie.release_date).getFullYear(),\n        tmdbId: movie.id,\n        poster_path: movie.poster_path\n      }));\n\n    console.log(`${foundMovies.length} film TMDB'de bulundu`);\n\n    if (foundMovies.length === 0) {\n      const errorMessage = currentLanguage === 'tr' \n        ? 'Önerilen filmlerin hiçbiri TMDB veritabanında bulunamadı. Lütfen tekrar deneyin.'\n        : currentLanguage === 'es'\n        ? 'Ninguna de las películas sugeridas se encontró en la base de datos de TMDB. Por favor, inténtalo de nuevo.'\n        : 'None of the suggested movies were found in the TMDB database. Please try again.';\n      throw new Error(errorMessage);\n    }\n\n    return foundMovies;\n\n  } catch (error) {\n    console.error('Film önerisi alınırken hata:', error);\n    throw error;\n  }\n};\n\n/**\n * Film önerisi isteğini test etmek için yardımcı fonksiyon\n * @param promptText - Test edilecek tarif\n */\nexport const testMovieSuggestions = async (promptText: string): Promise<void> => {\n  try {\n    console.log('Film önerisi testi başlıyor...');\n    console.log('Prompt:', promptText);\n    \n    const suggestions = await getMovieSuggestions(promptText);\n    \n    console.log('Alınan öneriler:');\n    suggestions.forEach((movie, index) => {\n      console.log(`${index + 1}. ${movie.title} (${movie.year}) - TMDB ID: ${movie.tmdbId}`);\n    });\n    \n  } catch (error) {\n    console.error('Test hatası:', error);\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/localStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2750,2753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2750,2753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":538,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":539,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Local Storage Service for Moviloi\n// Manages persistent storage of movie logs and user preferences\n\nexport interface MovieLog {\n  id: string;\n  title: string;\n  date: string;\n  rating: string;\n  review: string;\n  poster: string;\n  type: 'watched' | 'watchlist';\n  mediaType: 'movie' | 'tv';\n  tmdbId?: number;\n  // Dizi için ekstra alanlar\n  seasonCount?: number;\n  episodeCount?: number;\n  seasonNumber?: number;   // Sezon numarası (bölüm kaydetme için)\n  runtime?: number; // dakika cinsinden\n  // Filtre sistemi için gerekli yeni alanlar\n  contentType: 'movie' | 'tv';\n  seriesId?: string;       // Dizi ID'si (Gruplama için kritik)\n  seriesTitle?: string;    // Dizi Adı (Gruplanmış kart başlığı için)\n  seriesPoster?: string;   // Dizinin Ana Poster Resmi (Gruplanmış kart görseli için)\n  // Rozet sistemi için gerekli alanlar\n  genres?: string[];       // Film/dizi türleri\n  releaseYear?: number;    // Yayın yılı\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserPreferences {\n  favoriteGenres: string[];\n  darkMode: boolean;\n  language: string;\n  defaultView: 'watched' | 'watchlist';\n  fcmToken?: string;\n  notificationPreferences?: {\n    enabled: boolean;\n    newReleases: boolean;\n    watchlistReminders: boolean;\n    seasonFinales: boolean;\n    recommendations: boolean;\n  };\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'milestone' | 'genre' | 'time' | 'streak' | 'special';\n  requirement: number;\n  earnedAt?: string;\n  isEarned: boolean;\n}\n\nexport interface UserProfile {\n  id: string;\n  username: string;\n  fullName?: string;\n  bio?: string;\n  avatar?: string;\n  joinDate: string;\n  favoriteMovies: string[];\n  favoriteGenres: string[];\n  // Temel sayımlar\n  watchedCount: number;\n  watchlistCount: number;\n  // Detaylı istatistikler\n  watchedMovieCount: number;\n  watchedTvCount: number;\n  totalEpisodesWatched: number;\n  totalWatchTimeMinutes: number;\n  // Rozetler\n  badges: Badge[];\n  earnedBadgeCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst STORAGE_KEYS = {\n  MOVIE_LOGS: 'moviloi-movie-logs',\n  USER_PREFERENCES: 'moviloi-user-preferences',\n  USER_PROFILE: 'moviloi-user-profile',\n  LAST_ACTIVE_TAB: 'moviloi-last-active-tab'\n} as const;\n\nexport class LocalStorageService {\n  // Utility method to generate unique IDs\n  private static generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  // Movie Logs Operations\n  static getMovieLogs(): MovieLog[] {\n    try {\n      const logs = localStorage.getItem(STORAGE_KEYS.MOVIE_LOGS);\n      const parsedLogs = logs ? JSON.parse(logs) : [];\n      \n      // Mevcut verileri yeni formata migrate et\n      return parsedLogs.map((log: any) => ({\n        ...log,\n        mediaType: log.mediaType || 'movie', // Varsayılan olarak movie\n        contentType: log.contentType || log.mediaType || 'movie', // contentType öncelik ver\n        runtime: log.runtime || (log.mediaType === 'tv' || log.contentType === 'tv' ? 45 : 120),\n        seasonCount: log.seasonCount || undefined,\n        episodeCount: log.episodeCount || undefined,\n        // Dizi için eksik alanları doldur\n        seriesId: log.seriesId || (log.contentType === 'tv' || log.mediaType === 'tv' ? log.tmdbId?.toString() : undefined),\n        seriesTitle: log.seriesTitle || (log.contentType === 'tv' || log.mediaType === 'tv' ? log.title : undefined),\n        seriesPoster: log.seriesPoster || undefined, // Bölüm poster'ini dizi poster'i olarak kullanma\n      }));\n    } catch (error) {\n      console.error('Error reading movie logs from localStorage:', error);\n      return [];\n    }\n  }\n\n  static saveMovieLog(log: Omit<MovieLog, 'id' | 'createdAt' | 'updatedAt'>): MovieLog {\n    try {\n      const now = new Date().toISOString();\n      const newLog: MovieLog = {\n        ...log,\n        id: this.generateId(),\n        createdAt: now,\n        updatedAt: now\n      };\n\n      const existingLogs = this.getMovieLogs();\n      const updatedLogs = [...existingLogs, newLog];\n      localStorage.setItem(STORAGE_KEYS.MOVIE_LOGS, JSON.stringify(updatedLogs));\n      \n      return newLog;\n    } catch (error) {\n      console.error('Error saving movie log to localStorage:', error);\n      throw new Error('Failed to save movie log');\n    }\n  }\n\n  static updateMovieLog(id: string, updates: Partial<Omit<MovieLog, 'id' | 'createdAt'>>): MovieLog | null {\n    try {\n      const logs = this.getMovieLogs();\n      const logIndex = logs.findIndex(log => log.id === id);\n      \n      if (logIndex === -1) {\n        console.error(`Movie log with id ${id} not found`);\n        return null;\n      }\n\n      const updatedLog: MovieLog = {\n        ...logs[logIndex],\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n\n      logs[logIndex] = updatedLog;\n      localStorage.setItem(STORAGE_KEYS.MOVIE_LOGS, JSON.stringify(logs));\n      \n      return updatedLog;\n    } catch (error) {\n      console.error('Error updating movie log:', error);\n      return null;\n    }\n  }\n\n  static deleteMovieLog(id: string): boolean {\n    try {\n      const logs = this.getMovieLogs();\n      const filteredLogs = logs.filter(log => log.id !== id);\n      \n      if (filteredLogs.length === logs.length) {\n        console.error(`Movie log with id ${id} not found`);\n        return false;\n      }\n\n      localStorage.setItem(STORAGE_KEYS.MOVIE_LOGS, JSON.stringify(filteredLogs));\n      return true;\n    } catch (error) {\n      console.error('Error deleting movie log:', error);\n      return false;\n    }\n  }\n\n  // Yeni yardımcı fonksiyon: tmdbId ile kayıt type'ını güncelleme\n  static updateLogTypeByTmdbId(tmdbId: number, newType: 'watched' | 'watchlist', mediaType: 'movie' | 'tv' = 'movie'): MovieLog | null {\n    try {\n      const logs = this.getMovieLogs();\n      const logIndex = logs.findIndex(log => log.tmdbId === tmdbId && log.mediaType === mediaType);\n      \n      if (logIndex === -1) {\n        // Kayıt yoksa null döndür - yeni kayıt oluşturma işlemi component'te yapılacak\n        return null;\n      }\n\n      // Mevcut kaydı güncelle\n      const updatedLog: MovieLog = {\n        ...logs[logIndex],\n        type: newType,\n        updatedAt: new Date().toISOString()\n      };\n\n      logs[logIndex] = updatedLog;\n      localStorage.setItem(STORAGE_KEYS.MOVIE_LOGS, JSON.stringify(logs));\n      \n      return updatedLog;\n    } catch (error) {\n      console.error('Error updating log type by tmdbId:', error);\n      return null;\n    }\n  }\n\n  // tmdbId ile kayıt durumunu kontrol etme\n  static getLogStatusByTmdbId(tmdbId: number, mediaType: 'movie' | 'tv' = 'movie'): 'watched' | 'watchlist' | null {\n    try {\n      const logs = this.getMovieLogs();\n      const log = logs.find(log => log.tmdbId === tmdbId && log.mediaType === mediaType);\n      return log ? log.type : null;\n    } catch (error) {\n      console.error('Error getting log status by tmdbId:', error);\n      return null;\n    }\n  }\n\n  static getMovieLogsByType(type: 'watched' | 'watchlist'): MovieLog[] {\n    const logs = this.getMovieLogs();\n    return logs.filter(log => log.type === type);\n  }\n\n  // User Preferences Operations\n  static getUserPreferences(): UserPreferences {\n    try {\n      const prefs = localStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);\n      return prefs ? JSON.parse(prefs) : {\n        favoriteGenres: [],\n        darkMode: true,\n        language: 'tr',\n        defaultView: 'watched'\n      };\n    } catch (error) {\n      console.error('Error reading user preferences:', error);\n      return {\n        favoriteGenres: [],\n        darkMode: true,\n        language: 'tr',\n        defaultView: 'watched'\n      };\n    }\n  }\n\n  static saveUserPreferences(preferences: UserPreferences): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.USER_PREFERENCES, JSON.stringify(preferences));\n    } catch (error) {\n      console.error('Error saving user preferences:', error);\n      throw new Error('Failed to save user preferences');\n    }\n  }\n\n  // User Profile Operations\n  static getUserProfile(): UserProfile | null {\n    try {\n      const profile = localStorage.getItem(STORAGE_KEYS.USER_PROFILE);\n      if (!profile) return null;\n      \n      const parsedProfile = JSON.parse(profile);\n      \n      // Mevcut profilleri yeni formata migrate et\n      return {\n        ...parsedProfile,\n        watchedMovieCount: parsedProfile.watchedMovieCount || 0,\n        watchedTvCount: parsedProfile.watchedTvCount || 0,\n        totalEpisodesWatched: parsedProfile.totalEpisodesWatched || 0,\n        totalWatchTimeMinutes: parsedProfile.totalWatchTimeMinutes || 0,\n        badges: parsedProfile.badges || this.getBadgeTemplates(),\n        earnedBadgeCount: parsedProfile.earnedBadgeCount || 0,\n      };\n    } catch (error) {\n      console.error('Error reading user profile:', error);\n      return null;\n    }\n  }\n\n  static createUserProfile(profileData: Omit<UserProfile, 'id' | 'createdAt' | 'updatedAt' | 'watchedCount' | 'watchlistCount' | 'watchedMovieCount' | 'watchedTvCount' | 'totalEpisodesWatched' | 'totalWatchTimeMinutes' | 'badges' | 'earnedBadgeCount'>): UserProfile {\n    try {\n      const now = new Date().toISOString();\n      const newProfile: UserProfile = {\n        ...profileData,\n        id: this.generateId(),\n        watchedCount: 0,\n        watchlistCount: 0,\n        watchedMovieCount: 0,\n        watchedTvCount: 0,\n        totalEpisodesWatched: 0,\n        totalWatchTimeMinutes: 0,\n        badges: this.getBadgeTemplates(),\n        earnedBadgeCount: 0,\n        createdAt: now,\n        updatedAt: now\n      };\n\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(newProfile));\n      return newProfile;\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n      throw new Error('Failed to create user profile');\n    }\n  }\n\n  static updateUserProfile(updates: Partial<Omit<UserProfile, 'id' | 'createdAt'>>): UserProfile | null {\n    try {\n      const profile = this.getUserProfile();\n      \n      if (!profile) {\n        console.error('User profile not found');\n        return null;\n      }\n\n      const updatedProfile: UserProfile = {\n        ...profile,\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(updatedProfile));\n      return updatedProfile;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      return null;\n    }\n  }\n\n  static updateProfileStats(): void {\n    try {\n      const profile = this.getUserProfile();\n      if (!profile) return;\n\n      const logs = this.getMovieLogs();\n      const watchedLogs = logs.filter(log => log.type === 'watched');\n      const watchlistLogs = logs.filter(log => log.type === 'watchlist');\n      \n      // Temel sayımlar\n      const watchedCount = watchedLogs.length;\n      const watchlistCount = watchlistLogs.length;\n      \n      // Detaylı istatistikler\n      const watchedMovieCount = watchedLogs.filter(log => log.mediaType === 'movie').length;\n      const watchedTvCount = watchedLogs.filter(log => log.mediaType === 'tv').length;\n      \n      // Toplam bölüm sayısı (diziler için)\n      const totalEpisodesWatched = watchedLogs\n        .filter(log => log.mediaType === 'tv')\n        .reduce((total, log) => total + (log.episodeCount || 0), 0);\n      \n      // Toplam izleme süresi (dakika cinsinden)\n      // Film için ortalama 120 dakika, dizi bölümü için ortalama 45 dakika varsayalım\n      const totalWatchTimeMinutes = watchedLogs.reduce((total, log) => {\n        if (log.runtime) {\n          return total + log.runtime;\n        } else if (log.mediaType === 'movie') {\n          return total + 120; // Ortalama film süresi\n        } else if (log.mediaType === 'tv' && log.episodeCount) {\n          return total + (log.episodeCount * 45); // Ortalama bölüm süresi\n        }\n        return total;\n      }, 0);\n\n      // Profil istatistiklerini güncelle\n      this.updateUserProfile({\n        watchedCount,\n        watchlistCount,\n        watchedMovieCount,\n        watchedTvCount,\n        totalEpisodesWatched,\n        totalWatchTimeMinutes\n      });\n\n      // Rozetleri kontrol et ve ödüllendir\n      this.checkAndAwardBadges();\n    } catch (error) {\n      console.error('Error updating profile stats:', error);\n    }\n  }\n\n  // Süre formatını düzenleyen yardımcı fonksiyon\n  static formatWatchTime(totalMinutes: number): string {\n    const days = Math.floor(totalMinutes / (24 * 60));\n    const hours = Math.floor((totalMinutes % (24 * 60)) / 60);\n    const minutes = totalMinutes % 60;\n\n    if (days > 0) {\n      return `${days} Gün ${hours} Saat ${minutes} Dakika`;\n    } else if (hours > 0) {\n      return `${hours} Saat ${minutes} Dakika`;\n    } else {\n      return `${minutes} Dakika`;\n    }\n  }\n\n  // Rozet sistemi\n  static getBadgeTemplates(): Badge[] {\n    return [\n      {\n        id: 'first_movie',\n        name: 'badges.first_movie.name',\n        description: 'badges.first_movie.description',\n        icon: '🎬',\n        category: 'milestone',\n        requirement: 1,\n        isEarned: false\n      },\n      {\n        id: 'comedy_expert',\n        name: 'badges.comedy_expert.name',\n        description: 'badges.comedy_expert.description',\n        icon: '🎭',\n        category: 'genre',\n        requirement: 25,\n        isEarned: false\n      },\n      {\n        id: 'drama_expert',\n        name: 'badges.drama_expert.name',\n        description: 'badges.drama_expert.description',\n        icon: '🎭',\n        category: 'genre',\n        requirement: 25,\n        isEarned: false\n      },\n      {\n        id: 'action_expert',\n        name: 'badges.action_expert.name',\n        description: 'badges.action_expert.description',\n        icon: '⚡',\n        category: 'genre',\n        requirement: 25,\n        isEarned: false\n      },\n      {\n        id: 'series_killer',\n        name: 'badges.series_killer.name',\n        description: 'badges.series_killer.description',\n        icon: '📺',\n        category: 'special',\n        requirement: 1,\n        isEarned: false\n      },\n      {\n        id: 'nostalgia_traveler',\n        name: 'badges.nostalgia_traveler.name',\n        description: 'badges.nostalgia_traveler.description',\n        icon: '🕰️',\n        category: 'time',\n        requirement: 10,\n        isEarned: false\n      },\n      {\n        id: 'marathon_runner',\n        name: 'badges.marathon_runner.name',\n        description: 'badges.marathon_runner.description',\n        icon: '🏃‍♂️',\n        category: 'streak',\n        requirement: 3,\n        isEarned: false\n      },\n      {\n        id: 'century_watcher',\n        name: 'badges.century_watcher.name',\n        description: 'badges.century_watcher.description',\n        icon: '💯',\n        category: 'milestone',\n        requirement: 100,\n        isEarned: false\n      },\n      {\n        id: 'binge_watcher',\n        name: 'badges.binge_watcher.name',\n        description: 'badges.binge_watcher.description',\n        icon: '📱',\n        category: 'milestone',\n        requirement: 50,\n        isEarned: false\n      },\n      {\n        id: 'time_traveler',\n        name: 'badges.time_traveler.name',\n        description: 'badges.time_traveler.description',\n        icon: '⏰',\n        category: 'time',\n        requirement: 6000, // 100 saat = 6000 dakika\n        isEarned: false\n      },\n      {\n        id: 'critic_master',\n        name: 'badges.critic_master.name',\n        description: 'badges.critic_master.description',\n        icon: '✍️',\n        category: 'special',\n        requirement: 50,\n        isEarned: false\n      },\n      {\n        id: 'collector',\n        name: 'badges.collector.name',\n        description: 'badges.collector.description',\n        icon: '🗃️',\n        category: 'milestone',\n        requirement: 25,\n        isEarned: false\n      }\n    ];\n  }\n\n  // Tamamlanan dizileri bulan yardımcı fonksiyon\n  static getCompletedSeries(watchedLogs: MovieLog[]): string[] {\n    const seriesGroups = new Map<string, { totalSeasons: number; watchedSeasons: Set<number> }>();\n    \n    watchedLogs\n      .filter(log => log.mediaType === 'tv' && log.seriesId && log.seasonNumber)\n      .forEach(log => {\n        const seriesId = log.seriesId!;\n        const seasonNumber = log.seasonNumber!;\n        \n        if (!seriesGroups.has(seriesId)) {\n          // seasonCount varsa kullan, yoksa en az 2 sezon varsay (1 sezon diziler için rozet verilmez)\n          const totalSeasons = log.seasonCount && log.seasonCount > 1 ? log.seasonCount : 2;\n          seriesGroups.set(seriesId, {\n            totalSeasons: totalSeasons,\n            watchedSeasons: new Set()\n          });\n        }\n        \n        const series = seriesGroups.get(seriesId)!;\n        series.watchedSeasons.add(seasonNumber);\n      });\n    \n    // Tüm sezonları izlenen dizileri döndür (en az 2 sezon olmalı)\n    return Array.from(seriesGroups.entries())\n      .filter(([_, series]) => series.totalSeasons >= 2 && series.watchedSeasons.size >= series.totalSeasons)\n      .map(([seriesId, _]) => seriesId);\n  }\n\n  // Bir günde 3+ film izleme kontrolü\n  private static hasMarathonDay(watchedLogs: MovieLog[]): boolean {\n    const dailyCounts = new Map<string, number>();\n    \n    watchedLogs\n      .filter(log => log.mediaType === 'movie')\n      .forEach(log => {\n        const date = log.date.split('T')[0]; // Sadece tarih kısmını al\n        dailyCounts.set(date, (dailyCounts.get(date) || 0) + 1);\n      });\n    \n    // Herhangi bir günde 3+ film var mı?\n    const maxDailyCount = Math.max(...Array.from(dailyCounts.values()), 0);\n    return maxDailyCount >= 3;\n  }\n\n  static checkAndAwardBadges(): Badge[] {\n    try {\n      const profile = this.getUserProfile();\n      if (!profile) return [];\n\n      const logs = this.getMovieLogs();\n      const watchedLogs = logs.filter(log => log.type === 'watched');\n      const badgeTemplates = this.getBadgeTemplates();\n      const newlyEarnedBadges: Badge[] = [];\n\n      // Mevcut rozetleri al (eğer yoksa boş array)\n      const currentBadges = profile.badges || [];\n\n      badgeTemplates.forEach(template => {\n        const existingBadge = currentBadges.find(badge => badge.id === template.id);\n        \n        if (!existingBadge || !existingBadge.isEarned) {\n          let shouldEarn = false;\n\n          switch (template.id) {\n            case 'first_movie': {\n              shouldEarn = profile.watchedMovieCount >= 1;\n              break;\n            }\n            case 'comedy_expert': {\n              const comedyCount = watchedLogs.filter(log =>\n                log.mediaType === 'movie' &&\n                log.genres &&\n                log.genres.some(genre =>\n                  genre.toLowerCase().includes('komedi') ||\n                  genre.toLowerCase().includes('comedy')\n                )\n              ).length;\n              shouldEarn = comedyCount >= 25;\n              break;\n            }\n            case 'drama_expert': {\n              const dramaCount = watchedLogs.filter(log =>\n                log.mediaType === 'movie' &&\n                log.genres &&\n                log.genres.some(genre =>\n                  genre.toLowerCase().includes('drama') ||\n                  genre.toLowerCase().includes('dram')\n                )\n              ).length;\n              shouldEarn = dramaCount >= 25;\n              break;\n            }\n            case 'action_expert': {\n              const actionCount = watchedLogs.filter(log =>\n                log.mediaType === 'movie' &&\n                log.genres &&\n                log.genres.some(genre =>\n                  genre.toLowerCase().includes('aksiyon') ||\n                  genre.toLowerCase().includes('action')\n                )\n              ).length;\n              shouldEarn = actionCount >= 25;\n              break;\n            }\n            case 'series_killer': {\n              const completedSeries = this.getCompletedSeries(watchedLogs);\n              shouldEarn = completedSeries.length >= 1;\n              break;\n            }\n            case 'nostalgia_traveler': {\n              const oldMoviesCount = watchedLogs.filter(log =>\n                log.mediaType === 'movie' &&\n                log.releaseYear &&\n                log.releaseYear < 1990\n              ).length;\n              shouldEarn = oldMoviesCount >= 10;\n              break;\n            }\n            case 'marathon_runner': {\n              const hasMarathonDay = this.hasMarathonDay(watchedLogs);\n              shouldEarn = hasMarathonDay;\n              break;\n            }\n            case 'century_watcher': {\n              shouldEarn = profile.watchedMovieCount >= 100;\n              break;\n            }\n            case 'binge_watcher': {\n              shouldEarn = profile.totalEpisodesWatched >= 50;\n              break;\n            }\n            case 'time_traveler': {\n              shouldEarn = profile.totalWatchTimeMinutes >= 6000; // 100 saat\n              break;\n            }\n            case 'critic_master': {\n              const reviewedMoviesCount = watchedLogs.filter(log =>\n                log.review && log.review.trim().length > 0\n              ).length;\n              shouldEarn = reviewedMoviesCount >= 50;\n              break;\n            }\n            case 'collector': {\n              const watchlistCount = logs.filter(log => log.type === 'watchlist').length;\n              shouldEarn = watchlistCount >= 25;\n              break;\n            }\n          }\n\n          if (shouldEarn) {\n            const earnedBadge: Badge = {\n              ...template,\n              isEarned: true,\n              earnedAt: new Date().toISOString()\n            };\n            \n            newlyEarnedBadges.push(earnedBadge);\n          }\n        }\n      });\n\n      // Profildeki rozetleri güncelle\n      if (newlyEarnedBadges.length > 0) {\n        const updatedBadges = [...currentBadges];\n        \n        newlyEarnedBadges.forEach(newBadge => {\n          const existingIndex = updatedBadges.findIndex(badge => badge.id === newBadge.id);\n          if (existingIndex >= 0) {\n            updatedBadges[existingIndex] = newBadge;\n          } else {\n            updatedBadges.push(newBadge);\n          }\n        });\n\n        // Henüz kazanılmamış rozetleri de ekle\n        badgeTemplates.forEach(template => {\n          if (!updatedBadges.find(badge => badge.id === template.id)) {\n            updatedBadges.push(template);\n          }\n        });\n\n        const earnedCount = updatedBadges.filter(badge => badge.isEarned).length;\n\n        this.updateUserProfile({\n          badges: updatedBadges,\n          earnedBadgeCount: earnedCount\n        });\n      } else if (currentBadges.length === 0) {\n        // İlk kez rozet sistemi kuruluyorsa tüm şablonları ekle\n        this.updateUserProfile({\n          badges: badgeTemplates,\n          earnedBadgeCount: 0\n        });\n      }\n\n      return newlyEarnedBadges;\n    } catch (error) {\n      console.error('Error checking badges:', error);\n      return [];\n    }\n  }\n\n  // Active Tab Operations\n  static getLastActiveTab(): 'watched' | 'watchlist' {\n    try {\n      const tab = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE_TAB);\n      return (tab as 'watched' | 'watchlist') || 'watched';\n    } catch (error) {\n      console.error('Error reading last active tab:', error);\n      return 'watched';\n    }\n  }\n\n  static saveLastActiveTab(tab: 'watched' | 'watchlist'): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE_TAB, tab);\n    } catch (error) {\n      console.error('Error saving last active tab:', error);\n    }\n  }\n\n  // Storage Management\n  static clearAllData(): void {\n    try {\n      Object.values(STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key);\n      });\n    } catch (error) {\n      console.error('Error clearing localStorage:', error);\n      throw new Error('Failed to clear storage');\n    }\n  }\n\n  static getStorageSize(): string {\n    try {\n      let totalSize = 0;\n      Object.values(STORAGE_KEYS).forEach(key => {\n        const item = localStorage.getItem(key);\n        if (item) {\n          totalSize += item.length;\n        }\n      });\n      return `${(totalSize / 1024).toFixed(2)} KB`;\n    } catch (error) {\n      console.error('Error calculating storage size:', error);\n      return '0 KB';\n    }\n  }\n\n  // Data Export/Import for backup\n  static exportData(): string {\n    try {\n      const data = {\n        movieLogs: this.getMovieLogs(),\n        userPreferences: this.getUserPreferences(),\n        userProfile: this.getUserProfile(),\n        lastActiveTab: this.getLastActiveTab(),\n        exportDate: new Date().toISOString()\n      };\n      return JSON.stringify(data, null, 2);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw new Error('Failed to export data');\n    }\n  }\n\n  static importData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.movieLogs) {\n        localStorage.setItem(STORAGE_KEYS.MOVIE_LOGS, JSON.stringify(data.movieLogs));\n      }\n      \n      if (data.userPreferences) {\n        localStorage.setItem(STORAGE_KEYS.USER_PREFERENCES, JSON.stringify(data.userPreferences));\n      }\n\n      if (data.userProfile) {\n        localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(data.userProfile));\n      }\n      \n      if (data.lastActiveTab) {\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE_TAB, data.lastActiveTab);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n}\n\nexport default LocalStorageService;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/networkService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1834,1837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1834,1837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Network } from '@capacitor/network';\nimport { Capacitor } from '@capacitor/core';\n\nexport class NetworkService {\n  \n  /**\n   * Current network status'unu kontrol eder\n   */\n  static async getNetworkStatus() {\n    try {\n      if (Capacitor.isNativePlatform()) {\n        return await Network.getStatus();\n      } else {\n        return {\n          connected: navigator.onLine,\n          connectionType: navigator.onLine ? 'unknown' : 'none'\n        };\n      }\n    } catch (error) {\n      console.error('Network status check failed:', error);\n      return {\n        connected: true, // Hata durumunda conservative approach\n        connectionType: 'unknown'\n      };\n    }\n  }\n\n  /**\n   * Network bağlantısı var mı kontrol eder\n   */\n  static async isConnected(): Promise<boolean> {\n    const status = await this.getNetworkStatus();\n    return status.connected;\n  }\n\n  /**\n   * API çağrıları için network kontrolü yapar\n   * Offline ise cached data kullanımı önerilir\n   */\n  static async checkNetworkForApiCall(): Promise<{\n    canMakeRequest: boolean;\n    shouldUseCache: boolean;\n    networkType: string;\n  }> {\n    const status = await this.getNetworkStatus();\n    \n    return {\n      canMakeRequest: status.connected,\n      shouldUseCache: !status.connected,\n      networkType: status.connectionType\n    };\n  }\n\n  /**\n   * Bağlantı tipine göre data quality önerisi\n   */\n  static getDataQualityRecommendation(connectionType: string): 'high' | 'medium' | 'low' {\n    switch (connectionType.toLowerCase()) {\n      case 'wifi':\n      case '4g':\n        return 'high';\n      case '3g':\n        return 'medium';\n      case '2g':\n      case 'slow-2g':\n        return 'low';\n      default:\n        return 'medium';\n    }\n  }\n\n  /**\n   * Network değişikliklerini dinleyen utility\n   */\n  static addNetworkListener(callback: (status: any) => void) {\n    if (Capacitor.isNativePlatform()) {\n      return Network.addListener('networkStatusChange', callback);\n    } else {\n      const handleOnline = () => callback({ connected: true, connectionType: 'unknown' });\n      const handleOffline = () => callback({ connected: false, connectionType: 'none' });\n      \n      window.addEventListener('online', handleOnline);\n      window.addEventListener('offline', handleOffline);\n      \n      return {\n        remove: () => {\n          window.removeEventListener('online', handleOnline);\n          window.removeEventListener('offline', handleOffline);\n        }\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/pushNotifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2417,2420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2417,2420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7295,7298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7295,7298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PushNotifications, Token, ActionPerformed, PushNotificationSchema } from '@capacitor/push-notifications';\nimport { Capacitor } from '@capacitor/core';\nimport { LocalStorageService } from './localStorage';\n\nexport interface NotificationPreferences {\n  enabled: boolean;\n  newReleases: boolean;\n  watchlistReminders: boolean;\n  seasonFinales: boolean;\n  recommendations: boolean;\n}\n\nexport interface PushNotificationPayload {\n  id: string;\n  title: string;\n  body: string;\n  type: 'new_release' | 'watchlist_reminder' | 'season_finale' | 'recommendation' | 'general';\n  data?: {\n    movieId?: string;\n    seriesId?: string;\n    tmdbId?: string;\n    contentType?: 'movie' | 'tv';\n    deepLink?: string;\n  };\n}\n\nclass PushNotificationService {\n  private isInitialized = false;\n  private registrationToken: string | null = null;\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    // Push notifications sadece native platformlarda çalışır\n    if (!Capacitor.isNativePlatform()) {\n      console.log('Push notifications are not supported on this platform');\n      return;\n    }\n\n    try {\n      // İzin durumunu kontrol et\n      const permissionStatus = await PushNotifications.checkPermissions();\n      \n      if (permissionStatus.receive === 'prompt') {\n        // İzin iste\n        const permission = await PushNotifications.requestPermissions();\n        if (permission.receive !== 'granted') {\n          throw new Error('Push notification permission denied');\n        }\n      } else if (permissionStatus.receive === 'denied') {\n        throw new Error('Push notification permission denied');\n      }\n\n      // Event listener'ları kaydet\n      this.registerEventListeners();\n\n      // FCM token için kayıt yap\n      await PushNotifications.register();\n\n      this.isInitialized = true;\n      console.log('Push notifications initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize push notifications:', error);\n      throw error;\n    }\n  }\n\n  private registerEventListeners(): void {\n    // Registration başarılı olduğunda\n    PushNotifications.addListener('registration', (token: Token) => {\n      console.log('Registration token: ', token.value);\n      this.registrationToken = token.value;\n      this.saveTokenToStorage(token.value);\n    });\n\n    // Registration başarısız olduğunda\n    PushNotifications.addListener('registrationError', (error: any) => {\n      console.error('Registration error: ', error.message);\n    });\n\n    // Push notification geldiğinde (uygulama açıkken)\n    PushNotifications.addListener('pushNotificationReceived', (notification: PushNotificationSchema) => {\n      console.log('Push notification received: ', notification);\n      this.handleForegroundNotification(notification);\n    });\n\n    // Notification'a tıklandığında (uygulama kapalıyken)\n    PushNotifications.addListener('pushNotificationActionPerformed', (notification: ActionPerformed) => {\n      console.log('Push notification action performed: ', notification);\n      this.handleNotificationAction(notification);\n    });\n  }\n\n  private handleForegroundNotification(notification: PushNotificationSchema): void {\n    // Uygulama açıkken gelen bildirimleri işle\n    // Toast notification göster veya modal aç\n    const customData = notification.data as PushNotificationPayload['data'];\n    \n    // Bu bildirim için uygun eylemi gerçekleştir\n    if (customData?.deepLink) {\n      // Deep link handling için event emit et\n      document.dispatchEvent(new CustomEvent('push-notification-received', {\n        detail: { notification, data: customData }\n      }));\n    }\n  }\n\n  private handleNotificationAction(actionPerformed: ActionPerformed): void {\n    // Notification'a tıklama sonrası eylemler\n    const notification = actionPerformed.notification;\n    const customData = notification.data as PushNotificationPayload['data'];\n\n    if (customData) {\n      // Deep link handling\n      if (customData.deepLink) {\n        document.dispatchEvent(new CustomEvent('push-notification-action', {\n          detail: { data: customData }\n        }));\n      }\n\n      // Content'e yönlendirme\n      if (customData.movieId || customData.seriesId) {\n        document.dispatchEvent(new CustomEvent('push-notification-content', {\n          detail: {\n            contentType: customData.contentType,\n            id: customData.movieId || customData.seriesId,\n            tmdbId: customData.tmdbId\n          }\n        }));\n      }\n    }\n  }\n\n  private saveTokenToStorage(token: string): void {\n    try {\n      localStorage.setItem('fcm_token', token);\n      \n      // User preferences'a da kaydet\n      const prefs = LocalStorageService.getUserPreferences();\n      if (prefs) {\n        LocalStorageService.saveUserPreferences({\n          ...prefs,\n          fcmToken: token\n        });\n      }\n    } catch (error) {\n      console.error('Failed to save FCM token:', error);\n    }\n  }\n\n  async getRegistrationToken(): Promise<string | null> {\n    if (this.registrationToken) {\n      return this.registrationToken;\n    }\n\n    // Storage'dan token'ı al\n    try {\n      const storedToken = localStorage.getItem('fcm_token');\n      if (storedToken) {\n        this.registrationToken = storedToken;\n        return storedToken;\n      }\n    } catch (error) {\n      console.error('Failed to get stored FCM token:', error);\n    }\n\n    return null;\n  }\n\n  async getNotificationPreferences(): Promise<NotificationPreferences> {\n    try {\n      const prefs = LocalStorageService.getUserPreferences();\n      return prefs?.notificationPreferences || {\n        enabled: true,\n        newReleases: true,\n        watchlistReminders: true,\n        seasonFinales: true,\n        recommendations: true\n      };\n    } catch (error) {\n      console.error('Failed to get notification preferences:', error);\n      return {\n        enabled: false,\n        newReleases: false,\n        watchlistReminders: false,\n        seasonFinales: false,\n        recommendations: false\n      };\n    }\n  }\n\n  async updateNotificationPreferences(preferences: NotificationPreferences): Promise<void> {\n    try {\n      const currentPrefs = LocalStorageService.getUserPreferences();\n      if (currentPrefs) {\n        LocalStorageService.saveUserPreferences({\n          ...currentPrefs,\n          notificationPreferences: preferences\n        });\n      }\n\n      // Backend'e de gönder (eğer varsa)\n      const token = await this.getRegistrationToken();\n      if (token) {\n        // Bu kısım backend implementasyonuna göre değişecek\n        console.log('Notification preferences updated:', preferences);\n      }\n    } catch (error) {\n      console.error('Failed to update notification preferences:', error);\n      throw error;\n    }\n  }\n\n  async scheduleLocalNotification(payload: PushNotificationPayload, delay: number = 0): Promise<void> {\n    // Local notification için gelecekte eklenebilecek fonksiyonalite\n    // Şu an için sadece log\n    console.log('Local notification scheduled:', payload, 'delay:', delay);\n  }\n\n  async removeAllDeliveredNotifications(): Promise<void> {\n    try {\n      await PushNotifications.removeAllDeliveredNotifications();\n    } catch (error) {\n      console.error('Failed to remove delivered notifications:', error);\n    }\n  }\n\n  async getDeliveredNotifications(): Promise<any[]> {\n    try {\n      const result = await PushNotifications.getDeliveredNotifications();\n      return result.notifications || [];\n    } catch (error) {\n      console.error('Failed to get delivered notifications:', error);\n      return [];\n    }\n  }\n\n  // Backend ile token senkronizasyonu için\n  async syncTokenWithBackend(userId?: string): Promise<void> {\n    const token = await this.getRegistrationToken();\n    if (!token) {\n      console.warn('No FCM token available for sync');\n      return;\n    }\n\n    try {\n      // Bu kısım backend API'nize göre implementasyonu yapılacak\n      console.log('Syncing FCM token with backend:', token, 'for user:', userId);\n      \n      // Örnek API çağrısı:\n      // const response = await fetch('/api/user/fcm-token', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify({ token, userId })\n      // });\n      \n    } catch (error) {\n      console.error('Failed to sync FCM token with backend:', error);\n    }\n  }\n}\n\n// Singleton instance\nexport const pushNotificationService = new PushNotificationService();\n\n// Utility fonksiyonlar\nexport const initializePushNotifications = async (): Promise<void> => {\n  return pushNotificationService.initialize();\n};\n\nexport const getPushNotificationToken = async (): Promise<string | null> => {\n  return pushNotificationService.getRegistrationToken();\n};\n\nexport const updateNotificationSettings = async (preferences: NotificationPreferences): Promise<void> => {\n  return pushNotificationService.updateNotificationPreferences(preferences);\n};\n\nexport const getNotificationSettings = async (): Promise<NotificationPreferences> => {\n  return pushNotificationService.getNotificationPreferences();\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/services/tmdb.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":655,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19579,19582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19579,19582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":674,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":674,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20219,20222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20219,20222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":755,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":755,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23012,23015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23012,23015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":808,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":808,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24911,24914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24911,24914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":933,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":933,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29094,29097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29094,29097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":956,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":956,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29816,29819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29816,29819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { NetworkService } from './networkService';\n\n// Raw TMDB API Response types\ninterface TMDBRawMovieResult {\n  id: number;\n  title: string;\n  release_date?: string;\n  poster_path?: string | null;\n  vote_average?: number;\n  overview?: string;\n  backdrop_path?: string | null;\n  runtime?: number;\n  genres?: Array<{ id: number; name: string }>;\n}\n\ninterface TMDBRawSeriesResult {\n  id: number;\n  name: string;\n  first_air_date?: string;\n  poster_path?: string | null;\n  vote_average?: number;\n  overview?: string;\n  backdrop_path?: string | null;\n  number_of_seasons?: number;\n  number_of_episodes?: number;\n  genres?: Array<{ id: number; name: string }>;\n  seasons?: Array<{\n    id: number;\n    season_number: number;\n    name: string;\n    poster_path?: string | null;\n    episode_count: number;\n    air_date?: string;\n  }>;\n}\n\ninterface TMDBRawVideoResult {\n  id: string;\n  key: string;\n  name: string;\n  site: string;\n  type: string;\n  official: boolean;\n}\n\nexport interface TMDBMovieResult {\n  id: number;\n  title: string;\n  release_date?: string;\n  poster_path?: string;\n}\n\nexport interface TMDBPaginatedResponse {\n  results: TMDBMovieResult[];\n  page: number;\n  total_pages: number;\n  total_results: number;\n}\n\nexport interface TMDBCastMember {\n  id: number;\n  name: string;\n  character: string;\n  profile_path?: string;\n  order: number;\n}\n\nexport interface TMDBMovieDetails {\n  id: number;\n  title: string;\n  release_date?: string;\n  poster_path?: string;\n  backdrop_path?: string;\n  overview?: string;\n  runtime?: number;\n  vote_average?: number;\n  genres?: { id: number; name: string }[];\n}\n\nexport interface TMDBSeriesDetails {\n  id: number;\n  name: string;\n  first_air_date?: string;\n  poster_path?: string;\n  backdrop_path?: string;\n  overview?: string;\n  number_of_seasons?: number;\n  number_of_episodes?: number;\n  vote_average?: number;\n  genres?: { id: number; name: string }[];\n  seasons?: Array<{\n    id: number;\n    season_number: number;\n    name: string;\n    poster_path?: string;\n    episode_count: number;\n    air_date?: string;\n    episodes?: Episode[];\n  }>;\n}\n\nexport interface Episode {\n  id: number;\n  episode_number: number;\n  name: string;\n  runtime?: number;\n  season_number: number;\n  still_path?: string;\n  air_date?: string;\n  overview?: string;\n  vote_average?: number;\n}\n\nexport interface SeasonDetails {\n  _id: string;\n  air_date: string;\n  episodes: Episode[];\n  name: string;\n  overview: string;\n  id: number;\n  poster_path: string;\n  season_number: number;\n}\n\nexport interface TMDBActorDetails {\n  id: number;\n  name: string;\n  birthday?: string;\n  deathday?: string;\n  place_of_birth?: string;\n  biography?: string;\n  profile_path?: string;\n  known_for_department?: string;\n  popularity?: number;\n}\n\nexport interface TMDBActorCredit {\n  id: number;\n  title?: string; // For movies\n  name?: string; // For TV shows\n  character: string;\n  release_date?: string;\n  first_air_date?: string;\n  poster_path?: string;\n  vote_average?: number;\n  media_type: 'movie' | 'tv';\n}\n\nexport interface TMDBSearchResult {\n  id: number;\n  title?: string; // For movies\n  name?: string; // For TV shows/people\n  release_date?: string;\n  first_air_date?: string;\n  poster_path?: string;\n  profile_path?: string; // For people\n  vote_average?: number;\n  media_type: 'movie' | 'tv' | 'person';\n  known_for_department?: string; // For people\n}\n\nexport interface TMDBMultiSearchResponse {\n  movies: TMDBSearchResult[];\n  series: TMDBSearchResult[];\n  persons: TMDBSearchResult[];\n}\n\nexport interface TMDBReview {\n  id: string;\n  author: string;\n  author_details: {\n    name: string;\n    username: string;\n    avatar_path?: string;\n    rating?: number;\n  };\n  content: string;\n  created_at: string;\n  updated_at: string;\n  url: string;\n  movieInfo?: {\n    id: number;\n    title: string;\n    poster_path?: string;\n    mediaType: 'movie' | 'tv' | 'person';\n  };\n}\n\nexport interface TMDBReviewsResponse {\n  id: number;\n  page: number;\n  results: TMDBReview[];\n  total_pages: number;\n  total_results: number;\n}\n\nconst TMDB_API_KEY = import.meta.env.VITE_TMDB_API_KEY || 'your-api-key-here';\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\n\n// Network aware API wrapper\nconst fetchWithNetworkCheck = async (url: string, options?: RequestInit): Promise<Response> => {\n  const networkStatus = await NetworkService.checkNetworkForApiCall();\n  \n  if (!networkStatus.canMakeRequest) {\n    throw new Error('No network connection available. Please check your internet connection.');\n  }\n  \n  // Bağlantı tipine göre timeout ayarla\n  const quality = NetworkService.getDataQualityRecommendation(networkStatus.networkType);\n  const timeout = quality === 'low' ? 15000 : quality === 'medium' ? 10000 : 5000;\n  \n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal,\n    });\n    \n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error instanceof Error && error.name === 'AbortError') {\n      throw new Error(`Network request timeout (${timeout}ms). Please try again.`);\n    }\n    throw error;\n  }\n};\n\n// Genel önbellekleme sistemi - generic tip kullanarak any yerine daraltılmış cache\ntype CacheValue = TMDBMovieResult[] | TMDBSeriesDetails | TMDBActorDetails | TMDBActorCredit[] | unknown;\nconst cache = new Map<string, CacheValue>();\nconst cacheTimestamps = new Map<string, number>();\nconst CACHE_DURATION_MS = 15 * 60 * 1000; // 15 dakika\n\n// Önbelleği temizlemek için yardımcı fonksiyon\nexport const clearCache = () => {\n  cache.clear();\n  cacheTimestamps.clear();\n  console.log('Cache cleared successfully.');\n};\n\n// Sürekli önbellek boyutunu kontrol etmek için yardımcı fonksiyon\nexport const getCacheStats = () => {\n  return {\n    cacheSize: cache.size,\n    timestampSize: cacheTimestamps.size,\n    entries: Array.from(cache.keys())\n  };\n};\n\n// Simple cache for cast data (mevcut)\nconst castCache = new Map<number, { data: TMDBCastMember[]; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nexport const searchMovies = async (query: string): Promise<TMDBMovieResult[]> => {\n  try {\n    // Check cache first\n    const cacheKey = `search_movies_${query.toLowerCase().trim()}`;\n    const cached = cache.get(cacheKey);\n    const timestamp = cacheTimestamps.get(cacheKey);\n    \n    if (cached && timestamp && Date.now() - timestamp < CACHE_DURATION_MS) {\n      console.log(`Cache hit for: ${query}`);\n      return cached as TMDBMovieResult[];\n    }\n\n    const response = await fetchWithNetworkCheck(\n      `${TMDB_BASE_URL}/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to search movies: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const results = (data.results || []).map((movie: TMDBRawMovieResult) => ({\n      id: movie.id,\n      title: movie.title,\n      release_date: movie.release_date,\n      poster_path: movie.poster_path\n    }));\n\n    // Cache the result\n    cache.set(cacheKey, results);\n    cacheTimestamps.set(cacheKey, Date.now());\n    console.log(`Cached search result for: ${query}`);\n\n    return results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    return [];\n  }\n};\n\nexport const searchSeries = async (query: string): Promise<TMDBMovieResult[]> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/search/tv?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to search series: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return (data.results || []).map((series: TMDBRawSeriesResult) => ({\n      id: series.id,\n      title: series.name, // TV serileri için name kullanılır\n      release_date: series.first_air_date, // TV serileri için first_air_date kullanılır\n      poster_path: series.poster_path\n    }));\n  } catch (error) {\n    console.error('Error searching series:', error);\n    return [];\n  }\n};\n\nexport const getMovieCast = async (movieId: number): Promise<TMDBCastMember[]> => {\n  try {\n    // Validate movieId\n    if (!movieId || isNaN(movieId) || movieId <= 0) {\n      throw new Error('Invalid movie ID provided');\n    }\n\n    // Check cache first\n    const cached = castCache.get(movieId);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      return cached.data;\n    }\n\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/${movieId}/credits?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(`Movie with ID ${movieId} not found`);\n      }\n      throw new Error(`Failed to fetch cast: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const cast = (data.cast || []).slice(0, 10);\n    \n    // Cache the result\n    castCache.set(movieId, { data: cast, timestamp: Date.now() });\n    \n    return cast;\n  } catch (error) {\n    console.error('Error fetching cast:', error);\n    throw new Error('Failed to load cast members. Please try again.');\n  }\n};\n\nexport const getPopularMovies = async (): Promise<TMDBMovieResult[]> => {\n  try {\n    // 5 sayfa çekerek yaklaşık 100 film elde ediyoruz (20 film/sayfa)\n    const pages = [1, 2, 3, 4, 5];\n    const allMovies: TMDBMovieResult[] = [];\n    \n    // Parallel API çağrıları yaparak performansı artırıyoruz\n    const promises = pages.map(page => \n      fetch(`${TMDB_BASE_URL}/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=${page}`)\n    );\n    \n    const responses = await Promise.all(promises);\n    \n    // Tüm response'ları kontrol et ve verileri birleştir\n    for (const response of responses) {\n      if (!response.ok) {\n        throw new Error(`Failed to fetch popular movies: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      const mappedMovies = (data.results || []).map((movie: TMDBRawMovieResult) => ({\n        id: movie.id,\n        title: movie.title,\n        release_date: movie.release_date,\n        poster_path: movie.poster_path\n      }));\n      \n      allMovies.push(...mappedMovies);\n    }\n    \n    return allMovies;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    throw new Error('Failed to load popular movies. Please try again.');\n  }\n};\n\nexport const getMoviesByGenre = async (genreId: number, page: number = 1): Promise<TMDBPaginatedResponse> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/discover/movie?api_key=${TMDB_API_KEY}&with_genres=${genreId}&language=en-US&page=${page}&sort_by=popularity.desc`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch movies by genre: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return {\n      results: (data.results || []).map((movie: TMDBRawMovieResult) => ({\n        id: movie.id,\n        title: movie.title,\n        release_date: movie.release_date,\n        poster_path: movie.poster_path\n      })),\n      page: data.page,\n      total_pages: data.total_pages,\n      total_results: data.total_results\n    };\n  } catch (error) {\n    console.error('Error fetching movies by genre:', error);\n    throw new Error('Failed to load movies by genre. Please try again.');\n  }\n};\n\nexport const getSeriesByGenre = async (genreId: number, page: number = 1): Promise<TMDBPaginatedResponse> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/discover/tv?api_key=${TMDB_API_KEY}&with_genres=${genreId}&language=en-US&page=${page}&sort_by=popularity.desc`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch series by genre: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return {\n      results: (data.results || []).map((series: TMDBRawSeriesResult) => ({\n        id: series.id,\n        title: series.name, // TV serileri için name kullanılır\n        release_date: series.first_air_date, // TV serileri için first_air_date kullanılır\n        poster_path: series.poster_path\n      })),\n      page: data.page,\n      total_pages: data.total_pages,\n      total_results: data.total_results\n    };\n  } catch (error) {\n    console.error('Error fetching series by genre:', error);\n    throw new Error('Failed to load series by genre. Please try again.');\n  }\n};\n\nexport const getPopularSeries = async (): Promise<TMDBMovieResult[]> => {\n  try {\n    // 5 sayfa çekerek yaklaşık 100 dizi elde ediyoruz (20 dizi/sayfa)\n    const pages = [1, 2, 3, 4, 5];\n    const allSeries: TMDBMovieResult[] = [];\n    \n    // Parallel API çağrıları yaparak performansı artırıyoruz\n    const promises = pages.map(page => \n      fetch(`${TMDB_BASE_URL}/tv/popular?api_key=${TMDB_API_KEY}&language=en-US&page=${page}`)\n    );\n    \n    const responses = await Promise.all(promises);\n    \n    // Tüm response'ları kontrol et ve verileri birleştir\n    for (const response of responses) {\n      if (!response.ok) {\n        throw new Error(`Failed to fetch popular series: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      // TV series results have different structure, map them to our interface\n      const mappedSeries = (data.results || []).map((series: TMDBRawSeriesResult) => ({\n        id: series.id,\n        title: series.name, // TV series use 'name' instead of 'title'\n        release_date: series.first_air_date, // TV series use 'first_air_date'\n        poster_path: series.poster_path\n      }));\n      \n      allSeries.push(...mappedSeries);\n    }\n    \n    return allSeries;\n  } catch (error) {\n    console.error('Error fetching popular series:', error);\n    throw new Error('Failed to load popular series. Please try again.');\n  }\n};\n\nexport const getMovieDetails = async (movieId: number): Promise<TMDBMovieDetails> => {\n  const cacheKey = `movie:${movieId}`;\n  const now = Date.now();\n\n  // 1. Önbelleği kontrol et: Veri var mı ve süresi dolmuş mu?\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning movie ${movieId} from cache.`);\n    return cache.get(cacheKey) as TMDBMovieDetails;\n  }\n\n  console.log(`CACHE MISS: Fetching movie ${movieId} from API.`);\n  try {\n    // 2. Önbellekte yoksa veya süresi dolmuşsa API'ye git\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch movie details: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const movieDetails = {\n      id: data.id,\n      title: data.title,\n      release_date: data.release_date,\n      poster_path: data.poster_path,\n      backdrop_path: data.backdrop_path,\n      overview: data.overview,\n      runtime: data.runtime,\n      vote_average: data.vote_average,\n      genres: data.genres || []\n    };\n\n    // 3. Gelen veriyi ve şu anki zamanı önbelleğe kaydet\n    cache.set(cacheKey, movieDetails);\n    cacheTimestamps.set(cacheKey, now);\n\n    return movieDetails;\n  } catch (error) {\n    console.error(`Error fetching movie details for ID ${movieId}:`, error);\n    throw new Error('Failed to load movie details. Please try again.');\n  }\n};\n\nexport const getMovieTrailerKey = async (movieId: number): Promise<string | null> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/${movieId}/videos?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    if (!response.ok) {\n      throw new Error(`Failed to fetch movie videos: ${response.status}`);\n    }\n    const data = await response.json();\n    const trailer = (data.results || []).find((vid: TMDBRawVideoResult) => vid.site === 'YouTube' && vid.type === 'Trailer');\n    return trailer ? trailer.key : null;\n  } catch (error) {\n    console.error('Error fetching movie trailer:', error);\n    return null;\n  }\n};\n\nexport const getSimilarMovies = async (movieId: number): Promise<TMDBMovieResult[]> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/${movieId}/similar?api_key=${TMDB_API_KEY}&language=en-US&page=1`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch similar movies: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data.results || [];\n  } catch (error) {\n    console.error('Error fetching similar movies:', error);\n    return [];\n  }\n};\n\nexport const getSeriesDetails = async (seriesId: number): Promise<TMDBSeriesDetails> => {\n  const cacheKey = `series:${seriesId}`;\n  const now = Date.now();\n\n  // 1. Önbelleği kontrol et: Veri var mı ve süresi dolmuş mu?\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning series ${seriesId} from cache.`);\n    return cache.get(cacheKey) as TMDBSeriesDetails;\n  }\n\n  console.log(`CACHE MISS: Fetching series ${seriesId} from API.`);\n  try {\n    // 2. Önbellekte yoksa veya süresi dolmuşsa API'ye git\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch series details: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const seriesDetails = {\n      id: data.id,\n      name: data.name,\n      first_air_date: data.first_air_date,\n      poster_path: data.poster_path,\n      backdrop_path: data.backdrop_path,\n      overview: data.overview,\n      number_of_seasons: data.number_of_seasons,\n      number_of_episodes: data.number_of_episodes,\n      vote_average: data.vote_average,\n      genres: data.genres || [],\n      seasons: data.seasons || []\n    };\n\n    // 3. Gelen veriyi ve şu anki zamanı önbelleğe kaydet\n    cache.set(cacheKey, seriesDetails);\n    cacheTimestamps.set(cacheKey, now);\n\n    return seriesDetails;\n  } catch (error) {\n    console.error(`Error fetching series details for ID ${seriesId}:`, error);\n    throw new Error('Failed to load series details. Please try again.');\n  }\n};\n\nexport const getSeriesCast = async (seriesId: number): Promise<TMDBCastMember[]> => {\n  try {\n    // Check cache first\n    const cached = castCache.get(seriesId);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      return cached.data;\n    }\n\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}/credits?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch series cast: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const cast = (data.cast || []).slice(0, 10);\n    \n    // Cache the result\n    castCache.set(seriesId, { data: cast, timestamp: Date.now() });\n    \n    return cast;\n  } catch (error) {\n    console.error('Error fetching series cast:', error);\n    throw new Error('Failed to load series cast members. Please try again.');\n  }\n};\n\nexport const getSeriesTrailerKey = async (seriesId: number): Promise<string | null> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}/videos?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    if (!response.ok) {\n      throw new Error(`Failed to fetch series videos: ${response.status}`);\n    }\n    const data = await response.json();\n    const trailer = (data.results || []).find((vid: any) => vid.site === 'YouTube' && vid.type === 'Trailer');\n    return trailer ? trailer.key : null;\n  } catch (error) {\n    console.error('Error fetching series trailer:', error);\n    return null;\n  }\n};\n\nexport const getSimilarSeries = async (seriesId: number): Promise<TMDBMovieResult[]> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}/similar?api_key=${TMDB_API_KEY}&language=en-US&page=1`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch similar series: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return (data.results || []).map((series: any) => ({\n      id: series.id,\n      title: series.name,\n      release_date: series.first_air_date,\n      poster_path: series.poster_path\n    }));\n  } catch (error) {\n    console.error('Error fetching similar series:', error);\n    return [];\n  }\n};\n\nexport const getActorDetails = async (actorId: number): Promise<TMDBActorDetails> => {\n  const cacheKey = `actor:${actorId}`;\n  const now = Date.now();\n\n  // 1. Önbelleği kontrol et: Veri var mı ve süresi dolmuş mu?\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning actor ${actorId} from cache.`);\n    return cache.get(cacheKey) as TMDBActorDetails;\n  }\n\n  console.log(`CACHE MISS: Fetching actor ${actorId} from API.`);\n  try {\n    // 2. Önbellekte yoksa veya süresi dolmuşsa API'ye git\n    const response = await fetch(\n      `${TMDB_BASE_URL}/person/${actorId}?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch actor details: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const actorDetails = {\n      id: data.id,\n      name: data.name,\n      birthday: data.birthday,\n      deathday: data.deathday,\n      place_of_birth: data.place_of_birth,\n      biography: data.biography,\n      profile_path: data.profile_path,\n      known_for_department: data.known_for_department,\n      popularity: data.popularity\n    };\n\n    // 3. Gelen veriyi ve şu anki zamanı önbelleğe kaydet\n    cache.set(cacheKey, actorDetails);\n    cacheTimestamps.set(cacheKey, now);\n\n    return actorDetails;\n  } catch (error) {\n    console.error(`Error fetching actor details for ID ${actorId}:`, error);\n    throw new Error('Failed to load actor details. Please try again.');\n  }\n};\n\nexport const getActorCredits = async (actorId: number): Promise<TMDBActorCredit[]> => {\n  const cacheKey = `actor_credits:${actorId}`;\n  const now = Date.now();\n\n  // 1. Önbelleği kontrol et: Veri var mı ve süresi dolmuş mu?\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning actor credits ${actorId} from cache.`);\n    return cache.get(cacheKey) as TMDBActorCredit[];\n  }\n\n  console.log(`CACHE MISS: Fetching actor credits ${actorId} from API.`);\n  try {\n    // 2. Önbellekte yoksa veya süresi dolmuşsa API'ye git\n    const response = await fetch(\n      `${TMDB_BASE_URL}/person/${actorId}/combined_credits?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch actor credits: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('Actor credits response:', data); // Debug log\n    \n    const credits = [...(data.cast || [])].map((credit: any) => {\n      console.log('Processing credit:', credit); // Debug individual credit\n      return {\n        id: credit.id,\n        title: credit.title,\n        name: credit.name,\n        character: credit.character || 'Unknown Character',\n        release_date: credit.release_date,\n        first_air_date: credit.first_air_date,\n        poster_path: credit.poster_path,\n        vote_average: credit.vote_average,\n        media_type: credit.media_type\n      };\n    });\n    \n    console.log('Processed credits:', credits); // Debug log\n    \n    // Sort by popularity/vote average and release date\n    const sortedCredits = credits.sort((a, b) => {\n      const aDate = new Date(a.release_date || a.first_air_date || '1900-01-01').getTime();\n      const bDate = new Date(b.release_date || b.first_air_date || '1900-01-01').getTime();\n      return bDate - aDate; // Most recent first\n    });\n\n    // 3. Gelen veriyi ve şu anki zamanı önbelleğe kaydet\n    cache.set(cacheKey, sortedCredits);\n    cacheTimestamps.set(cacheKey, now);\n\n    return sortedCredits;\n  } catch (error) {\n    console.error(`Error fetching actor credits for ID ${actorId}:`, error);\n    throw new Error('Failed to load actor filmography. Please try again.');\n  }\n};\n\nexport const searchAll = async (query: string): Promise<TMDBMultiSearchResponse> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/search/multi?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to search: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const results = data.results || [];\n    \n    // Sonuçları media_type'a göre ayır\n    const movies: TMDBSearchResult[] = [];\n    const series: TMDBSearchResult[] = [];\n    const persons: TMDBSearchResult[] = [];\n    \n    results.forEach((item: any) => {\n      const searchResult: TMDBSearchResult = {\n        id: item.id,\n        title: item.title,\n        name: item.name,\n        release_date: item.release_date,\n        first_air_date: item.first_air_date,\n        poster_path: item.poster_path,\n        profile_path: item.profile_path,\n        vote_average: item.vote_average,\n        media_type: item.media_type,\n        known_for_department: item.known_for_department\n      };\n      \n      if (item.media_type === 'movie') {\n        movies.push(searchResult);\n      } else if (item.media_type === 'tv') {\n        series.push(searchResult);\n      } else if (item.media_type === 'person') {\n        persons.push(searchResult);\n      }\n    });\n    \n    return { movies, series, persons };\n  } catch (error) {\n    console.error('Error searching:', error);\n    throw new Error('Failed to search. Please try again.');\n  }\n};\n\nexport const getSeasonDetails = async (seriesId: number, seasonNumber: number): Promise<SeasonDetails> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}/season/${seasonNumber}?api_key=${TMDB_API_KEY}&language=en-US`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch season details: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error fetching details for season ${seasonNumber} of series ID ${seriesId}:`, error);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async (movieId: number, page: number = 1): Promise<TMDBReviewsResponse> => {\n  const cacheKey = `movie_reviews:${movieId}:${page}`;\n  const now = Date.now();\n\n  // Check cache first\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning movie reviews ${movieId} page ${page} from cache.`);\n    return cache.get(cacheKey) as TMDBReviewsResponse;\n  }\n\n  console.log(`CACHE MISS: Fetching movie reviews ${movieId} page ${page} from API.`);\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/${movieId}/reviews?api_key=${TMDB_API_KEY}&language=en-US&page=${page}`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch movie reviews: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Cache the result\n    cache.set(cacheKey, data);\n    cacheTimestamps.set(cacheKey, now);\n\n    return data;\n  } catch (error) {\n    console.error(`Error fetching movie reviews for ID ${movieId}:`, error);\n    throw new Error('Failed to load movie reviews. Please try again.');\n  }\n};\n\nexport const getSeriesReviews = async (seriesId: number, page: number = 1): Promise<TMDBReviewsResponse> => {\n  const cacheKey = `series_reviews:${seriesId}:${page}`;\n  const now = Date.now();\n\n  // Check cache first\n  if (cache.has(cacheKey) && (now - cacheTimestamps.get(cacheKey)!) < CACHE_DURATION_MS) {\n    console.log(`CACHE HIT: Returning series reviews ${seriesId} page ${page} from cache.`);\n    return cache.get(cacheKey) as TMDBReviewsResponse;\n  }\n\n  console.log(`CACHE MISS: Fetching series reviews ${seriesId} page ${page} from API.`);\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/${seriesId}/reviews?api_key=${TMDB_API_KEY}&language=en-US&page=${page}`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch series reviews: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Cache the result\n    cache.set(cacheKey, data);\n    cacheTimestamps.set(cacheKey, now);\n\n    return data;\n  } catch (error) {\n    console.error(`Error fetching series reviews for ID ${seriesId}:`, error);\n    throw new Error('Failed to load series reviews. Please try again.');\n  }\n};\n\nexport const getPopularMoviesWithReviews = async (): Promise<TMDBMovieResult[]> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch popular movies: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return (data.results || []).map((movie: any) => ({\n      id: movie.id,\n      title: movie.title,\n      release_date: movie.release_date,\n      poster_path: movie.poster_path\n    }));\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    throw new Error('Failed to load popular movies. Please try again.');\n  }\n};\n\nexport const getPopularSeriesWithReviews = async (): Promise<TMDBMovieResult[]> => {\n  try {\n    const response = await fetch(\n      `${TMDB_BASE_URL}/tv/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch popular series: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return (data.results || []).map((series: any) => ({\n      id: series.id,\n      title: series.name, // TV serileri için name kullanılır\n      release_date: series.first_air_date, // TV serileri için first_air_date kullanılır\n      poster_path: series.poster_path\n    }));\n  } catch (error) {\n    console.error('Error fetching popular series:', error);\n    throw new Error('Failed to load popular series. Please try again.');\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/workspaces/moviloi/src/utils/globalSeriesAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mevcut localStorage verilerini analiz etme aracı\nimport { LocalStorageService } from '../services/localStorage';\n\nexport const analyzeAllSeriesData = () => {\n  console.log('🔍 ===== GLOBAL SERİ ANALİZİ =====');\n  \n  const allLogs = LocalStorageService.getMovieLogs();\n  const seriesLogs = allLogs.filter(log => log.contentType === 'tv' || log.mediaType === 'tv');\n  \n  console.log('📊 Toplam log sayısı:', allLogs.length);\n  console.log('📺 Toplam dizi log sayısı:', seriesLogs.length);\n  \n  // Dizi ID'lerine göre grupla\n  const seriesGroups = seriesLogs.reduce((acc, log) => {\n    const seriesId = log.seriesId || 'undefined';\n    if (!acc[seriesId]) acc[seriesId] = [];\n    acc[seriesId].push(log);\n    return acc;\n  }, {} as Record<string, any[]>);\n  \n  console.log('🎭 Bulunan dizi grupları:');\n  Object.entries(seriesGroups).forEach(([seriesId, logs]) => {\n    console.log(`\\n📽️ SeriesID: ${seriesId} (${logs.length} bölüm)`);\n    console.log(`   Dizi Adı: ${logs[0]?.seriesTitle || 'Bilinmiyor'}`);\n    \n    // İlk 3 bölümün tmdbId formatını kontrol et\n    logs.slice(0, 3).forEach((log, index) => {\n      console.log(`   📋 Bölüm ${index + 1}:`, {\n        id: log.id,\n        title: log.title,\n        tmdbId: log.tmdbId,\n        tmdbIdType: typeof log.tmdbId,\n        tmdbIdString: String(log.tmdbId),\n        seriesId: log.seriesId,\n        contentType: log.contentType,\n        mediaType: log.mediaType\n      });\n    });\n  });\n  \n  console.log('\\n🚨 SORUN TESPİTİ:');\n  const problemLogs = seriesLogs.filter(log => !log.tmdbId || log.tmdbId === null || log.tmdbId === undefined);\n  console.log(`❌ tmdbId'si eksik olan bölümler: ${problemLogs.length}`);\n  \n  if (problemLogs.length > 0) {\n    console.log('🔴 Problematik bölümler:');\n    problemLogs.forEach(log => {\n      console.log(`   - ${log.title} (ID: ${log.id}) - tmdbId: ${log.tmdbId}`);\n    });\n  }\n  \n  console.log('===============================');\n  return { seriesGroups, problemLogs };\n};\n\nexport const fixMissingTmdbIds = () => {\n  console.log('🔧 tmdbId eksikliklerini düzeltmeye çalışıyor...');\n  \n  const allLogs = LocalStorageService.getMovieLogs();\n  let fixedCount = 0;\n  \n  allLogs.forEach(log => {\n    // Eğer tmdbId eksikse ve bu bir dizi bölümüyse\n    if ((!log.tmdbId || log.tmdbId === null) && (log.contentType === 'tv' || log.mediaType === 'tv')) {\n      console.log(`⚠️ tmdbId eksik: ${log.title}`);\n      \n      // Geçici çözüm: Log ID'sinden tmdbId oluştur (gerçek projelerde TMDB API'dan alınmalı)\n      const tempTmdbId = parseInt(log.id.slice(-6), 36) + 100000; // Geçici ID\n      \n      const updated = LocalStorageService.updateMovieLog(log.id, {\n        tmdbId: tempTmdbId\n      });\n      \n      if (updated) {\n        fixedCount++;\n        console.log(`✅ Düzeltildi: ${log.title} -> tmdbId: ${tempTmdbId}`);\n      }\n    }\n  });\n  \n  console.log(`🎯 ${fixedCount} adet bölümün tmdbId'si düzeltildi.`);\n  return fixedCount;\n};\n\nexport const debugSpecificSeries = (seriesId: string) => {\n  const allLogs = LocalStorageService.getMovieLogs();\n  \n  console.log('🔍 SPESİFİK SERİ ANALİZİ:', seriesId);\n  console.log('📊 Tüm TV Kayıtları:', allLogs.filter(log => \n    log.contentType === 'tv' || log.mediaType === 'tv'\n  ));\n  \n  // SeriesId ile eşleşen kayıtlar\n  const exactMatches = allLogs.filter(log => String(log.seriesId) === seriesId);\n  console.log('✅ Tam Eşleşen Kayıtlar:', exactMatches);\n  \n  // Benzer seriesId'ler (case-insensitive)\n  const similarMatches = allLogs.filter(log => \n    log.seriesId && String(log.seriesId).toLowerCase().includes(seriesId.toLowerCase())\n  );\n  console.log('🔄 Benzer Eşleşmeler:', similarMatches);\n  \n  // Title'da \"Mahsun\" geçen kayıtlar\n  const titleMatches = allLogs.filter(log => \n    log.title && log.title.toLowerCase().includes('mahsun')\n  );\n  console.log('📝 Title Eşleşmeleri:', titleMatches);\n  \n  // Tüm series ID'leri göster\n  const allSeriesIds = [...new Set(allLogs.map(log => log.seriesId).filter(Boolean))];\n  console.log('🆔 Tüm SeriesId değerleri:', allSeriesIds);\n  \n  return { exactMatches, similarMatches, titleMatches, allSeriesIds };\n};\n","usedDeprecatedRules":[]}]
